{"version":3,"sources":["webpack://@kb1rd/logootish-js/webpack/universalModuleDefinition","webpack://@kb1rd/logootish-js/webpack/bootstrap","webpack://@kb1rd/logootish-js/./src/utils.ts","webpack://@kb1rd/logootish-js/./src/index.ts","webpack://@kb1rd/logootish-js/./src/listmodel/index.ts","webpack://@kb1rd/logootish-js/./src/bst.ts","webpack://@kb1rd/logootish-js/./src/listmodel/logoot.ts","webpack://@kb1rd/logootish-js/./src/ints.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","arraymap","array","fn","length","newarray","splice","FatalError","Error","fatal","Comparable","cmp","allKeys","obj","keys","concat","getOwnPropertySymbols","MemberPtr","val","allValues","map","k","BreakException","catchBreak","e","EventState","ListDocumentModel","LogootInt","LogootPosition","NodeType","InsertionConflictError","MinimalJoinFunction","a","b","branches","filter","br","branch","jf","ldoc_bst","Bst","known_position","astart","logoot_start","bstart","logoot_bst","start","clock","canJoin","range_search","create_range_search","lesser_find_greatest","greater_find_least","push_point","all_greater","_lesser","_greater","search","lesser","greater","before_position","after_position","sort","lesser_length","ldoc_length","last_branch","first_branch","logoot_end","undefined","remaining_length","branch_order","indexOf","branchLength","slice","most_lesser","groups","end","inverseOffsetLowest","rclk","_range","nodes","ldoc_end","unshift","removal_sets","forEach","cg","group","rlen","type","DATA","offsetLowest","len","branch_removals","levels","depth_removals","last_removal","push","onRemoval","Math","min","removals","branch_set","entries","depth_set","nstart","nrclk","level","nend","assign","_skip_ranges","skip_ranges","includes","split_pos","copy","sub","js_int","lesser_end","splitAround","add","conflict_order","vgroup","LogootNodeGroup","original_known_end","operations","known_position_shift","applyShift","ic","lstart","insert","offset","translate","source","dest","splitCg","ng","postprocess","ncg","ConflictGroup","known_end","excerpt_length","origin","moved_length","joinCg","lcg","fetch_position","next_length","remove","other","last_start","last_group","next_group","group_level_start","clamp","group_level_end","empty_length","empty_offset","newgroup","last_join","next_join","already_joined","insertSingleBranchGroup","group_length","group_offset","insertPos","fixJoined","post","joined","should_join","conflicted","conflicting","mark","operateOnAllGteq","data","_mergeNode","REMOVAL","last_pos","last_kp","operateOnAll","toString","BstNode","RangeSearch","cf","points","pd","bucket","last_bucket","inclusive","point","current","clear_buckets","traverse_left","left","passed_bucket","right","Boolean","range_buckets","el","bst_root","node","gteqcmp","getBucketInfo","successor","setSuccessor","gtcmp","eqcmp","ptr","_getInorderSuccessor","result","should_remove","endm1","operation","undef","operateOnAllRange","sequential","operateOnAllLteq","str","split","join","Int32","done","itstart","values","itend","next","gteq","eventnode","pos","fromJSON","ints","toJSON","Array","fill","max","preserve_levels","clamped","equivalentPositionAtLevel","JSON","Schema","items","nt_string","position","reduce","some","g","at","n_branches","TypeError","getNeighbors","gr","old","eachNode","cb","rval","String","IntType","super","int32","Int32Array"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,sBAAuB,GAAIH,GACR,iBAAZC,QACdA,QAAQ,uBAAyBD,IAEjCD,EAAK,uBAAyBC,IARhC,CASmB,oBAATK,KAAuBA,KAAOC,MAAM,WAC9C,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUR,QAGnC,IAAIC,EAASK,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQH,GAAUI,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASO,GAG/DN,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAO,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASf,EAASgB,EAAMC,GAC3CV,EAAoBW,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,WAAwB,OAAO5B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAM,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,gFCwDnD,EAAAC,SA5HF,SAAqBC,EAAYC,GAC/B,IAAK,IAAIlC,EAAI,EAAGA,EAAIiC,EAAME,QAAU,CAClC,MAAMC,EAAWF,EAAGD,EAAMjC,IAC1BiC,EAAMI,OAAOrC,EAAG,KAAMoC,GACtBpC,GAAKoC,EAASD,OAASC,EAASD,OAAS,EAE3C,OAAOF,GAQT,MAAMK,UAAmBC,MAAzB,c,oBACE,KAAAC,OAAQ,GA8GR,EAAAF,aAIA,EAAAG,WA7FF,MAQE,GAAGhB,GACD,OAAuB,IAAhB7B,KAAK8C,IAAIjB,GAKlB,KAAKA,GACH,OAAO7B,KAAK8C,IAAIjB,IAAM,EAKxB,GAAGA,GACD,OAAuB,IAAhB7B,KAAK8C,IAAIjB,GAKlB,KAAKA,GACH,OAAO7B,KAAK8C,IAAIjB,IAAM,EAKxB,GAAGA,GACD,OAAwB,IAAjB7B,KAAK8C,IAAIjB,KAiCpB,SAASkB,EAA8BC,GACrC,OAAQlC,OAAOmC,KAAKD,GAAaE,OAC/BpC,OAAOqC,sBAAsBH,IA0B/B,EAAAI,UAlDF,MAOE,YAAYJ,EAAQrB,GAClB3B,KAAKgD,IAAMA,EACXhD,KAAK2B,IAAMA,EAKb,YACE,OAAO3B,KAAKgD,IAAIhD,KAAK2B,KAEvB,UAAU0B,GACRrD,KAAKgD,IAAIhD,KAAK2B,KAAO0B,IAiCvB,EAAAN,UACA,EAAAO,UAxBF,SAA4CN,GAC1C,OAAOD,EAAQC,GAAKO,IAAKC,GAAMR,EAAIQ,KAGrC,MAAMC,EAAiB,GAqBrB,EAAAA,iBACA,EAAAC,WArBF,SAAoBpB,GAClB,IACEA,IACA,MAAOqB,GACP,GAAIA,IAAMF,EACR,MAAME,K,8EC5HZ,aAOA,IAAKC,EAyBgB,EAAAC,kBA/BnB,EAAAA,kBA+BsC,EAAAC,UA9BtC,EAAAA,UA8BiD,EAAAC,eA7BjD,EAAAA,eA6BiE,EAAAC,SA5BjE,EAAAA,SAGF,SAAKJ,GAIH,yBAIA,yBAIA,2BAZF,CAAKA,MAAU,KAyBN,EAAAA,c,8ECjCT,aAOA,OAEA,OA85BE,EAAAE,UA75BA,EAAAA,UA85BA,EAAAC,eA75BA,EAAAA,eAk6BA,EAAAC,SAj6BA,EAAAA,SAuDF,MAAMC,UAA+BtB,OAcrC,MAAMuB,EAAsB,CAC1BC,EACAC,KAEID,EAAEE,SAASC,OAAQC,IAAQH,EAAEG,GAAGA,IAAKhC,SAGrC6B,EAAEC,SAASC,OAAQC,IAAQJ,EAAEI,GAAGA,IAAKhC,OAo1BzC,EAAAsB,kBAl0BF,MA0CE,YAAYW,EAAmBC,EAAmBP,GArClD,KAAAQ,SAA6B,IAAI,EAAAC,IAC/B,CAACR,EAAkBC,KACjB,GAAID,EAAES,eAAiBR,EAAEQ,eACvB,OAAO,EACF,GAAIT,EAAES,eAAiBR,EAAEQ,eAC9B,OAAQ,EACH,CAIL,MAAMC,EAASV,EAAEW,aACXC,EAASX,EAAEU,aACjB,GAAID,GAAUE,EACZ,OAAOF,EAAO/B,IAAIiC,GAGtB,OAAO,IAOX,KAAAC,WAAwB,IAAI,EAAAL,IAAI,CAACR,EAAGC,IAAMD,EAAEc,MAAMnC,IAAIsB,EAAEa,QASxD,KAAAC,MAAQ,IAAI,EAAApB,UAMV9D,KAAKwE,OAASA,EACdxE,KAAKmF,QAAUV,EAyBjB,YACEQ,EACA1C,GAUA,MAAM6C,EAAepF,KAAK0E,SAASW,sBACnCD,EAAaE,sBAAuB,EACpCF,EAAaG,oBAAqB,EAClCH,EAAaI,WAAW,CAAEZ,eAAgBK,GAAS,WAAW,GAC9DG,EAAaK,YAAY,YACzB,MAAM,QAAEC,EAAO,SAAEC,GAAa3F,KAAK0E,SAASkB,OAAOR,GAEnD,IAAIS,EACAC,EAWAC,EACAC,EAXAN,GAAWA,EAAQnD,SAGrBsD,EAASH,EAAQO,KAAK,CAAC9B,EAAGC,IAAMD,EAAEW,aAAahC,IAAIsB,EAAEU,eAAe,IAElEa,GAAYA,EAASpD,SAEvBuD,EAAUH,EAASM,KAAK,CAAC9B,EAAGC,IAAMA,EAAEU,aAAahC,IAAIqB,EAAEW,eAAe,IAMxE,MAAMoB,EAAgBL,EAASA,EAAOM,YAAc,EACpD,GAAIN,GAAUA,EAAOjB,eAAiBsB,IAAkBjB,EAAO,CAC7D,GACEa,GACAD,EAAOO,cAAgBN,EAAQO,cAC/BR,EAAOO,cAAgBpG,KAAKwE,OAE5B,MAAM,IAAIP,EAEZ8B,EAAkBF,EAAOS,WACzBN,EAAiBF,EAAUA,EAAQhB,kBAAeyB,OACzCV,EACR,MACC,IAAIW,EAAmBvB,EAAQY,EAAOjB,eAWtC,GAVIiB,EAAOY,aAAaC,QAAQ1G,KAAKwE,QAAU,EAC7CgC,GAAoBX,EAAOM,YAE3BK,GAAoBX,EAAOc,aACzBd,EAAOY,aAAaG,MAClB,EACAf,EAAOY,aAAaC,QAAQ1G,KAAKwE,UAInCgC,EAAmB,EACrB,MAAM,IAAI,EAAA9D,WAAW,sCAEvB,GAAyB,IAArB8D,EAAwB,CAK1B,MAAMpB,EAAepF,KAAK0E,SAASW,sBACnCD,EAAaE,sBAAuB,EACpCF,EAAaI,WACX,CAAEZ,eAAgBiB,EAAOjB,gBACzB,WACA,GAEF,MAAM,QAAEc,GAAY1F,KAAK0E,SAASkB,OAAOR,GAEzC,IAAIyB,EASJ,OARInB,GAAWA,EAAQnD,SACrBsE,EAAcnB,EAAQO,KAAK,CAAC9B,EAAGC,IAC7BD,EAAEW,aAAahC,IAAIsB,EAAEU,eACrB,IAGJiB,EAAkBc,EAAYP,gBAC9BN,EAAiBH,EAAOf,cAK1B,IAAK,IAAI1E,EAAI,EAAGA,EAAIyF,EAAOiB,OAAOvE,OAAQnC,IAAK,CAC7C,MAAM,IAAE2G,GAAQlB,EAAOiB,OAAO1G,GAG9B,GAFAoG,GAAoBX,EAAOiB,OAAO1G,GAAGuG,aAAa,CAAC3G,KAAKwE,SAEpDgC,EAAmB,EAIrB,YAHAT,EAAkBC,EAAiBe,EAAIC,qBACpCR,IAGE,GAAyB,IAArBA,EAOT,OANAT,EAAkBgB,OAClBf,EAAiBH,EAAOiB,OAAO1G,EAAI,GAC/ByF,EAAOiB,OAAO1G,EAAI,GAAG6E,MACrBa,EACAA,EAAQhB,kBACRyB,GAKR,MAAM,IAAItC,GA9DX,GAgEQ6B,IACTE,EAAiBF,EAAQhB,cAG3B,MAAO,CACLG,MAAO,IAAI,EAAAlB,eAAexB,EAAQwD,EAAiBC,GACnDzD,SACAgC,GAAIvE,KAAKwE,OACTyC,KAAMjH,KAAKkF,OAcf,YAAYD,EAAe1C,GAIzB,MAAM6C,EAAepF,KAAK0E,SAASW,sBACnCD,EAAaE,sBAAuB,EACpCF,EAAaG,oBAAqB,EAClCH,EAAaI,WAAW,CAAEZ,eAAgBK,GAAS,WAAW,GAC9DG,EAAaI,WAAW,CAAEZ,eAAgBK,EAAQ1C,GAAU,UAAU,GACtE6C,EAAaK,iBAAYc,GACzB,MAAM,QAAEb,EAAO,OAAEwB,GAAWlH,KAAK0E,SAASkB,OAAOR,GAE3C+B,EAAQD,GAAU,GACxB,GAAIxB,GAAWA,EAAQnD,OAAQ,CAG7B,MAAMlC,EAAIqF,EAAQO,KAAK,CAAC9B,EAAGC,IAAMD,EAAEW,aAAahC,IAAIsB,EAAEU,eAAe,GACjEzE,EAAE+G,SAAWnC,GACfkC,EAAME,QAAQhH,GAIlB,MAAMiH,EAAgE,GAiCtE,IAAId,EAAmBvB,EAAQ1C,EAAS4E,EAAM,GAAGvC,eAEjD,EAAAlB,WAAW,IACTyD,EAAMI,QAASC,IACbA,EAAGf,aAAac,QAAShD,IACvBiD,EAAGV,OAAOS,QAASE,IACjB,IAAKA,EAAMlD,GAAGA,GACZ,OAEF,IAAI,MAAEU,EAAO1C,OAAQmF,GAASD,EAC9B,MAAM,KAAEE,EAAI,KAAEV,GAASQ,EAAMlD,GAAGA,GAUhC,GARIoD,IAAS,EAAA3D,SAAS4D,OAChBpB,EAAmBjE,IACrB0C,EAAQA,EAAM4C,aAAarB,EAAmBjE,GAC9CmF,GAAQlB,EAAmBjE,GA/CvC,SACEgC,EACAU,EACA6C,EACAb,GAEA,GAAIa,GAAO,EACT,OAEGR,EAAc/C,KACjB+C,EAAc/C,GAA4B,IAE5C,MAAMwD,EAAkBT,EAAc/C,GAEjCwD,EAAgB9C,EAAM+C,UACzBD,EAAgB9C,EAAM+C,QAAU,IAElC,MAAMC,EAAiBF,EAAgB9C,EAAM+C,QACvCE,EAAeD,EAAeA,EAAe1F,OAAS,GAG1D2F,GACAA,EAAa1D,SAAWD,GAC4C,IAApE2D,EAAajD,MAAM4C,aAAaK,EAAa3F,QAAQO,IAAImC,IACzB,IAAhCiD,EAAajB,KAAKnE,IAAImE,GAEtBiB,EAAa3F,QAAUuF,EAEvBG,EAAeE,KAAK,CAAE3D,OAAQD,EAAIU,QAAO1C,OAAQuF,EAAKb,SAqBhDmB,CAAU7D,EAAIU,EAAOoD,KAAKC,IAAIZ,EAAMlB,GAAmBS,GACvDT,GAAoBiB,EAAMlF,QAExBiE,GAAoB,EACtB,MAAM,EAAA/C,sBAOhB,MAAM8E,EAAsB,GAO5B,OANA,EAAAjF,UAAUgE,GAAcC,QAASiB,IAC/B1H,OAAO2H,QAAQD,GAAYjB,QAAQ,EAAE,CAAEmB,MACrCA,EAAUnB,QAAS1G,GAAM0H,EAASJ,KAAKtH,QAIpC,CAAE0H,YAiBX,WACEhE,EACAoE,EACApG,EACAqG,EACAjB,EACAxC,GAEA,MAAM0D,EAAQF,EAAOX,OACfc,EAAOH,EAAOd,aAAatF,GAE7BvC,KAAKkF,MAAMpC,IAAI8F,GAAS,GAC1B5I,KAAKkF,MAAM6D,OAAOH,GAOpB,MAAMxD,EAAepF,KAAKgF,WAAWK,sBACrCD,EAAaE,sBAAuB,EACpCF,EAAaG,oBAAqB,EAClCH,EAAaI,WAAW,CAAEP,MAAO0D,GAAU,WAAW,GACtDvD,EAAaI,WAAW,CAAEP,MAAO6D,GAAQ,gBAAgB,GACzD1D,EAAaK,YAAY,YACzB,MAAM,QAAEC,EAAO,aAAEsD,EAAY,SAAErD,GAAa3F,KAAKgF,WAAWY,OAC1DR,GAGF,IAAIS,EACAC,EACJ,GAAIJ,GAAWA,EAAQnD,OAAS,EAC9B,MAAM,IAAI,EAAAG,WACR,wDAKJ,GAHWgD,GAAWA,EAAQnD,SAC5BsD,EAASH,EAAQ,IAEfC,GAAYA,EAASpD,OAAS,EAChC,MAAM,IAAI,EAAAG,WACR,wDAEOiD,GAAYA,EAASpD,SAC9BuD,EAAUH,EAAS,IAErB,IAAIsD,EAAcD,EACdA,EAAa/C,KAAK,CAAC9B,EAAGC,IAAMD,EAAEc,MAAMnC,IAAIsB,EAAEa,QAC1C,GAaJ,GAXIY,GAAUoD,EAAYC,SAASrD,IACjCoD,EAAYxG,OAAOwG,EAAYvC,QAAQb,GAAS,GAE9CC,GAAWmD,EAAYC,SAASpD,IAClCmD,EAAYxG,OAAOwG,EAAYvC,QAAQZ,GAAU,GAE/CD,GACFoD,EAAY5B,QAAQxB,GAKpBA,GACAA,EAAOZ,MAAM+C,OAASa,GACtBhD,EAAOZ,MAAMnC,IAAI6F,GAAU,GAC3B9C,EAAOkB,IAAIjE,IAAIgG,GAAQ,EACvB,CACA,MAAMK,EAAYR,EACfS,OACAP,MAAMhD,EAAOZ,MAAM+C,QACnBqB,IAAIxD,EAAOZ,MAAM4D,MAAMhD,EAAOZ,MAAM+C,SAASsB,OAChD,GAAIH,EAAY,GAAKA,EAAYtD,EAAOtD,OAAQ,CAC9C,MAAMgH,EAAa1D,EAAO2D,YAAYL,GACtCF,EAAYd,KAAKoB,GACjBvJ,KAAKgF,WAAWyE,IAAIF,IAGpBzD,IAAYmD,EAAYC,SAASpD,IACnCmD,EAAYd,KAAKrC,GAInB,IAAI4D,EAAkC,GA2BtC,GA1BAT,EAAY1B,QAAQ,EAAGE,YAEnBA,IACCiC,EAAeR,SAASzB,IACzBA,EAAMhB,aAAalE,QAEnBmH,EAAevB,KAAKV,KAGxBiC,EAAiBA,EAAezD,KAC9B,CAAC9B,EAAGC,IAAMD,EAAES,eAAiBR,EAAEQ,gBASjCqE,EAAcA,EAAY3E,OACxB,EAAGW,WAAYA,EAAM+C,QAAUa,GAAS5D,EAAMnC,IAAIgG,IAAS,IAO1DG,EAAY1G,QACb0G,EAAYA,EAAY1G,OAAS,GAAG0C,MAAMnC,IAAIgG,GAAQ,EACtD,CACA,MAAMa,EAAS,IAAI,EAAAC,gBACnBD,EAAO1E,MAAQ6D,EACfG,EAAYd,KAAKwB,GAGnB,MAAME,EAAqBH,EAAenH,OACtCmH,EAAeA,EAAenH,OAAS,GAAG6E,SAC1C,EAKE0C,EAA0B,GAChC,IAAIC,EAAuB,EAC3B,MAAMC,EAAa,CACjBxC,EACAvC,EACA1C,EACA0H,KAEAF,GAAwBxH,EAGxB,MAAM2H,EAAS1C,EAAG1C,aAClB,IAAK,IAAI1E,EAAIsJ,EAAenH,OAAS,EAAGnC,EAAI,EAAGA,IAAK,CAClD,MAAMyB,EAAI6H,EAAetJ,GAEzB,GAAI6J,GACF,GAAIpI,EAAE+C,eAAiBK,GAASpD,EAAEiD,aAAahC,IAAIoH,GAAU,EAC3D,YAGF,GAAIrI,EAAE+C,gBAAkBK,GAASpD,EAAEiD,aAAahC,IAAIoH,IAAW,EAC7D,OAIArI,IAAM2F,IACRkC,EAAetJ,GAAGwE,gBAAkBrC,KAepC4H,EAAS,CACb3C,EACAvC,EACAmF,EACA7H,KAEe,IAAXA,IAGJuH,EAAW3B,KAAK,CACdR,KAAM,IACN1C,QACAmF,SACA7H,WAEFyH,EAAWxC,EAAIvC,EAAO1C,GAAQ,KAE1B8H,EAAY,CAACC,EAAgB/H,EAAgBgI,KAClC,IAAXhI,GAGA+H,IAAWC,GAGfT,EAAW3B,KAAK,CAAER,KAAM,IAAK2C,SAAQ/H,SAAQgI,UAczCC,EAAU,CACdhD,EACAiD,EACAC,EAA4C,YAE5C,IAAKlD,EAAGV,OAAOoC,SAASuB,GACtB,MAAM,IAAI,EAAA/H,WAAW,qCAEvB,IAAKgH,EAAeR,SAAS1B,GAC3B,MAAM,IAAI,EAAA9E,WAAW,wCAIvB,MAAMiI,EAAM,IAAI,EAAAC,cAAcpD,EAAGJ,UAEjC,IAAIxC,EAAiB4C,EAAG5C,eACxB,MAAMiG,EAAYF,EAAI/F,eA+BtB,OA9BA4C,EAAGf,aAAac,QAAShD,IAEvB,MAAMuG,EAAiB,MACrB,IAAIC,EAAS,EACb,IAAK,IAAI3K,EAAI,EAAGA,EAAIoH,EAAGV,OAAOvE,OAAQnC,IAEpC,GADA2K,GAAUvD,EAAGV,OAAO1G,GAAGuG,aAAa,CAACpC,IACjCiD,EAAGV,OAAO1G,KAAOqK,EACnB,OAAOM,EAIX,MAAM,IAAI,EAAArI,YATW,GAYvBiI,EAAIlE,aAAa0B,KAAK5D,GAEtB,MAAMyG,EAAexD,EAAGb,aAAa,CAACpC,IAAOuG,EAE7CH,EAAI/F,gBAAkBoG,EACtBpG,GAAkBkG,EAClBT,EAAUzF,EAAgBoG,EAAcH,EAAYG,KAGtDL,EAAI7D,OAASU,EAAGV,OAAOrE,OAAO+E,EAAGV,OAAOJ,QAAQ+D,GAAM,EAAGjD,EAAGV,OAAOvE,QACnEoI,EAAI7D,OAAOS,QAASE,GAAWA,EAAMA,MAAQkD,GAE7CD,EAAYC,GACZ3K,KAAK0E,SAAS+E,IAAIkB,GAClBjB,EAAejH,OAAOiH,EAAehD,QAAQc,GAAM,EAAG,EAAGmD,GAElDA,GAGHM,EAAS,CAACC,EAAoBP,KAClCA,EAAIlE,aAAac,QAAShD,IACnB2G,EAAIzE,aAAayC,SAAS3E,IAC7B2G,EAAIzE,aAAa0B,KAAK5D,KAI1BoG,EAAI7D,OAAOS,QAASE,GAAWA,EAAMA,MAAQyD,GAC7CA,EAAIpE,OAAOrE,OAAOyI,EAAIpE,OAAOvE,OAAQ,KAAMoI,EAAI7D,QAE/C,IAAIqE,EAAiBR,EAAI/F,eACrBA,EAAiBsG,EAAItG,eACzB+F,EAAIlE,aAAac,QAAShD,IACxBK,GAAkBsG,EAAIvE,aAAa,CAACpC,IACpC,MAAM6G,EAAcT,EAAIhE,aAAa,CAACpC,IACtC8F,EAAUc,EAAgBC,EAAaxG,EAAiBwG,GACxDD,GAAkBC,IAGpBT,EAAIlE,aAAalE,OAAS,EAC1BoI,EAAI7D,OAAS,GAEb9G,KAAK0E,SAAS2G,OAAOV,EAAMW,GAAUA,IAAUX,GAC/CjB,EAAejH,OAAOiH,EAAehD,QAAQiE,GAAM,IAGrD,IAAIY,EAAa5C,EAAOE,MAAMA,GAC1B2C,EAAa3F,EAsLjB,OArLAoD,EAAY1B,QAAQ,CAACE,EAAOrH,KAE1B,IAAIqL,EAAaxC,EAAY7I,EAAI,GAEjC,MAAMsL,EAAoBjE,EAAMxC,MAAM0G,MAAMhD,EAAQG,EAAMD,GAAOxI,EAAEwI,GAC7D+C,EAAkBnE,EAAMV,IAAI4E,MAAMhD,EAAQG,EAAMD,GAAOxI,EAAEwI,GAEzDgD,EAAeH,EAAkBtC,OAAOC,IAAIkC,GAAYjC,OACxDwC,EAAeP,EAAWnC,OAAOC,IAAIV,EAAOtI,EAAEwI,IAAQS,OAG5D,GACEuC,EAAe,GAGdpE,EAAMxC,MAAM+C,OAASa,GACpBtG,EAASuJ,EAAe,GACxBrE,EAAMxC,MAAMnC,IAAI6F,GAAU,GAC1B4C,EAAWzI,IAAI6F,EAAOtI,EAAEwI,IAAU,EACpC,CACA,MAAMkD,EAAW,IAAI,EAAAnC,gBACrBmC,EAAS9G,MAAQ0D,EAAOS,OACxB2C,EAAS9G,MAAM5E,EAAEwI,GAAOE,OAAOwC,GAC/BQ,EAASxJ,OAASsJ,GAAgBtJ,EAASuJ,EAC3CC,EAASxH,GAAGA,EAAI,CAAEoD,OAAMV,KAAM2B,IAM9B,MAAMoD,EAAYR,GAAcrG,EAAQqG,EAAYO,GAC9CE,EAAYxE,GAAStC,EAAQ4G,EAAUtE,GACvCyE,EACJV,GAAc/D,GAAS+D,EAAW/D,QAAUA,EAAMA,OAE/CyE,GAAkBF,GAAaC,EAElChB,EAAOO,EAAW/D,MAAOA,EAAMA,QACtByE,GAAoBF,GAAaC,GAE1CzB,EAAQgB,EAAW/D,MAAO+D,GAGvBQ,GAAcC,EAcjBF,EAAStE,MAAQuE,EAAYR,EAAW/D,MAAQA,EAAMA,OAZtDsE,EAAStE,MAAQ,IAAI,EAAAmD,cACnBY,EAAaA,EAAW/D,MAAML,SAAW,GAE3C2E,EAAStE,MAAMhB,aAAa0B,KAAK5D,GAEjCmF,EAAejH,OACb+I,EAAa9B,EAAehD,QAAQ8E,EAAW/D,OAAS,EAAI,EAC5D,EACAsE,EAAStE,QAOTE,IAAS,EAAA3D,SAAS4D,KACpBuC,EACE4B,EAAStE,MACTsE,EAAStE,MAAM0E,wBAAwBJ,GACvCD,EACAC,EAASxJ,QAGXwJ,EAAStE,MAAM0E,wBAAwBJ,GAGzCP,EAAaO,EACb/L,KAAKgF,WAAWyE,IAAIsC,GACfC,GAAcC,GACjBjM,KAAK0E,SAAS+E,IAAIsC,EAAStE,OAI/B,MAAM2E,EAAeR,EAAgBxC,OAAOC,IAAIqC,GAAmBpC,OAC7D+C,EAAeX,EAAkBtC,OAAOC,IAAIV,EAAOtI,EAAEwI,IAAQS,OAEnE,GACE7B,EAAMxC,MAAM+C,SAAWa,GACvBuD,EAAe,KACb3E,EAAMlD,GAAGA,IAETqE,EAAM9F,IAAI2E,EAAMlD,GAAGA,GAAI0C,OAASU,IAAS,EAAA3D,SAAS4D,KAAO,GAAK,IAChE,CAUA,GARIH,EAAMxC,MAAMnC,IAAI6F,GAAU,IAC5B6C,EAAa/D,EACbA,EAAQA,EAAM+B,YACZb,EAAOtI,EAAEwI,GAAOQ,IAAI5B,EAAMxC,MAAM5E,EAAEwI,IAAQS,QAE5CtJ,KAAKgF,WAAWyE,IAAIhC,IAGlBA,EAAMV,IAAIjE,IAAIgG,GAAQ,EAAG,CAC3B,MAAMiD,EAAWtE,EAAM+B,YACrB/B,EAAMlF,OAASkF,EAAMV,IAAI1G,EAAEwI,GAAOQ,IAAIP,EAAKzI,EAAEwI,IAAQS,QAEvDtJ,KAAKgF,WAAWyE,IAAIsC,GACpBN,EAAaM,EAIVtE,EAAMA,MAAMhB,aAAayC,SAAS3E,IACrCkD,EAAMA,MAAMhB,aAAa0B,KAAK5D,GAIhC,MAAMK,EAAiB6C,EAAMA,MAAM6E,UAAU/H,EAAIkD,GAE7CA,EAAMlD,GAAGA,IAAOkD,EAAMlD,GAAGA,GAAIoD,OAAS,EAAA3D,SAAS4D,MAhPxC,EAACJ,EAAmBvC,EAAe1C,KACjC,IAAXA,IAGJuH,EAAW3B,KAAK,CACdR,KAAM,IACN1C,QACA1C,WAEFyH,EAAWxC,EAAIvC,GAAQ1C,GAAQ,KAwO3B8I,CAAO5D,EAAMA,MAAO7C,EAAgB6C,EAAMlF,QAG5CkF,EAAMlD,GAAGA,EAAI,CAAEoD,OAAMV,KAAM2B,IAEvBjB,IAAS,EAAA3D,SAAS4D,MACpBuC,EAAO1C,EAAMA,MAAO7C,EAAgByH,EAAc5E,EAAMlF,QAG1D,MAAMgK,EAAY,CAChBpI,EACAC,EACAoI,GAAO,KAEP,IAAKrI,IAAMC,EACT,OAEF,MAAMqI,EAAStI,EAAEsD,QAAUrD,EAAEqD,MACvBiF,EAAcvH,EAAQhB,EAAGC,GAC/B,IAAKqI,GAAUC,EACbzB,EAAO9G,EAAEsD,MAAOrD,EAAEqD,YACb,GAAIgF,IAAWC,EAAa,CAKjC,MAAM/B,EAAMH,EAAQrG,EAAEsD,MAAOtD,EAAIwG,IAC3BhD,IAAS,EAAA3D,SAAS4D,MAAQ4E,IAC5B7B,EAAI/F,gBAAkB6C,EAAMlF,UAG5BoF,IAAS,EAAA3D,SAAS4D,MAAQ4E,IAC5B7B,EAAI/F,gBAAkB6C,EAAMlF,UAMlCgK,EAAUf,EAAY/D,GAAO,GAC7B8E,EAAU9E,EAAOgE,GAAY,GAG/BF,EAAa9D,EAAMV,IAAI4E,MAAMhD,EAAQG,EAAMD,GAAOA,MAAMA,GACxD2C,EAAa/D,IAGfiC,EAAenC,QAAQ,EAAG3C,iBAAgBuB,cAAawG,iBA1P1C,EACX1H,EACA1C,EACAqK,KAEe,IAAXrK,GAGJuH,EAAW3B,KAAK,CAAER,KAAM,IAAK1C,QAAO1C,SAAQqK,iBAmP5CC,CAAKjI,EAAgBuB,EAAawG,KAIpC3M,KAAK0E,SAASoI,iBACZ,CAAElI,eAAgBiF,GAClB,EAAGkD,WACD,IAAKA,EAAKjG,OAAOvE,OACf,MAAM,IAAI,EAAAG,WAAW,gDAEnBqK,EAAKjI,aAAahC,IAAIgG,GAAQ,GAG7BY,EAAeR,SAAS6D,KAC3BA,EAAKnI,gBAAkBmF,KAG3B,GAGKD,EAGT,aACEvF,EACAU,EACA1C,EACA0E,GAEA,OAAOjH,KAAKgN,WAAWzI,EAAIU,EAAO1C,EAAQ0E,EAAM,EAAAjD,SAAS4D,KAAM5H,KAAKmF,SAGtE,aACEZ,EACAU,EACA1C,EACA0E,GAEA,OAAOjH,KAAKgN,WACVzI,EACAU,EACA1C,EACA0E,EACA,EAAAjD,SAASiJ,QACTjN,KAAKmF,SAST,WACE,IAAI+H,EACAC,EAAU,EACdnN,KAAK0E,SAAS0I,aAAa,EAAGL,WAC5B,IAAKA,EAAKjG,OAAOvE,OACf,MAAM,IAAI,EAAAG,WAAW,iCAEvB,GAAIqK,EAAKnI,iBAAmBuI,EAC1B,MAAM,IAAIxK,MACR,8CAA8CoK,EAAKnI,wBAAwBuI,KAG/EA,EAAUJ,EAAK3F,SACf2F,EAAKjG,OAAOS,QAAQ,EAAGtC,YACrB,GAAIiI,GAAYA,EAASpK,IAAImC,IAAU,EACrC,MAAM,IAAI,EAAAvC,WACR,+BAA+BuC,EAAMoI,oBAAoBH,EAASG,eAGtEH,EAAWjI,S,8EC/5BnB,aAKA,MAAMqI,EAOJ,YAAYP,GACV/M,KAAK+M,KAAOA,GAiqBW,EAAAO,UAjoB3B,MAAMC,EAeJ,YAAYC,GAVZ,KAAAlI,sBAAuB,EAKvB,KAAAC,oBAAqB,EACb,KAAAkI,OAAqB,GAK3BzN,KAAKwN,GAAKA,EAGZ,YACEA,EACAE,EACAC,GAEA,MAAM/H,EAAS,IAAI2H,EAAeC,GAGlC,OAFA5H,EAAO6H,OAAOtF,KAAK,CAACuF,GAAI,EAAMC,IAC9B/H,EAAOgI,iBAAcrH,EACdX,EAET,UACE4H,EACAE,EACAC,GAEA,MAAM/H,EAAS,IAAI2H,EAAeC,GAGlC,OAFA5H,EAAO6H,OAAOtF,KAAK,CAACuF,GAAI,EAAOC,IAC/B/H,EAAOgI,iBAAcrH,EACdX,EAET,YACE4H,EACAE,EACAC,GAEA,MAAM/H,EAAS,IAAI2H,EAAeC,GAGlC,OAFA5H,EAAO6H,OAAOtF,KAAK,CAACuF,GAAI,OAAOnH,IAC/BX,EAAOgI,YAAcD,EACd/H,EAET,UACE4H,EACAE,EACAC,GAEA,MAAM/H,EAAS,IAAI2H,EAAeC,GAGlC,OAFA5H,EAAO6H,OAAOtF,KAAK,CAACuF,GAAI,OAAMnH,IAC9BX,EAAOgI,YAAcD,EACd/H,EAST,WAAWmH,EAASY,EAAgBE,GAAY,GAC9C,MAAMC,EAAkB,CAACf,EAAMc,EAAWF,GAC1C,IAAK,IAAIvN,EAAI,EAAGA,EAAIJ,KAAKyN,OAAOlL,OAAQnC,IACtC,GAAIJ,KAAKwN,GAAGT,EAAM/M,KAAKyN,OAAOrN,GAAG,IAAM,EAErC,YADAJ,KAAKyN,OAAOhL,OAAOrC,EAAG,EAAG0N,GAI7B9N,KAAKyN,OAAOtF,KAAK2F,GAKnB,YAAYH,GACV3N,KAAK4N,YAAcD,EAkBrB,cACEZ,EACAgB,EACAC,GAAgB,EAChBC,GAMA,IAAIC,GAAO,EACPC,GAAgB,EAChBR,EAAS3N,KAAK4N,YACdQ,EAAQC,QAAQrO,KAAK4N,cAGpB5N,KAAKyN,OAAOlL,QAAUvC,KAAK4N,eACzBM,GAAQD,GACXA,IAEFC,GAAO,GAIT,IAAK,IAAI9N,EAAI,EAAGA,EAAIJ,KAAKyN,OAAOlL,OAAQnC,IAAK,CAC3C,MAAOkL,EAAOuC,EAAWzJ,GAAKpE,KAAKyN,OAAOrN,GAEtCgE,IAAM+J,KACHD,GAAQD,GACXA,IAEFC,GAAO,GAILlO,KAAKwN,GAAGT,EAAMzB,IAAUuC,EAAY,EAAI,KACrCM,IACHA,GAAgB,EAChBR,EAASvJ,GAGJ,GAALhE,GACAJ,KAAKsF,sBACL0I,GACAD,EAAQ3J,IACR2J,EAAQ3J,GAAG7B,SAEPvC,KAAKwN,GAAGO,EAAQ3J,GAAG,GAAI2I,GAAQ,EACjCgB,EAAQ3J,GAAK,GACJpE,KAAKwN,GAAGO,EAAQ3J,GAAG,GAAI2I,GAAQ,IACxCY,OAASpH,KAKXnC,GAAK+J,GAA0C,IAAzBnO,KAAKwN,GAAGlC,EAAOyB,KACvCqB,GAAQ,GAKZ,IAAKD,GAAiBnO,KAAK4N,YAAa,CACtC,MAAMxJ,EAAIpE,KAAK4N,YAEXD,IAAWO,IACbA,GAAO,EACPD,KAGAjO,KAAKuF,oBACLyI,GACAD,EAAQ3J,IACR2J,EAAQ3J,GAAG7B,SAEPvC,KAAKwN,GAAGO,EAAQ3J,GAAG,GAAI2I,GAAQ,EACjCgB,EAAQ3J,GAAK,GACJpE,KAAKwN,GAAGO,EAAQ3J,GAAG,GAAI2I,GAAQ,IACxCY,OAASpH,IAGb6H,GAAQ,EAkBV,OAdAF,EACEA,KACElO,KAAKsF,uBACJtF,KAAKyN,OAAOlL,SACZwL,EAAQ/N,KAAKyN,OAAO,GAAG,MACvBM,EAAQ/N,KAAKyN,OAAO,GAAG,IAAIlL,QAC5BvC,KAAKwN,GAAGO,EAAQ/N,KAAKyN,OAAO,GAAG,IAAI,GAAIV,IAAS,GACpDqB,EACEA,KACEpO,KAAKuF,qBACJwI,EAAQ/N,KAAK4N,eACbG,EAAQ/N,KAAK4N,aAAarL,QAC3BvC,KAAKwN,GAAGO,EAAQ/N,KAAK4N,aAAa,GAAIb,IAAS,GAE5C,CAAEmB,OAAMP,SAAQS,SAYzB,KACErB,EACAuB,EAAwC,IAExC,IAAIlO,EACJ,IAAKA,EAAI,EAAGA,EAAIJ,KAAKyN,OAAOlL,OAAQnC,IAAK,CACvC,MAAOkL,EAAOuC,EAAWzJ,GAAKpE,KAAKyN,OAAOrN,GAE1C,GAAIJ,KAAKwN,GAAGT,EAAMzB,IAAUuC,EAAY,EAAI,GAC1C,OAAKzJ,KAIFkK,EAAclK,IACR,IAANhE,GACCJ,KAAKsF,sBACLgJ,EAAclK,GAAG7B,QACjBvC,KAAKwN,GAAGc,EAAclK,GAAG,GAAI2I,GAAQ,KAEvCuB,EAAclK,GAAK,IAErBkK,EAAclK,GAAG+D,KAAK4E,GACfuB,GAZEA,EAeblO,EAAIJ,KAAKyN,OAAOlL,OAEhB,MAAM6B,EAAIpE,KAAK4N,YACf,OAAKxJ,KAIFkK,EAAclK,IACdpE,KAAKuF,oBACJ+I,EAAclK,GAAG7B,QACjBvC,KAAKwN,GAAGc,EAAclK,GAAG,GAAI2I,GAAQ,KAEvCuB,EAAclK,GAAK,IAErBkK,EAAclK,GAAG+D,KAAK4E,GACfuB,GAXEA,EAmBX,aAAajM,GACX,MAAMiM,EAAwC,GAE9C,OADAjM,EAAMkF,QAASgH,GAAOvO,KAAKiG,KAAKsI,EAAID,IAC7BA,GA8XG,EAAAf,cAAL,EAAA5I,IAnXT,MAOE,YAAY7B,GANZ,KAAA0L,cAAmCjI,EAOjCvG,KAAK8C,IAAMA,EAGb,QAAQqB,EAAMC,GACZ,OAAOpE,KAAK8C,IAAIqB,EAAGC,IAAM,EAE3B,MAAMD,EAAMC,GACV,OAAOpE,KAAK8C,IAAIqB,EAAGC,GAAK,EAE1B,MAAMD,EAAMC,GACV,OAA0B,IAAnBpE,KAAK8C,IAAIqB,EAAGC,GASrB,IAAItC,EAAW2M,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,aAClDyO,EAAKpN,MAECrB,KAAK0O,QAAQD,EAAKpN,MAAM0L,KAAMjL,GACvC9B,KAAKyJ,IAAI3H,EAAQ,IAAI,EAAAsB,UAAUqL,EAAKpN,MAAO,SAE3CrB,KAAKyJ,IAAI3H,EAAQ,IAAI,EAAAsB,UAAUqL,EAAKpN,MAAO,UAJ3CoN,EAAKpN,MAAQ,IAAIiM,EAAQxL,GAY7B,sBACE,OAAO,IAAIyL,EAAevN,KAAK8C,KAWjC,OACE8C,EACA6I,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,YAC1CuD,EAA8B,IAE9B,IAAKkL,EAAKpN,MACR,OAAOkC,EAET,MAAM,OAAEoK,EAAM,MAAES,GAAUxI,EAAO+I,cAC/BF,EAAKpN,MAAM0L,KACXxJ,GACA,EACA,KAIEvD,KAAK4F,OAAOA,EAAQ,IAAI,EAAAxC,UAAUqL,EAAKpN,MAAO,QAASkC,KAY3D,OATIoK,IACGpK,EAAIoK,KACPpK,EAAIoK,GAAU,IAEhBpK,EAAIoK,GAAQxF,KAAKsG,EAAKpN,MAAM0L,OAE1BqB,GACFpO,KAAK4F,OAAOA,EAAQ,IAAI,EAAAxC,UAAUqL,EAAKpN,MAAO,SAAUkC,GAEnDA,EAUT,qBACEzB,EACA2M,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,aAG1C,IAAI4O,EACJ,MAAMC,EAAgB1M,MACfyM,GAAczM,GAAKnC,KAAK8O,MAAMF,EAAU7B,KAAM5K,EAAE4K,SACnD6B,EAAYzM,IAgBhB,OAbIsM,EAAKpN,QACHrB,KAAK0O,QAAQD,EAAKpN,MAAM0L,KAAMjL,KAC3B9B,KAAK+O,MAAMN,EAAKpN,MAAM0L,KAAMjL,IAC/B+M,EAAa,CAAEG,IAAKP,EAAM1B,KAAM0B,EAAKpN,MAAM0L,OAE7C8B,EACE7O,KAAKiP,qBAAqBnN,EAAQ,IAAI,EAAAsB,UAAUqL,EAAKpN,MAAO,WAGhEwN,EACE7O,KAAKiP,qBAAqBnN,EAAQ,IAAI,EAAAsB,UAAUqL,EAAKpN,MAAO,YAGzDuN,EAcT,OACE9M,EACAwC,EAA+B,MAAe,GAC9CmK,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,aAE1C,GAAIyO,EAAKpN,MAAO,CACd,MAAM6N,EAASlP,KAAK8C,IAAI2L,EAAKpN,MAAM0L,KAAMjL,GACnCqN,EAAgB7K,EAAOmK,EAAKpN,MAAM0L,MACxC,GAAImC,EAAS,EACXlP,KAAKqL,OAAOvJ,EAAQwC,EAAQ,IAAI,EAAAlB,UAAUqL,EAAKpN,MAAO,cACjD,GAAI6N,EAAS,EAClBlP,KAAKqL,OAAOvJ,EAAQwC,EAAQ,IAAI,EAAAlB,UAAUqL,EAAKpN,MAAO,eACjD,GAAIoN,EAAKpN,MAAM6M,MAAQO,EAAKpN,MAAM+M,OAASe,EAAe,CAC/D,MAAMP,EAAY5O,KAAKiP,qBAAqBR,EAAKpN,MAAM0L,KAAM0B,GAE7DzO,KAAKqL,OAAOuD,EAAU7B,UAAMxG,EAAWqI,EAAUI,KACjDP,EAAKpN,MAAM0L,KAAO6B,EAAU7B,UACnBoC,IACTV,EAAKpN,MAAQoN,EAAKpN,MAAM6M,MAAQO,EAAKpN,MAAM+M,QAgBjD,kBACEnJ,EACAmK,EACAC,EACAZ,EAAOzO,KAAKwO,SACZc,GAAQ,GAEJb,IAASa,IACPtP,KAAK0O,QAAQD,EAAK1B,KAAM9H,GACtBjF,KAAK0O,QAAQU,EAAOX,EAAK1B,OAC3B/M,KAAKuP,kBAAkBtK,EAAOmK,EAAOC,EAAWZ,EAAKP,MAAOO,EAAKP,MACjElO,KAAKuP,kBACHtK,EACAmK,EACAC,EACAZ,EAAKL,OACJK,EAAKL,OAERiB,EAAUZ,IAEVzO,KAAKuP,kBAAkBtK,EAAOmK,EAAOC,EAAWZ,EAAKP,MAAOO,EAAKP,MAGnElO,KAAKuP,kBAAkBtK,EAAOmK,EAAOC,EAAWZ,EAAKL,OAAQK,EAAKL,QAcxE,iBACE/M,EACAgO,EACAG,GAAa,EACbf,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,aAEtCyO,EAAKpN,QACHrB,KAAK0O,QAAQD,EAAKpN,MAAM0L,KAAM1L,KAC3BmO,GACHH,EAAUZ,EAAKpN,OAEjBrB,KAAK8M,iBACHzL,EACAgO,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,SAExBmO,GACFH,EAAUZ,EAAKpN,QAGnBrB,KAAK8M,iBACHzL,EACAgO,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,WAchC,iBACEA,EACAgO,EACAG,GAAa,EACbf,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,aAEtCyO,EAAKpN,QACHrB,KAAK0O,QAAQrN,EAAOoN,EAAKpN,MAAM0L,OAC5ByC,GACHH,EAAUZ,EAAKpN,OAEjBrB,KAAKyP,iBACHpO,EACAgO,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,SAExBmO,GACFH,EAAUZ,EAAKpN,OAEjBrB,KAAKyP,iBACHpO,EACAgO,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,WAG5BrB,KAAKyP,iBACHpO,EACAgO,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,UAclC,aACEgO,EACAG,GAAa,EACbf,EAAsB,IAAI,EAAArL,UAAUpD,KAAM,aAEtCyO,EAAKpN,QACFmO,GACHH,EAAUZ,EAAKpN,OAEjBrB,KAAKoN,aACHiC,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,SAExBmO,GACFH,EAAUZ,EAAKpN,OAEjBrB,KAAKoN,aACHiC,EACAG,EACA,IAAI,EAAApM,UAAUqL,EAAKpN,MAAO,WAYhC,SAAS4D,EAAUmK,GACjB,MAAMjI,EAAoC,GAG1C,OAFAnH,KAAKuP,kBAAkBtK,EAAOmK,EAAQvN,GAAMsF,EAAMgB,KAAKtG,IAEhDsF,EAMT,QAAQ9F,GACN,IAAI8F,EAAoC,GASxC,OARAnH,KAAK8M,iBAAiBzL,EAAQQ,KACvBsF,EAAM,IAAMnH,KAAK8O,MAAM3H,EAAM,GAAG4F,KAAMlL,EAAEkL,MAC3C5F,EAAQ,CAACtF,GACA7B,KAAK+O,MAAM5H,EAAM,GAAG4F,KAAMlL,EAAEkL,OACrC5F,EAAMgB,KAAKtG,KAIRsF,EAMT,QAAQ9F,GACN,IAAI8F,EAAoC,GASxC,OARAnH,KAAKyP,iBAAiBpO,EAAQQ,KACvBsF,EAAM,IAAMnH,KAAK8O,MAAMjN,EAAEkL,KAAM5F,EAAM,GAAG4F,MAC3C5F,EAAQ,CAACtF,GACA7B,KAAK+O,MAAM5H,EAAM,GAAG4F,KAAMlL,EAAEkL,OACrC5F,EAAMgB,KAAKtG,KAIRsF,EAGT,WACE,IAAIuI,EAAM,UAWV,OAVA1P,KAAKoN,aAAa,EAAGL,WACnB2C,GACE,KACA3C,EACGM,WACAsC,MAAM,MACNC,KAAK,QACR,OAEJF,GAAO,IACAA,K,8ECzqBX,aACA,OAKA,IA6QK1L,EA7QEF,EAAY,EAAA+L,MAinBjB,EAAA/L,YA5lBF,MAAMC,EAoBJ,YACE+D,EAAM,EACG7C,EACA8B,GAET,GAHS,KAAA9B,QACA,KAAA8B,MAtBD,KAAA1E,MAAqB,CAAC,IAAIyB,EAAU,KAwBvCmB,GAAS8B,EACZ/G,KAAKqC,MAAQ0E,EAAIC,oBAAoBc,GAAKzF,WACrC,IAAK0E,GAAO9B,EACjBjF,KAAKqC,MAAQ4C,EAAMmE,OAAO/G,WACrB,GAAI4C,GAAS8B,EAAK,CACvB,IAAI+I,GAAO,EACX,MAAMC,EAAU9K,EAAM5C,MAAM2N,SACtBC,EAAQlJ,EAAI1E,MAAM2N,SACxB,IAAIrH,EACAG,EAIJ,IAFA9I,KAAKqC,MAAME,OAAS,GAEZuN,GACDnH,GAAWA,EAAOmH,OACrBnH,EAASoH,EAAQG,QAEdpH,GAASA,EAAKgH,OACjBhH,EAAOmH,EAAMC,QAGVvH,EAAOmH,MAAShH,EAAKgH,KAQdnH,EAAOmH,KAKPhH,EAAKgH,MAQf9P,KAAKqC,MAAM8F,KAAK,IAAIrE,GACpBgM,GAAO,IANP9P,KAAKqC,MAAM8F,KAAK,IAAIrE,EAAUgF,EAAKzH,OAAOgI,IAAIvB,IAC9CgI,GAAO,IANP9P,KAAKqC,MAAM8F,KAAK,IAAIrE,EAAU6E,EAAOtH,QACrCyO,GAAO,IAVHhH,EAAKzH,MAAM8O,KAAK,IAAIrM,EAAU6E,EAAOtH,OAAOoI,IAAI3B,MAElDgI,GAAO,GAGT9P,KAAKqC,MAAM8F,KAAK,IAAIrE,EAAU6E,EAAOtH,UAqB7C,gBAAgB+O,GACd,MAAMC,EAAM,IAAItM,EAKhB,OAJAsM,EAAIhO,MAAME,OAAS,EACnB6N,EAAU7I,QAAS1F,IACjBwO,EAAIhO,MAAM8F,KAAKrE,EAAUwM,SAASzO,MAE7BwO,EAET,mBAAmBE,GACjB,MAAMF,EAAM,IAAItM,EAKhB,OAJAsM,EAAIhO,MAAME,OAAS,EACnBgO,EAAKhJ,QAAS1F,IACZwO,EAAIhO,MAAM8F,KAAK,IAAIrE,EAAUjC,MAExBwO,EAET,SACE,OAAOrQ,KAAKqC,MAAMkB,IAAK1B,GAAMA,EAAE2O,UAMjC,aAIE,OAAOxQ,KAAKqC,MAAME,OAOpB,aAIE,OAAOvC,KAAKuC,OAAS,EAKvB,MAAMV,GACJ,OAAO7B,KAAKqC,MAAMR,GAMpB,EAAEA,GACA,OAAO7B,KAAK6I,MAAMhH,GAOpB,aAAauI,GACX,OAAOtJ,OAAOiI,OAAO,IAAIhF,EAAkB,CACzC1B,MAAOrC,KAAKqC,MAAMkB,IAAI,CAACwK,EAAS3N,EAAGiC,IAC1BjC,EAAIiC,EAAME,OAAS,EACtBwL,EACA,IAAIjK,EAAUiK,GAAStE,IAAIW,MAQrC,oBAAoBA,GAClB,OAAOtJ,OAAOiI,OAAO,IAAIhF,EAAkB,CACzC1B,MAAOrC,KAAKqC,MAAMkB,IAAI,CAACwK,EAAS3N,EAAGiC,IAC1BjC,EAAIiC,EAAME,OAAS,EACtBwL,EACA,IAAIjK,EAAUiK,GAAS1E,IAAIe,MAQrC,OACE,OAAOtJ,OAAOiI,OAAO,IAAIhF,EAAkB,CACzC1B,MAAOrC,KAAKqC,MAAMkB,IAAKI,GAAM,IAAIG,EAAUH,MAQ/C,0BAA0BkF,GACxB,OAAO/H,OAAOiI,OAAO,IAAIhF,EAAkB,CACzC1B,MAAO,IAAIoO,MAAM5H,EAAQ,GAAG6H,KAAK,EAAG,EAAG7H,EAAQ,GAAGtF,IAAI,CAACgL,EAAInO,IAClD,IAAI0D,EAAU9D,KAAKqC,MAAMjC,OAKtC,IAAIiQ,EAAqBxH,EAAQ,GAC/B,GAAIA,GAAS7I,KAAKuC,OAChB,OAAIvC,KAAKuC,SAAW8N,EAAI9N,OACf,EAEF,EAET,GAAIsG,GAASwH,EAAI9N,OACf,OAAQ,EAEV,OAAQvC,KAAK6I,MAAMA,GAAO/F,IAAIuN,EAAIxH,MAAMA,KACtC,KAAK,EACH,OAAO,EACT,KAAM,EACJ,OAAQ,EACV,KAAK,EACH,OAAO7I,KAAK8C,IAAIuN,EAAKxH,EAAQ,GAC/B,QACE,OAAO,GAcb,MACEP,EACAqI,EACAC,GAEA,MAAMC,EAAU7Q,KAAK8C,IAAIwF,GAAO,EAAIA,EAAMtI,KAAK8C,IAAI6N,GAAO,EAAIA,EAAM3Q,KACpE,YAAwBuG,IAApBqK,EACKC,EAAQC,0BAA0BF,GAElCC,EAAQzH,OAInB,WACE,IAAIsG,EAAM,IAKV,OAJA1P,KAAKqC,MAAMkF,QAAQ,CAACgH,EAAInO,EAAG+D,KACzBuL,GAAOnB,EAAGlB,YAAcjN,GAAK+D,EAAE5B,OAAS,EAAI,GAAK,OAEnDmN,GAAO,IACAA,GA0XT,EAAA3L,iBAvXF,SAAUA,GAER,IAAiBgN,GAAjB,SAAiBA,GACF,EAAAC,OAAS,CAAErJ,KAAM,QAASsJ,MAAOnN,EAAUiN,KAAKC,QAD/D,CAAiBD,EAAA,EAAAA,OAAA,EAAAA,KAAI,KAFvB,CAAUhN,MAAc,KAuXtB,EAAAA,iBArWF,SAAKC,GACH,mBACA,yBAFF,CAAKA,MAAQ,KAsWX,EAAAA,WA/VF,MAAMkN,EAAY,CAChB,CAAClN,EAAS4D,MAAO,OACjB,CAAC5D,EAASiJ,SAAU,WA8VpB,EAAArC,cAlVF,MAeE,YAAYuG,GAdZ,KAAAvM,eAAiB,EAKR,KAAA6B,aAA4B,GAOrC,KAAAK,OAA4B,GAG1B9G,KAAK4E,eAAiBuM,EAMxB,kBACE,OAAOnR,KAAK8G,OAAOsK,OAAO,CAACvP,EAAG4F,IACrB5F,EAAI4F,EAAMtB,YAChB,GAKL,eACE,OAAOnG,KAAK4E,eAAiB5E,KAAKmG,YAMpC,mBACE,OAAOnG,KAAK8G,OAAO,GAAK9G,KAAK8G,OAAO,GAAG7B,WAAQsB,EAKjD,iBACE,OAAOvG,KAAK8G,OAAOvE,OACfvC,KAAK8G,OAAO9G,KAAK8G,OAAOvE,OAAS,GAAGwE,SACpCR,EAMN,mBACE,OAAOvG,KAAKyG,aAAa,GAK3B,kBACE,OAAOzG,KAAKyG,aAAalE,OACrBvC,KAAKyG,aAAazG,KAAKyG,aAAalE,OAAS,QAC7CgE,EAMN,iBACE,OAAOvG,KAAK8G,OAAOuK,KAAMC,GAAMA,EAAE3E,YAMnC,aAAatI,GACX,OAAOrE,KAAK8G,OAAOsK,OAAO,CAACvP,EAAG4F,IACrB5F,EAAI4F,EAAMd,aAAatC,GAC7B,GAYL,UAAUE,EAAegN,GAGvB,IAAInH,EACFpK,KAAK4E,eACL5E,KAAK2G,aACH3G,KAAKyG,aAAaG,MAAM,EAAG5G,KAAKyG,aAAaC,QAAQnC,IAAOgN,EAAK,EAAI,KAGzE,IAAKA,EACH,OAAOnH,EAIT,IAAK,IAAIhK,EAAI,EAAGA,EAAIJ,KAAK8G,OAAOvE,OAAQnC,IAAK,CAE3C,GAAIJ,KAAK8G,OAAO1G,KAAOmR,EACrB,OAAOnH,EAETA,GAAUpK,KAAK8G,OAAO1G,GAAGuG,aAAa,CAACpC,IAEzC,MAAM,IAAI,EAAA7B,WACR,8EAWJ,cAAa,MACXuC,IAMA,IAAIiJ,EACJ,IAAK,IAAI9N,EAAI,EAAGA,EAAIJ,KAAK8G,OAAOvE,OAAQnC,IAItC,GAHIJ,KAAK8G,OAAO1G,GAAG6E,MAAMnC,IAAImC,IAAU,IACrCiJ,EAAOlO,KAAK8G,OAAO1G,IAEjBJ,KAAK8G,OAAO1G,GAAG6E,MAAMnC,IAAImC,GAAS,EACpC,MAAO,CAAEiJ,OAAME,MAAOpO,KAAK8G,OAAO1G,GAAIiQ,IAAKjQ,GAG/C,MAAO,CAAE8N,OAAME,WAAO7H,EAAW8J,IAAKrQ,KAAK8G,OAAOvE,QAWpD,wBAAwBkF,GACtB,GAAyB,IAArBA,EAAM+J,WACR,MAAM,IAAIC,UAAU,gDAEtB,GAAIhK,EAAMA,QAAUzH,KAClB,MAAM,IAAIyR,UAAU,6CAGtB,MAAMlN,EAAKkD,EAAMpD,SAAS,GACrBrE,KAAKyG,aAAayC,SAAS3E,IAC9BvE,KAAKyG,aAAa0B,KAAK5D,GAGzB,MAAM,MAAE6J,EAAK,IAAEiC,GAAQrQ,KAAK0R,aAAajK,GAEnC7C,EAAiB5E,KAAKsM,UAAU/H,EAAI6J,GAE1C,OADApO,KAAK8G,OAAOrE,OAAO4N,EAAK,EAAG5I,GACpB7C,EAGT,WACE,IAAI8K,EAAM,cAAc1P,KAAK4E,mBAa7B,OAZA8K,GAAO1P,KAAKyG,aAAalD,IAAKgB,GAAOA,EAAG8I,YAAYuC,KAAK,KACzDF,GAAO,MACPA,GAAO1P,KAAK8G,OAAOvD,IAAKoO,GAEpB,OACAA,EACGtE,WACAsC,MAAM,MACNC,KAAK,SAGZF,GAAO,MACAA,IASX,MAAM9F,EAcJ,YAAYgI,GAbZ,KAAArP,OAAS,EACT,KAAA0C,MAAwB,IAAIlB,EAU5B,KAAAoD,MAAuC,GAGjCyK,IACF9Q,OAAOiI,OAAO/I,KAAM,CAClBuC,OAAQqP,EAAIrP,OACZ0C,MAAO2M,EAAI3M,MAAMmE,OACjB3B,MAAOmK,EAAInK,QAEbmK,EAAIC,SAAS,EAAGlK,OAAMV,QAAQzD,KAC5BxD,KAAKuE,GAAGf,EAAG,CAAEmE,OAAMV,KAAM,IAAInD,EAAUmD,QAQ7C,kBAGE,OAAQjH,KAAKqE,SAAS+M,OAAO,CAACvP,EAAW0C,IAChCvE,KAAKuE,GAAGA,GAAIoD,OAAS3D,EAAS4D,KAAO/F,EAAI7B,KAAKuC,OAASV,EAC7D,GAQL,aAAawC,GACX,OAAQrE,KAAKqE,SACVC,OAAQd,GAAMa,EAAS6E,SAAS1F,IAChC4N,OAAO,CAACvP,EAAW0C,IACXvE,KAAKuE,GAAGA,GAAIoD,OAAS3D,EAAS4D,KAAO/F,EAAI7B,KAAKuC,OAASV,EAC7D,GAOP,UACE,OAAO7B,KAAKiF,MAAM4C,aAAa7H,KAAKuC,QAGtC,eACE,OAAO,EAAAQ,QAAQ/C,KAAKmH,OAEtB,iBACE,OAAOnH,KAAKqE,SAAS9B,OAKvB,iBACE,OAAOvC,KAAKwR,WAAa,EAQ3B,SAASM,GACP9R,KAAKqE,SAASkD,QAAS/D,IACrBsO,EAAG9R,KAAKuE,GAAGf,GAAIA,KAGnB,SACEsO,GAIA,MAAMC,EAAsC,GAI5C,OAHA/R,KAAKqE,SAASkD,QAAS/D,IACrBuO,EAAMvO,GAA2BsO,EAAG9R,KAAKuE,GAAGf,GAAIA,KAE3CuO,EAUT,GAAGpQ,EAAgB8M,GAIjB,OAHIA,IACFzO,KAAKmH,MAAOxF,GAA6B8M,GAEpCzO,KAAKmH,MAAOxF,GAErB,MAAMA,UACG3B,KAAKmH,MAAOxF,GAUrB,YAAY0O,GACV,MAAMtE,EAAW,IAAInC,EAAgB5J,MACrC+L,EAAS9G,MAAQjF,KAAKiF,MAAM4C,aAAawI,GACzCtE,EAASxJ,OAASvC,KAAKuC,OAAS8N,EAGhC,MAAMvJ,EAASiF,EAAStE,MAAMX,OAI9B,OAHAA,EAAOrE,OAAOqE,EAAOJ,QAAQ1G,MAAQ,EAAG,EAAG+L,GAE3C/L,KAAKuC,OAAS8N,EACPtE,EAGT,WACE,IAAI2D,EAAM,SAAS1P,KAAKiF,MAAMoI,gBAAgBrN,KAAKuC,WAMnD,OALAmN,GAAO1P,KAAKqE,SAASd,IAAKC,IACxB,MAAMe,EAAKvE,KAAKuE,GAAGf,GACnB,MAAO,OAAOwO,OAAOxO,OAAO0N,EAAU3M,EAAGoD,WAAWpD,EAAG0C,KAAKoG,eAE9DqC,GAAO,MACAA,GAST,EAAA9F,mB,8EC9nBF,aASA,MAAeqI,UAA4B,EAAApP,YAqHlC,EAAAoP,UA5ET,MAAMpC,UAAcoC,EAIlB,YAAYpQ,EAAoB,GAC9BqQ,QAHM,KAAAC,MAAQ,IAAIC,WAAW,CAAC,IAK5BpS,KAAKmS,MAAM,GADTtQ,aAAagO,EACChO,EAAEsQ,MAAM,GAERtQ,EAIpB,gBAAgBmB,GACd,OAAO,IAAI6M,EAAM7M,GAGnB,SACE,OAAOhD,KAAKmS,MAAM,GAGpB,IAAItQ,GAMF,OAJE7B,KAAKmS,MAAM,IADTtQ,aAAagO,EACEhO,EAAEsQ,MAAM,GAERtQ,EAEZ7B,KAET,IAAI6B,GAMF,OAJE7B,KAAKmS,MAAM,IADTtQ,aAAagO,EACEhO,EAAEsQ,MAAM,GAERtQ,EAEZ7B,KAGT,OAAO6B,GAML,OAJE7B,KAAKmS,MAAM,GADTtQ,aAAagO,EACChO,EAAEsQ,MAAM,GAERtQ,EAEX7B,KAGT,IAAI6B,GACF,OAAIA,aAAagO,GACN7P,KAAKmS,MAAM,IAAMtQ,EAAEsQ,MAAM,GAAK,EAAI,IACxCnS,KAAKmS,MAAM,IAAMtQ,EAAEsQ,MAAM,IAAM,EAAI,IAE7BnS,KAAKmS,MAAM,IAAMtQ,EAAI,EAAI,IAC/B7B,KAAKmS,MAAM,IAAMtQ,GAAK,EAAI,GAIjC,OACE,OAAO,IAAIgO,EAAM7P,MAGnB,aACE,OAAOA,KAAKmS,MAAM,GAGpB,WACE,OAAOnS,KAAKmS,MAAM,GAAG9E,YAUP,EAAAwC,QAPlB,SAAUA,GAER,IAAiBkB,GAAjB,SAAiBA,GACF,EAAAC,OAAS,CAAErJ,KAAM,UADhC,CAAiBoJ,EAAA,EAAAA,OAAA,EAAAA,KAAI,KAFvB,CAAUlB,MAAK,KAOG,EAAAA","file":"@kb1rd/logootish-js.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@kb1rd/logootish-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@kb1rd/logootish-js\"] = factory();\n\telse\n\t\troot[\"@kb1rd/logootish-js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @file Various utilities that don't belong anywhere else.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n\n/**\n * Like the built-in map function, but it replaces the element with an arbitrary\n * number of elements, making it a combination of map, push, and filter.\n * @template T - The type of the array elements.\n * @param array - The array to map. It will be modified.\n * @param fn - The element mapper function. It takes the current element as an\n * argument and returns the element(s) take its place.\n * @return The same array that was passed as an argument.\n */\nfunction arraymap<T>(array: T[], fn: (el: T) => T[]): T[] {\n  for (let i = 0; i < array.length; ) {\n    const newarray = fn(array[i])\n    array.splice(i, 1, ...newarray)\n    i += newarray.length ? newarray.length : 1\n  }\n  return array\n}\n\n/**\n * A class created with a variable `fatal` added and set to true. This is used\n * for ensuring that a client knows to shut down a document if an error has\n * indicated that the document is corrupt.\n */\nclass FatalError extends Error {\n  fatal = true\n}\n\n/**\n * One of zero, one, or negative one.\n */\ntype CompareResult = -1 | 0 | 1\n/**\n * A function type that takes `T` and returns a CompareResult.\n */\ntype CompareFunction<T> = (other: T) => CompareResult\n/**\n * A function type that takes two of a type `T` and returns a CompareResult.\n */\ntype DualCompareFunction<T> = (a: T, b: T) => CompareResult\n\n/**\n * A utility abstract class with no implementation for the function `cmp` and\n * implementations for `gt`, `gteq`, `eq`, `lteq`, and `lt` functions.\n * @template T The other type that can be compared.\n */\nabstract class Comparable<T> {\n  /**\n   * Compare this object to another one.\n   */\n  abstract cmp(other: T): CompareResult\n  /**\n   * @return True if this object is greater than the one provided.\n   */\n  gt(n: T): boolean {\n    return this.cmp(n) === 1\n  }\n  /**\n   * @return True if this object is greater than or equal to the one provided.\n   */\n  gteq(n: T): boolean {\n    return this.cmp(n) >= 0\n  }\n  /**\n   * @return True if this object is equal to the one provided.\n   */\n  eq(n: T): boolean {\n    return this.cmp(n) === 0\n  }\n  /**\n   * @return True if this object is less than or equal to the one provided.\n   */\n  lteq(n: T): boolean {\n    return this.cmp(n) <= 0\n  }\n  /**\n   * @return True if this object is less than the one provided.\n   */\n  lt(n: T): boolean {\n    return this.cmp(n) === -1\n  }\n}\n\n/**\n * Designed to emulate pointers to members of an object. This is useful inside\n * the B-trees. This should not be used like a C pointer: If the value in the\n * destination object changes, so does the value reported by this object.\n * @template T - The container object type.\n * @template K - The key inside the object.\n */\nclass MemberPtr<T, K extends keyof T> {\n  private obj: T\n  private key: K\n  /**\n   * @param obj - The object with the member to reference.\n   * @param key - The key of the reference inside the object.\n   */\n  constructor(obj: T, key: K) {\n    this.obj = obj\n    this.key = key\n  }\n  /**\n   * The value of the 'pointer.'\n   */\n  get value(): T[K] {\n    return this.obj[this.key]\n  }\n  set value(val: T[K]) {\n    this.obj[this.key] = val\n  }\n}\n\nfunction allKeys<T, K extends keyof T>(obj: T): K[] {\n  return (Object.keys(obj) as K[]).concat(\n    Object.getOwnPropertySymbols(obj) as K[]\n  )\n}\n\nfunction allValues<T, V extends T[keyof T]>(obj: T): V[] {\n  return allKeys(obj).map((k) => obj[k]) as V[]\n}\n\nconst BreakException = {}\nfunction catchBreak(fn: () => void): void {\n  try {\n    fn()\n  } catch (e) {\n    if (e !== BreakException) {\n      throw e\n    }\n  }\n}\n\nexport {\n  arraymap,\n  FatalError,\n  CompareResult,\n  CompareFunction,\n  DualCompareFunction,\n  Comparable,\n  MemberPtr,\n  allKeys,\n  allValues,\n  BreakException,\n  catchBreak\n}\n","/**\n * @file This file imports the ListDocumentModel and defines event handling\n * systems.\n * @TODO Move event abstraction layer here\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport {\n  ListDocumentModel,\n  LogootInt,\n  LogootPosition,\n  NodeType\n} from './listmodel'\n\nenum EventState {\n  /**\n   * Not being actively sent and can be modified.\n   */\n  PENDING,\n  /**\n   * In transit. Cannot be modified.\n   */\n  SENDING,\n  /**\n   * Already sent. Also cannot be modified.\n   */\n  COMPLETE\n}\n\n/**\n * Generic event interface.\n */\ninterface LogootishEvent {\n  state: EventState\n  readonly type: string\n  // eslint-disable-next-line\n  toJSON(): any\n}\n\nexport { EventState, ListDocumentModel, LogootInt, LogootPosition, NodeType }\n","/**\n * @file This file contains the bulky position manipulation logic for any list-\n * based CRDT (arrays, text, rich text, etc.)\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport {\n  FatalError,\n  CompareResult,\n  allValues,\n  BreakException,\n  catchBreak\n} from '../utils'\nimport { Bst } from '../bst'\n\nimport {\n  LogootInt,\n  LogootPosition,\n  NodeType,\n  ConflictGroup,\n  LogootNodeGroup,\n  BranchKey\n} from './logoot'\n\ntype KnownPositionBst = Bst<ConflictGroup, { known_position: number }>\ntype LogootBst = Bst<LogootNodeGroup, { start: LogootPosition }>\n\n/**\n * A Logoot removal.\n */\ntype Removal = {\n  branch: BranchKey\n  start: LogootPosition\n  length: number\n  rclk: LogootInt\n}\n\ntype RemovalOperation = {\n  type: 'r'\n  start: number\n  length: number\n}\ntype InsertionOperation = {\n  type: 'i'\n  start: number\n  offset: number\n  length: number\n}\ntype TranslationOperation = {\n  type: 't'\n  source: number\n  length: number\n  dest: number\n}\ntype MarkOperation = {\n  type: 'm'\n  start: number\n  length: number\n  conflicting: boolean\n}\n/**\n * An operation returned by `_mergeNode` to be run on the local document.\n */\ntype Operation =\n  | RemovalOperation\n  | InsertionOperation\n  | TranslationOperation\n  | MarkOperation\n\n/**\n * An error thrown when an insertion is attempted at the boundary between two\n * branches that are not the one in the active document.\n */\nclass InsertionConflictError extends Error {}\n\n/**\n * A function that determines if two `LogootNodeGroup`s should be in the same\n * `ConflictGroup`. The two arguments must be in order.\n * @param a - The first `LogootNodeGroup`\n * @param b - The second `LogootNodeGroup`\n * @returns True if the two groups can be joined.\n */\ntype JoinFunction = (a: LogootNodeGroup, b: LogootNodeGroup) => boolean\n/**\n * A `JoinFunction` that joins two nodes if they have the same branches that are\n * in conflict.\n */\nconst MinimalJoinFunction = (\n  a: LogootNodeGroup,\n  b: LogootNodeGroup\n): boolean => {\n  if (a.branches.filter((br) => !b.br(br)).length) {\n    return false\n  }\n  if (b.branches.filter((br) => !a.br(br)).length) {\n    return false\n  }\n  return true\n}\n\n/**\n * A representation of the Logootish Document Model for mapping \"real,\"\n * continuous `known_position`s to Logoot positions. This is useful when working\n * with strings, arrays, or, just in general, anything that needs a fixed order.\n * This does not actually store the data in question, but stores a mapping of\n * real indices in the data to the Logoot positions of that element. This is\n * used to transform edits between ones in the Logoot and local position spaces.\n * One important thing to note: Logoot edits (insertions/removals) can be\n * applied in any order. Local edits **must** be applied in a consistent order.\n * @TODO Conflict resolution does not exist. **This will create significant\n * changes to this API**\n */\nclass ListDocumentModel {\n  /**\n   * The BST maps out where all insertion nodes are in the local document's\n   * memory. It is used to go from position -> node\n   */\n  ldoc_bst: KnownPositionBst = new Bst(\n    (a: ConflictGroup, b: ConflictGroup): CompareResult => {\n      if (a.known_position > b.known_position) {\n        return 1\n      } else if (a.known_position < b.known_position) {\n        return -1\n      } else {\n        // I can factor in a calculated start like this because CGs will always\n        // be in order by calculated start as well, but it's much easier to\n        // look them up by known_position.\n        const astart = a.logoot_start\n        const bstart = b.logoot_start\n        if (astart && bstart) {\n          return astart.cmp(bstart)\n        }\n      }\n      return 0\n    }\n  )\n  /**\n   * This BST maps Logoot position identifiers to their text node to allow\n   * lookup of text position from Logoot ID\n   */\n  logoot_bst: LogootBst = new Bst((a, b) => a.start.cmp(b.start))\n  /** A map of removals that do not yet have text to remove */\n  // removal_bst: LogootBst = new Bst((a, b) => a.start.cmp(b.start))\n  /**\n   * This is a Lamport clock. A proper vector clock would have too many entries\n   * for large, multi-user documents.\n   * See the Logoot paper for why. Unlike the Logoot implementation, this is\n   * incremented with each removal only and is kept constant with insertions.\n   */\n  clock = new LogootInt()\n  branch: BranchKey\n\n  canJoin: JoinFunction\n\n  constructor(branch: BranchKey, jf: JoinFunction = MinimalJoinFunction) {\n    this.branch = branch\n    this.canJoin = jf\n  }\n\n  /**\n   * The goal of this method is to find the Logoot position corresponding to a\n   * particular local position. Unlike the old version, this does **not**\n   * actually record the insertion. The output of this must be passed in to\n   * `insertLogoot` for that to happen. This provides greater flexibility for\n   * the programmer. All insertions will be determined on the `branch` variable\n   * of this class. This means that if this funcion is called and the start\n   * position is in between two atoms, the first on `branch` and the second not,\n   * the resulting order will leave the new atom after the first atom, but *not\n   * necessarily* after the second atom since conflicts allow atoms to appear\n   * out of their Logoot order. However, if an insertion is attempted between\n   * two atoms on branches that are not `branch`, then it will not be possible\n   * to determine where the resulting node should go. A `InsertionConflictError`\n   * will be thrown. UI should respond to this by informing the user to resolve\n   * the conflict first.\n   * @param start - The position of the insertion\n   * @param length - The length of the insertion\n   * @returns An object containing `start` (a LogootPosition), `length`, `br`\n   * (just `this.branch`), and `rclk` (just `this.clock`). The `start` value is\n   * the only one that is actually calculated. The others are returned for\n   * convenience.\n   */\n  insertLocal(\n    start: number,\n    length: number\n  ): {\n    start: LogootPosition\n    length: number\n    br: BranchKey\n    rclk: LogootInt\n  } {\n    // Search:\n    // n < start   -> _lesser\n    // start <= n  -> _greater\n    const range_search = this.ldoc_bst.create_range_search()\n    range_search.lesser_find_greatest = true\n    range_search.greater_find_least = true\n    range_search.push_point({ known_position: start }, '_lesser', false)\n    range_search.all_greater('_greater')\n    const { _lesser, _greater } = this.ldoc_bst.search(range_search)\n\n    let lesser: ConflictGroup\n    let greater: ConflictGroup\n    if (_lesser && _lesser.length) {\n      // The earliest one will not be a only a removal if nodes are ordered\n      // properly. We can ignore the removals in between\n      lesser = _lesser.sort((a, b) => a.logoot_start.cmp(b.logoot_start))[0]\n    }\n    if (_greater && _greater.length) {\n      // Now grab the last element...\n      greater = _greater.sort((a, b) => b.logoot_start.cmp(a.logoot_start))[0]\n    }\n\n    let before_position\n    let after_position\n\n    const lesser_length = lesser ? lesser.ldoc_length : 0\n    if (lesser && lesser.known_position + lesser_length === start) {\n      if (\n        greater &&\n        lesser.last_branch === greater.first_branch &&\n        lesser.last_branch !== this.branch\n      ) {\n        throw new InsertionConflictError()\n      }\n      before_position = lesser.logoot_end\n      after_position = greater ? greater.logoot_start : undefined\n    } else if (lesser) {\n      ;((): void => {\n        let remaining_length = start - lesser.known_position\n        if (lesser.branch_order.indexOf(this.branch) < 0) {\n          remaining_length -= lesser.ldoc_length\n        } else {\n          remaining_length -= lesser.branchLength(\n            lesser.branch_order.slice(\n              0,\n              lesser.branch_order.indexOf(this.branch)\n            )\n          )\n        }\n        if (remaining_length < 0) {\n          throw new FatalError('Search returned out of order nodes')\n        }\n        if (remaining_length === 0) {\n          // We're at the left end here, so we have to look up *another* lesser\n          // Search:\n          // n < lesser.known_position   -> _lesser\n          // lesser.known_position <= n  -x\n          const range_search = this.ldoc_bst.create_range_search()\n          range_search.lesser_find_greatest = true\n          range_search.push_point(\n            { known_position: lesser.known_position },\n            '_lesser',\n            false\n          )\n          const { _lesser } = this.ldoc_bst.search(range_search)\n\n          let most_lesser\n          if (_lesser && _lesser.length) {\n            most_lesser = _lesser.sort((a, b) =>\n              a.logoot_start.cmp(b.logoot_start)\n            )[0]\n          }\n          // Now, go in between the two nodes just as we would've above\n          before_position = most_lesser.logoot_end\n          after_position = lesser.logoot_start\n          return\n        }\n\n        // So, we're not at the start. Find a good position\n        for (let i = 0; i < lesser.groups.length; i++) {\n          const { end } = lesser.groups[i]\n          remaining_length -= lesser.groups[i].branchLength([this.branch])\n\n          if (remaining_length < 0) {\n            before_position = after_position = end.inverseOffsetLowest(\n              -remaining_length\n            )\n            return\n          } else if (remaining_length === 0) {\n            before_position = end\n            after_position = lesser.groups[i + 1]\n              ? lesser.groups[i + 1].start\n              : greater\n              ? greater.logoot_start\n              : undefined\n            return\n          }\n        }\n        // We must be in between two branches that are not ours\n        throw new InsertionConflictError()\n      })()\n    } else if (greater) {\n      after_position = greater.logoot_start\n    }\n\n    return {\n      start: new LogootPosition(length, before_position, after_position),\n      length,\n      br: this.branch,\n      rclk: this.clock\n    }\n  }\n\n  /**\n   * Finds the sets of Logoot positions in a certain real text range. This is\n   * used to find the removal operations to perform, but it does **not**\n   * actually record the updates, just like `insertLocal`.\n   * @param start - The position to start removing, inclusive.\n   * @param length - The length of the removal\n   * @returns - An object containing an array of `removals`. Each removal has a\n   * `start` LogootPosition, a numeric `length`, a `branch` (which is a\n   * BranchKey), and a `rclk` vector clock value.\n   */\n  removeLocal(start: number, length: number): { removals: Removal[] } {\n    // Search:\n    // n < start   -> _lesser\n    // start <= n  -> _greater\n    const range_search = this.ldoc_bst.create_range_search()\n    range_search.lesser_find_greatest = true\n    range_search.greater_find_least = true\n    range_search.push_point({ known_position: start }, '_lesser', false)\n    range_search.push_point({ known_position: start + length }, '_range', false)\n    range_search.all_greater(undefined)\n    const { _lesser, _range } = this.ldoc_bst.search(range_search)\n\n    const nodes = _range || []\n    if (_lesser && _lesser.length) {\n      // The earliest one will not be a only a removal if nodes are ordered\n      // properly. We can ignore the removals in between\n      const l = _lesser.sort((a, b) => a.logoot_start.cmp(b.logoot_start))[0]\n      if (l.ldoc_end > start) {\n        nodes.unshift(l)\n      }\n    }\n\n    const removal_sets: { [key: string]: { [key: number]: Removal[] } } = {}\n    function onRemoval(\n      br: BranchKey,\n      start: LogootPosition,\n      len: number,\n      rclk: LogootInt\n    ): void {\n      if (len <= 0) {\n        return\n      }\n      if (!removal_sets[(br as unknown) as string]) {\n        removal_sets[(br as unknown) as string] = {}\n      }\n      const branch_removals = removal_sets[(br as unknown) as string]\n\n      if (!branch_removals[start.levels]) {\n        branch_removals[start.levels] = []\n      }\n      const depth_removals = branch_removals[start.levels]\n      const last_removal = depth_removals[depth_removals.length - 1]\n\n      if (\n        last_removal &&\n        last_removal.branch === br &&\n        last_removal.start.offsetLowest(last_removal.length).cmp(start) === 0 &&\n        last_removal.rclk.cmp(rclk) === 0\n      ) {\n        last_removal.length += len\n      } else {\n        depth_removals.push({ branch: br, start, length: len, rclk })\n      }\n    }\n\n    let remaining_length = start + length - nodes[0].known_position\n    // TODO: This is *really* inefficient for obvious reasons\n    catchBreak(() =>\n      nodes.forEach((cg) => {\n        cg.branch_order.forEach((br) => {\n          cg.groups.forEach((group) => {\n            if (!group.br(br)) {\n              return\n            }\n            let { start, length: rlen } = group\n            const { type, rclk } = group.br(br)\n\n            if (type === NodeType.DATA) {\n              if (remaining_length > length) {\n                start = start.offsetLowest(remaining_length - length)\n                rlen -= remaining_length - length\n              }\n              onRemoval(br, start, Math.min(rlen, remaining_length), rclk)\n              remaining_length -= group.length\n            }\n            if (remaining_length <= 0) {\n              throw BreakException\n            }\n          })\n        })\n      })\n    )\n\n    const removals: Removal[] = []\n    allValues(removal_sets).forEach((branch_set) => {\n      Object.entries(branch_set).forEach(([, depth_set]) => {\n        depth_set.forEach((o) => removals.push(o))\n      })\n    })\n\n    return { removals }\n  }\n\n  /**\n   * This is the most important method in the `ListDocumentModel`. This method\n   * adds atoms to the BSTs. By consequence, it replaces nodes and generates\n   * conflicts as necessary to add the node to the BST. **Users should never\n   * call this function directly.**\n   * @param br - The branch to insert on\n   * @param nstart - The start Logoot position of the insertion\n   * @param length - The length of the insertion\n   * @param nrclk - The clock value for the insertion\n   * @param type - The type of node to add. Anything other than data will result\n   * in data being removed if it conflicts on the same branch\n   * @param canJoin - A `JoinFunction` to determine if two node groups should\n   * be joined together in the same conflict group\n   */\n  _mergeNode(\n    br: BranchKey,\n    nstart: LogootPosition,\n    length: number,\n    nrclk: LogootInt,\n    type: NodeType,\n    canJoin: JoinFunction\n  ): Operation[] {\n    const level = nstart.levels\n    const nend = nstart.offsetLowest(length)\n\n    if (this.clock.cmp(nrclk) < 0) {\n      this.clock.assign(nrclk)\n    }\n\n    // Search:\n    // n < nstart          -> _lesser\n    // nstart <= n < nend  -> _skip_ranges\n    // nend <= n           -> _greater\n    const range_search = this.logoot_bst.create_range_search()\n    range_search.lesser_find_greatest = true\n    range_search.greater_find_least = true\n    range_search.push_point({ start: nstart }, '_lesser', false)\n    range_search.push_point({ start: nend }, '_skip_ranges', false)\n    range_search.all_greater('_greater')\n    const { _lesser, _skip_ranges, _greater } = this.logoot_bst.search(\n      range_search\n    )\n\n    let lesser\n    let greater\n    if (_lesser && _lesser.length > 1) {\n      throw new FatalError(\n        'Corrupt BST. There are multiple nodes at a position.'\n      )\n    } else if (_lesser && _lesser.length) {\n      lesser = _lesser[0]\n    }\n    if (_greater && _greater.length > 1) {\n      throw new FatalError(\n        'Corrupt BST. There are multiple nodes at a position.'\n      )\n    } else if (_greater && _greater.length) {\n      greater = _greater[0]\n    }\n    let skip_ranges = _skip_ranges\n      ? _skip_ranges.sort((a, b) => a.start.cmp(b.start))\n      : []\n\n    if (lesser && skip_ranges.includes(lesser)) {\n      skip_ranges.splice(skip_ranges.indexOf(lesser), 1)\n    }\n    if (greater && skip_ranges.includes(greater)) {\n      skip_ranges.splice(skip_ranges.indexOf(greater), 1)\n    }\n    if (lesser) {\n      skip_ranges.unshift(lesser)\n    }\n    // Split lesser if there's no way that it will conflict (which will be if\n    // it's on a higher level)\n    if (\n      lesser &&\n      lesser.start.levels < level &&\n      lesser.start.cmp(nstart) < 0 &&\n      lesser.end.cmp(nend) > 0\n    ) {\n      const split_pos = nstart\n        .copy()\n        .level(lesser.start.levels)\n        .sub(lesser.start.level(lesser.start.levels)).js_int\n      if (split_pos > 0 && split_pos < lesser.length) {\n        const lesser_end = lesser.splitAround(split_pos)\n        skip_ranges.push(lesser_end)\n        this.logoot_bst.add(lesser_end)\n      }\n    }\n    if (greater && !skip_ranges.includes(greater)) {\n      skip_ranges.push(greater)\n    }\n\n    // Keep track of all the conflict groups we're automatically modifying\n    let conflict_order: ConflictGroup[] = []\n    skip_ranges.forEach(({ group }) => {\n      if (\n        group &&\n        !conflict_order.includes(group) &&\n        group.branch_order.length\n      ) {\n        conflict_order.push(group)\n      }\n    })\n    conflict_order = conflict_order.sort(\n      (a, b) => a.known_position - b.known_position\n    )\n\n    // Nodes on higher levels do not matter in our collision search, only in the\n    // sorting done by the BSTs. Lower levels matter since we must skip them.\n    // HOWEVER, we do need a greater node so that the algorithm will detect the\n    // next CG and (maybe) join into it\n    // TODO: Maybe a better search algo could come up with a pre-filtered\n    // `skip_ranges` for me\n    skip_ranges = skip_ranges.filter(\n      ({ start }) => start.levels >= level || start.cmp(nend) >= 0\n    )\n\n    // Ensure that there's something at the end of the list so that it will\n    // always run regardless and if there are nodes, that there is always a node\n    // last in the array at the end position\n    if (\n      !skip_ranges.length ||\n      skip_ranges[skip_ranges.length - 1].start.cmp(nend) < 0\n    ) {\n      const vgroup = new LogootNodeGroup()\n      vgroup.start = nend\n      skip_ranges.push(vgroup)\n    }\n\n    const original_known_end = conflict_order.length\n      ? conflict_order[conflict_order.length - 1].ldoc_end\n      : 0\n\n    // Track all the operations that have been performed and the offset that\n    // should be placed on nodes after this one. This will modify the nodes\n    // in `conflict_order`\n    const operations: Operation[] = []\n    let known_position_shift = 0\n    const applyShift = (\n      cg: ConflictGroup,\n      start: number,\n      length: number,\n      ic: boolean\n    ): void => {\n      known_position_shift += length\n\n      // Record the Logoot start of this new CG\n      const lstart = cg.logoot_start\n      for (let i = conflict_order.length - 1; i > 0; i--) {\n        const n = conflict_order[i]\n        // Bail out if we've passed our position\n        if (ic) {\n          if (n.known_position < start || n.logoot_start.cmp(lstart) < 0) {\n            return\n          }\n        } else {\n          if (n.known_position <= start || n.logoot_start.cmp(lstart) <= 0) {\n            return\n          }\n        }\n        // Add to the known_position, ignoring the current node\n        if (n !== cg) {\n          conflict_order[i].known_position += length\n        }\n      }\n    }\n    const remove = (cg: ConflictGroup, start: number, length: number): void => {\n      if (length === 0) {\n        return\n      }\n      operations.push({\n        type: 'r',\n        start,\n        length\n      })\n      applyShift(cg, start, -length, true)\n    }\n    const insert = (\n      cg: ConflictGroup,\n      start: number,\n      offset: number,\n      length: number\n    ): void => {\n      if (length === 0) {\n        return\n      }\n      operations.push({\n        type: 'i',\n        start,\n        offset,\n        length\n      })\n      applyShift(cg, start, length, true)\n    }\n    const translate = (source: number, length: number, dest: number): void => {\n      if (length === 0) {\n        return\n      }\n      if (source === dest) {\n        return\n      }\n      operations.push({ type: 't', source, length, dest })\n    }\n    const mark = (\n      start: number,\n      length: number,\n      conflicting: boolean\n    ): void => {\n      if (length === 0) {\n        return\n      }\n      operations.push({ type: 'm', start, length, conflicting })\n    }\n\n    // Split a conflict group and translate the child nodes\n    const splitCg = (\n      cg: ConflictGroup,\n      ng: LogootNodeGroup,\n      postprocess: (ncg: ConflictGroup) => void = (): void => undefined\n    ): ConflictGroup => {\n      if (!cg.groups.includes(ng)) {\n        throw new FatalError('Node group not in conflict group.')\n      }\n      if (!conflict_order.includes(cg)) {\n        throw new FatalError('Conflict group not in conflict_order')\n      }\n\n      // New Conflict Group -- Ok, my naming is bad here lol\n      const ncg = new ConflictGroup(cg.ldoc_end)\n\n      let known_position = cg.known_position\n      const known_end = ncg.known_position\n      cg.branch_order.forEach((br) => {\n        // Calculate the area ahead of the known_position that isn't moved\n        const excerpt_length = ((): number => {\n          let origin = 0\n          for (let i = 0; i < cg.groups.length; i++) {\n            origin += cg.groups[i].branchLength([br])\n            if (cg.groups[i] === ng) {\n              return origin\n            }\n          }\n          // This should never happen\n          throw new FatalError()\n        })()\n\n        ncg.branch_order.push(br)\n\n        const moved_length = cg.branchLength([br]) - excerpt_length\n\n        ncg.known_position -= moved_length\n        known_position += excerpt_length\n        translate(known_position, moved_length, known_end - moved_length)\n      })\n\n      ncg.groups = cg.groups.splice(cg.groups.indexOf(ng) + 1, cg.groups.length)\n      ncg.groups.forEach((group) => (group.group = ncg))\n\n      postprocess(ncg)\n      this.ldoc_bst.add(ncg)\n      conflict_order.splice(conflict_order.indexOf(cg) + 1, 0, ncg)\n\n      return ncg\n    }\n    // Join a conflict group and translate the child nodes\n    const joinCg = (lcg: ConflictGroup, ncg: ConflictGroup): void => {\n      ncg.branch_order.forEach((br) => {\n        if (!lcg.branch_order.includes(br)) {\n          lcg.branch_order.push(br)\n        }\n      })\n\n      ncg.groups.forEach((group) => (group.group = lcg))\n      lcg.groups.splice(lcg.groups.length, 0, ...ncg.groups)\n\n      let fetch_position = ncg.known_position\n      let known_position = lcg.known_position\n      ncg.branch_order.forEach((br) => {\n        known_position += lcg.branchLength([br])\n        const next_length = ncg.branchLength([br])\n        translate(fetch_position, next_length, known_position - next_length)\n        fetch_position += next_length\n      })\n\n      ncg.branch_order.length = 0\n      ncg.groups = []\n      // Ensure that we remove **only** this node from the BST\n      this.ldoc_bst.remove(ncg, (other) => other === ncg)\n      conflict_order.splice(conflict_order.indexOf(ncg), 1)\n    }\n\n    let last_start = nstart.level(level)\n    let last_group = lesser\n    skip_ranges.forEach((group, i) => {\n      // Can be reassigned when nodes are split\n      let next_group = skip_ranges[i + 1]\n\n      const group_level_start = group.start.clamp(nstart, nend, level).l(level)\n      const group_level_end = group.end.clamp(nstart, nend, level).l(level)\n\n      const empty_length = group_level_start.copy().sub(last_start).js_int\n      const empty_offset = last_start.copy().sub(nstart.l(level)).js_int\n\n      // First, add a new group to the empty space (if there is any)\n      if (\n        empty_length > 0 ||\n        // If the next node has fewer levels, the empty space is *technically*\n        // infinite, but empty_length won't show this\n        (group.start.levels < level &&\n          length - empty_offset > 0 &&\n          group.start.cmp(nstart) > 0 &&\n          last_start.cmp(nstart.l(level)) < 0)\n      ) {\n        const newgroup = new LogootNodeGroup()\n        newgroup.start = nstart.copy()\n        newgroup.start.l(level).assign(last_start)\n        newgroup.length = empty_length || length - empty_offset\n        newgroup.br(br, { type, rclk: nrclk })\n\n        // Now, we actually insert the node where it should be according to the\n        // node canJoin function\n        // First, check if we can join with the two nodes flanking this one\n        // Remember, we're operating BEFORE `group`\n        const last_join = last_group && canJoin(last_group, newgroup)\n        const next_join = group && canJoin(newgroup, group)\n        const already_joined =\n          last_group && group && last_group.group === group.group\n\n        if (!already_joined && last_join && next_join) {\n          // Join last and next\n          joinCg(last_group.group, group.group)\n        } else if (already_joined && !(last_join && next_join)) {\n          // Split last and next\n          splitCg(last_group.group, last_group)\n        }\n\n        if (!last_join && !next_join) {\n          // Ok, so now we need to create a new conflict group\n          newgroup.group = new ConflictGroup(\n            last_group ? last_group.group.ldoc_end : 0\n          )\n          newgroup.group.branch_order.push(br)\n\n          conflict_order.splice(\n            last_group ? conflict_order.indexOf(last_group.group) + 1 : 0,\n            0,\n            newgroup.group\n          )\n        } else {\n          // Now, make sure we have a target group\n          newgroup.group = last_join ? last_group.group : group.group\n        }\n\n        if (type === NodeType.DATA) {\n          insert(\n            newgroup.group,\n            newgroup.group.insertSingleBranchGroup(newgroup),\n            empty_offset,\n            newgroup.length\n          )\n        } else {\n          newgroup.group.insertSingleBranchGroup(newgroup)\n        }\n\n        last_group = newgroup\n        this.logoot_bst.add(newgroup)\n        if (!last_join && !next_join) {\n          this.ldoc_bst.add(newgroup.group)\n        }\n      }\n\n      const group_length = group_level_end.copy().sub(group_level_start).js_int\n      const group_offset = group_level_start.copy().sub(nstart.l(level)).js_int\n      // Now, add the new node to the existing group\n      if (\n        group.start.levels === level &&\n        group_length > 0 &&\n        (!group.br(br) ||\n          // Data nodes have the lowest priority\n          nrclk.cmp(group.br(br).rclk) > (type === NodeType.DATA ? 0 : -1))\n      ) {\n        // Split off the trailing start\n        if (group.start.cmp(nstart) < 0) {\n          last_group = group\n          group = group.splitAround(\n            nstart.l(level).sub(group.start.l(level)).js_int\n          )\n          this.logoot_bst.add(group)\n        }\n        // Split off the trailing end\n        if (group.end.cmp(nend) > 0) {\n          const newgroup = group.splitAround(\n            group.length - group.end.l(level).sub(nend.l(level)).js_int\n          )\n          this.logoot_bst.add(newgroup)\n          next_group = newgroup\n        }\n\n        // Ensure that this group is in the branch order\n        if (!group.group.branch_order.includes(br)) {\n          group.group.branch_order.push(br)\n        }\n\n        // Now, capture this node's target position\n        const known_position = group.group.insertPos(br, group)\n        // Remove old conflicts\n        if (group.br(br) && group.br(br).type === NodeType.DATA) {\n          remove(group.group, known_position, group.length)\n        }\n        // Ensure the new data is correct\n        group.br(br, { type, rclk: nrclk })\n        // Add new data\n        if (type === NodeType.DATA) {\n          insert(group.group, known_position, group_offset, group.length)\n        }\n\n        const fixJoined = (\n          a: LogootNodeGroup,\n          b: LogootNodeGroup,\n          post = false\n        ): void => {\n          if (!a || !b) {\n            return\n          }\n          const joined = a.group === b.group\n          const should_join = canJoin(a, b)\n          if (!joined && should_join) {\n            joinCg(a.group, b.group)\n          } else if (joined && !should_join) {\n            // The BST allows chaning of the `known_position` after adding a\n            // node, **so long as the nodes are in the same order.** Since not\n            // all node positions have been updated, we cannot add the node with\n            // the pre-incremented position\n            const ncg = splitCg(a.group, a, (ncg) => {\n              if (type === NodeType.DATA && post) {\n                ncg.known_position -= group.length\n              }\n            })\n            if (type === NodeType.DATA && post) {\n              ncg.known_position += group.length\n            }\n          }\n        }\n\n        // Double check that these nodes still should be joined\n        fixJoined(last_group, group, false)\n        fixJoined(group, next_group, true)\n      }\n\n      last_start = group.end.clamp(nstart, nend, level).level(level)\n      last_group = group\n    })\n\n    conflict_order.forEach(({ known_position, ldoc_length, conflicted }) => {\n      mark(known_position, ldoc_length, conflicted)\n    })\n\n    // Now, update all nodes after the ones in conflict_order\n    this.ldoc_bst.operateOnAllGteq(\n      { known_position: original_known_end },\n      ({ data }) => {\n        if (!data.groups.length) {\n          throw new FatalError('An empty conflict group was found in the BST')\n        }\n        if (data.logoot_start.cmp(nend) < 0) {\n          return\n        }\n        if (!conflict_order.includes(data)) {\n          data.known_position += known_position_shift\n        }\n      },\n      false\n    )\n\n    return operations\n  }\n\n  insertLogoot(\n    br: BranchKey,\n    start: LogootPosition,\n    length: number,\n    rclk: LogootInt\n  ): Operation[] {\n    return this._mergeNode(br, start, length, rclk, NodeType.DATA, this.canJoin)\n  }\n\n  removeLogoot(\n    br: BranchKey,\n    start: LogootPosition,\n    length: number,\n    rclk: LogootInt\n  ): Operation[] {\n    return this._mergeNode(\n      br,\n      start,\n      length,\n      rclk,\n      NodeType.REMOVAL,\n      this.canJoin\n    )\n  }\n\n  /**\n   * An extremely expensive operation that scans the BSTs for obvious signs of\n   * corruption (empty CGs, non-continuous ldoc, out-of-order ldoc, etc.)\n   * @throws {FatalError} If any corruption detected\n   */\n  selfTest(): void {\n    let last_pos: LogootPosition\n    let last_kp = 0\n    this.ldoc_bst.operateOnAll(({ data }) => {\n      if (!data.groups.length) {\n        throw new FatalError('Node with no groups detected.')\n      }\n      if (data.known_position !== last_kp) {\n        throw new Error(\n          `Ldoc is out of order. Found known position ${data.known_position} after ${last_kp}`\n        )\n      }\n      last_kp = data.ldoc_end\n      data.groups.forEach(({ start }) => {\n        if (last_pos && last_pos.cmp(start) >= 0) {\n          throw new FatalError(\n            `Ldoc is out of order. Found ${start.toString()} after ${last_pos.toString()}.`\n          )\n        }\n        last_pos = start\n      })\n    })\n  }\n}\n\nexport {\n  LogootInt,\n  LogootPosition,\n  KnownPositionBst,\n  LogootBst,\n  Removal,\n  ListDocumentModel,\n  NodeType\n}\n","/**\n * @file A binary search tree implementation for finding ranges within the tree\n * and finding neighboring nodes. The documentation for this is, erm, not super\n * amazing.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { DualCompareFunction, MemberPtr } from './utils'\n\n/**\n * The node type used by the binary search tree\n */\nclass BstNode<T> {\n  /**\n   * The data contained in the node.\n   */\n  data: T\n  left: BstNode<T> | undefined\n  right: BstNode<T> | undefined\n  constructor(data: T) {\n    this.data = data\n  }\n}\n\n/**\n * The pointer type either to a leaf of the BST or the root. By using\n * `MemberPtr`, methods in the BST can re-assign the node value simply through\n * this 'pointer' object.\n */\ntype BstNodePtr<T> =\n  | MemberPtr<BstNode<T>, 'left'>\n  | MemberPtr<BstNode<T>, 'right'>\n  // eslint-disable-next-line\n  | MemberPtr<Bst<T, any>, 'bst_root'>\n/**\n * The type of a function that operates on nodes of the BST.\n */\ntype NodeOp<T> = (node: BstNode<T>) => void\n\n/**\n * A single point in a `RangeSearch`. The first element is the point value, the\n * second element is a boolean that is true if the point is inclusive, and the\n * third element the bucket string, or `undefined` to drop elements.\n */\ntype Point<T> = [T, boolean, string?]\n\n/**\n * A representation of an inequality that can be used to search and sort the\n * elements of an array into `bucket`s. It is a collection of `Point`s. Each\n * `Point` will include any values less that its own and, if the point is\n * inclusive, equal to its own.\n */\nclass RangeSearch<T> {\n  /**\n   * True if only **one** value is kept for elements before the first point.\n   * Used to find the inorder predecessor.\n   */\n  lesser_find_greatest = false\n  /**\n   * True if only **one** value is kept for elements after the last point. Used\n   * to find the inorder successor.\n   */\n  greater_find_least = false\n  private points: Point<T>[] = []\n  private last_bucket?: string\n  private cf: DualCompareFunction<T>\n\n  constructor(cf: DualCompareFunction<T>) {\n    this.cf = cf\n  }\n\n  static lteq<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, true, bucket])\n    search.last_bucket = undefined\n    return search\n  }\n  static lt<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, false, bucket])\n    search.last_bucket = undefined\n    return search\n  }\n  static gteq<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, false, undefined])\n    search.last_bucket = bucket\n    return search\n  }\n  static gt<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, true, undefined])\n    search.last_bucket = bucket\n    return search\n  }\n\n  /**\n   * Add a point to the collection.\n   * @param data - The value for comparison.\n   * @param bucket - The `bucket` to sort values into, or undefined to discard.\n   * @param inclusive - Determines if the point includes `data`.\n   */\n  push_point(data: T, bucket: string, inclusive = false): void {\n    const point: Point<T> = [data, inclusive, bucket]\n    for (let i = 0; i < this.points.length; i++) {\n      if (this.cf(data, this.points[i][0]) < 0) {\n        this.points.splice(i, 0, point)\n        return\n      }\n    }\n    this.points.push(point)\n  }\n  /**\n   * Set the default bucket for any values greater than the last point.\n   */\n  all_greater(bucket?: string): void {\n    this.last_bucket = bucket\n  }\n\n  /**\n   * A function used by Binary Search Trees to determine traversal.\n   * @param data - The value to compare.\n   * @param current - The current values that are stored.\n   * @param clear_buckets - If true, elements from `current` will be eliminated\n   * if they are affected by `lesser_find_greatest` or `greater_find_least` and\n   * an alternative closer to `data` is found.\n   * @param traverse_left - Will be called when there is the possibility that\n   * there are elements smaller than this one that will satisfy\n   * `greater_find_least`, thereby reducing the number of necessary traversals.\n   * @returns An object containing `left` and `right`, which are booleans that\n   * tell whether more data could be found to the left and right of `data`,\n   * respectively, as well as an optional `bucket` string to tell where `data`\n   * should be sorted.\n   */\n  getBucketInfo(\n    data: T,\n    current?: { [key: string]: T[] },\n    clear_buckets = false,\n    traverse_left?: () => void\n  ): {\n    left: boolean\n    right: boolean\n    bucket?: string\n  } {\n    let left = false\n    let passed_bucket = false\n    let bucket = this.last_bucket\n    let right = Boolean(this.last_bucket)\n\n    // Account for empty searches\n    if (!this.points.length && this.last_bucket) {\n      if (!left && traverse_left) {\n        traverse_left()\n      }\n      left = true\n    }\n\n    // Calculate the membership of each range before the point\n    for (let i = 0; i < this.points.length; i++) {\n      const [other, inclusive, b] = this.points[i]\n\n      if (b && !passed_bucket) {\n        if (!left && traverse_left) {\n          traverse_left()\n        }\n        left = true\n      }\n\n      // Should we add to this current bucket?\n      if (this.cf(data, other) < (inclusive ? 1 : 0)) {\n        if (!passed_bucket) {\n          passed_bucket = true\n          bucket = b\n        }\n        if (\n          i == 0 &&\n          this.lesser_find_greatest &&\n          clear_buckets &&\n          current[b] &&\n          current[b].length\n        ) {\n          if (this.cf(current[b][0], data) < 0) {\n            current[b] = []\n          } else if (this.cf(current[b][0], data) > 0) {\n            bucket = undefined\n          }\n        }\n      }\n\n      if (b && passed_bucket && this.cf(other, data) !== 0) {\n        right = true\n      }\n    }\n\n    // Ensure we account for the area after the last point\n    if (!passed_bucket && this.last_bucket) {\n      const b = this.last_bucket\n      // Traverse the left side assuming we haven't already\n      if (bucket && !left) {\n        left = true\n        traverse_left()\n      }\n      if (\n        this.greater_find_least &&\n        clear_buckets &&\n        current[b] &&\n        current[b].length\n      ) {\n        if (this.cf(current[b][0], data) > 0) {\n          current[b] = []\n        } else if (this.cf(current[b][0], data) < 0) {\n          bucket = undefined\n        }\n      }\n      right = true\n    }\n\n    // Don't traverse if unnecessary\n    left =\n      left &&\n      (!this.lesser_find_greatest ||\n        !this.points.length ||\n        !current[this.points[0][2]] ||\n        !current[this.points[0][2]].length ||\n        this.cf(current[this.points[0][2]][0], data) <= 0)\n    right =\n      right &&\n      (!this.greater_find_least ||\n        !current[this.last_bucket] ||\n        !current[this.last_bucket].length ||\n        this.cf(current[this.last_bucket][0], data) >= 0)\n\n    return { left, bucket, right }\n  }\n\n  /*\n   * Place `data` into a bucket defined by `range_buckets` based on the points\n   * that have been added to this search\n   * @param data - The value to sort.\n   * @param range_buckets - Sort `data` into one of the buckets defined as\n   * properties on this object. An array will be assigned at the bucket name if\n   * the target bucket is not already defined.\n   * @returns `range_buckets`\n   */\n  sort(\n    data: T,\n    range_buckets: { [key: string]: T[] } = {}\n  ): { [key: string]: T[] } {\n    let i\n    for (i = 0; i < this.points.length; i++) {\n      const [other, inclusive, b] = this.points[i]\n\n      if (this.cf(data, other) < (inclusive ? 1 : 0)) {\n        if (!b) {\n          return range_buckets\n        }\n        if (\n          !range_buckets[b] ||\n          (i === 0 &&\n            this.lesser_find_greatest &&\n            range_buckets[b].length &&\n            this.cf(range_buckets[b][0], data) < 0)\n        ) {\n          range_buckets[b] = []\n        }\n        range_buckets[b].push(data)\n        return range_buckets\n      }\n    }\n    i = this.points.length\n\n    const b = this.last_bucket\n    if (!b) {\n      return range_buckets\n    }\n    if (\n      !range_buckets[b] ||\n      (this.greater_find_least &&\n        range_buckets[b].length &&\n        this.cf(range_buckets[b][0], data) > 0)\n    ) {\n      range_buckets[b] = []\n    }\n    range_buckets[b].push(data)\n    return range_buckets\n  }\n\n  /*\n   * Sort the elements of `array` into buckets and return the result.\n   * @param array - The array to sort.\n   * @returns The populated buckets.\n   */\n  search_array(array: T[]): { [key: string]: T[] } {\n    const range_buckets: { [key: string]: T[] } = {}\n    array.forEach((el) => this.sort(el, range_buckets))\n    return range_buckets\n  }\n}\n\n/**\n * A binary search tree implementation for finding ranges within the tree and\n * finding neighboring nodes.\n * @template T - The type stored in the tree.\n * @template S - The type used by search functions, but that cannot be added to\n * the tree. It defaults to `T`.\n */\nclass Bst<T extends S, S = T> {\n  bst_root: BstNode<T> | undefined = undefined\n  readonly cmp: DualCompareFunction<S>\n\n  /**\n   * @param cmp - The compare function to use to sort the tree.\n   */\n  constructor(cmp: DualCompareFunction<S>) {\n    this.cmp = cmp\n  }\n\n  gteqcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) >= 0\n  }\n  gtcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) > 0\n  }\n  eqcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) === 0\n  }\n\n  /**\n   * Add an element to the tree.\n   * @param object - The object to add to the tree.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  add(object: T, node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')): void {\n    if (!node.value) {\n      node.value = new BstNode(object)\n    } else if (this.gteqcmp(node.value.data, object)) {\n      this.add(object, new MemberPtr(node.value, 'left'))\n    } else {\n      this.add(object, new MemberPtr(node.value, 'right'))\n    }\n  }\n\n  /*\n   * Creates a range search from the local compare function.\n   * @returns A new range search.\n   */\n  create_range_search(): RangeSearch<S> {\n    return new RangeSearch<S>(this.cmp)\n  }\n\n  /*\n   * Efficiently search the BST and sort the applicable nodes into buckets.\n   * @param search - The `RangeSearch` to do\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   * @param map - The object to assign buckets to. It is returned.\n   * @returns An object with type `T` sorted into buckets.\n   */\n  search(\n    search: RangeSearch<S>,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root'),\n    map: { [key: string]: T[] } = {}\n  ): { [key: string]: T[] } {\n    if (!node.value) {\n      return map\n    }\n    const { bucket, right } = search.getBucketInfo(\n      node.value.data,\n      map,\n      true,\n      () => {\n        // Interrupting the sorting into buckets to search the left side of the\n        // tree allows us to look for elements that *might* be smaller, so we\n        // can avoid needlessly searching the right side of the tree\n        this.search(search, new MemberPtr(node.value, 'left'), map)\n      }\n    )\n    if (bucket) {\n      if (!map[bucket]) {\n        map[bucket] = []\n      }\n      map[bucket].push(node.value.data)\n    }\n    if (right) {\n      this.search(search, new MemberPtr(node.value, 'right'), map)\n    }\n    return map\n  }\n\n  /**\n   * A method designed mostly for internal use that finds the next element in\n   * the tree if all of the elements were placed in order.\n   * @param object - The object or search type to find the successor of\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  _getInorderSuccessor(\n    object: S,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): { ptr: BstNodePtr<T>; data: T } | undefined {\n    type SuccessorType = { ptr: BstNodePtr<T>; data: T } | undefined\n    let successor: SuccessorType\n    const setSuccessor = (s: SuccessorType): void => {\n      if (!successor || (s && this.gtcmp(successor.data, s.data))) {\n        successor = s\n      }\n    }\n    if (node.value) {\n      if (this.gteqcmp(node.value.data, object)) {\n        if (!this.eqcmp(node.value.data, object)) {\n          setSuccessor({ ptr: node, data: node.value.data })\n        }\n        setSuccessor(\n          this._getInorderSuccessor(object, new MemberPtr(node.value, 'left'))\n        )\n      }\n      setSuccessor(\n        this._getInorderSuccessor(object, new MemberPtr(node.value, 'right'))\n      )\n    }\n    return successor\n  }\n  /**\n   * Remove an element from the tree.\n   * @param object - The object to remove or a search type that is evaluated\n   * to the same value as an object in the tree. Equivalence is determined\n   * exclusively using the compare function.\n   * @param filter - An optional function that has the final say in whether a\n   * node is removed. While an `object` is provided for quick tree traversal, it\n   * is not always desirable to remove *every* node with that particular value.\n   * This function allows the user to override that behavior.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  remove(\n    object: S,\n    filter: (data: T) => boolean = (): boolean => true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      const result = this.cmp(node.value.data, object)\n      const should_remove = filter(node.value.data)\n      if (result > 0) {\n        this.remove(object, filter, new MemberPtr(node.value, 'left'))\n      } else if (result < 0) {\n        this.remove(object, filter, new MemberPtr(node.value, 'right'))\n      } else if (node.value.left && node.value.right && should_remove) {\n        const successor = this._getInorderSuccessor(node.value.data, node)\n\n        this.remove(successor.data, undefined, successor.ptr)\n        node.value.data = successor.data\n      } else if (should_remove) {\n        node.value = node.value.left || node.value.right\n      }\n    }\n  }\n\n  /**\n   * Perform an operation on all of the elements in a range.\n   * @param start - The search type or object at which to start a search.\n   * @param endm1 - The search type or object at which to end a search\n   * inclusively. The name is `endm1` to stand for `END Minus 1` since the\n   * search is performed inclusively.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   * @param undef - TODO: Fix\n   */\n  operateOnAllRange(\n    start: S,\n    endm1: S,\n    operation: NodeOp<T>,\n    node = this.bst_root,\n    undef = false\n  ): void {\n    if (node && !undef) {\n      if (this.gteqcmp(node.data, start)) {\n        if (this.gteqcmp(endm1, node.data)) {\n          this.operateOnAllRange(start, endm1, operation, node.left, !node.left)\n          this.operateOnAllRange(\n            start,\n            endm1,\n            operation,\n            node.right,\n            !node.right\n          )\n          operation(node)\n        } else {\n          this.operateOnAllRange(start, endm1, operation, node.left, !node.left)\n        }\n      } else {\n        this.operateOnAllRange(start, endm1, operation, node.right, !node.right)\n      }\n    }\n  }\n  /**\n   * Perform an operation on all of the elements greater than or equal to a\n   * search type or object.\n   * @param value - The search type or object at which to start a search.\n   * @param sequential - If true, `operation` will be called sequentially. If\n   * false, `operation` will be called for the root node first, then children.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAllGteq(\n    value: S,\n    operation: NodeOp<T>,\n    sequential = true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (this.gteqcmp(node.value.data, value)) {\n        if (!sequential) {\n          operation(node.value)\n        }\n        this.operateOnAllGteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'left')\n        )\n        if (sequential) {\n          operation(node.value)\n        }\n      }\n      this.operateOnAllGteq(\n        value,\n        operation,\n        sequential,\n        new MemberPtr(node.value, 'right')\n      )\n    }\n  }\n  /**\n   * Perform an operation on all of the elements less than or equal to a\n   * search type or object.\n   * @param value - The search type or object at which to end a search.\n   * @param sequential - If true, `operation` will be called sequentially. If\n   * false, `operation` will be called for the root node first, then children.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAllLteq(\n    value: S,\n    operation: NodeOp<T>,\n    sequential = true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (this.gteqcmp(value, node.value.data)) {\n        if (!sequential) {\n          operation(node.value)\n        }\n        this.operateOnAllLteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'left')\n        )\n        if (sequential) {\n          operation(node.value)\n        }\n        this.operateOnAllLteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'right')\n        )\n      } else {\n        this.operateOnAllLteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'left')\n        )\n      }\n    }\n  }\n\n  /**\n   * Perform an operation on all nodes.\n   * @param operation - The function to run on each node.\n   * @param sequential - If true, `operation` will be called sequentially. If\n   * false, `operation` will be called for the root node first, then children.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAll(\n    operation: NodeOp<T>,\n    sequential = true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (!sequential) {\n        operation(node.value)\n      }\n      this.operateOnAll(\n        operation,\n        sequential,\n        new MemberPtr(node.value, 'left')\n      )\n      if (sequential) {\n        operation(node.value)\n      }\n      this.operateOnAll(\n        operation,\n        sequential,\n        new MemberPtr(node.value, 'right')\n      )\n    }\n  }\n\n  /**\n   * Get all the objects in a range.\n   * @param start - The search type or object at which to start a search.\n   * @param endm1 - The search type or object at which to end a search\n   * inclusively. The name is `endm1` to stand for `END Minus 1` since the\n   * search is performed inclusively.\n   */\n  getRange(start: S, endm1: S): (BstNode<T> | undefined)[] {\n    const nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllRange(start, endm1, (n) => nodes.push(n))\n\n    return nodes\n  }\n  /**\n   * Get all the objects greater than or equal to an object or search type.\n   * @param value - The search type or object at which to start a search.\n   */\n  getGteq(value: S): (BstNode<T> | undefined)[] {\n    let nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllGteq(value, (n) => {\n      if (!nodes[0] || this.gtcmp(nodes[0].data, n.data)) {\n        nodes = [n]\n      } else if (this.eqcmp(nodes[0].data, n.data)) {\n        nodes.push(n)\n      }\n    })\n\n    return nodes\n  }\n  /**\n   * Get all the objects less than or equal to an object or search type.\n   * @param value - The search type or object at which to end a search.\n   */\n  getLteq(value: S): (BstNode<T> | undefined)[] {\n    let nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllLteq(value, (n) => {\n      if (!nodes[0] || this.gtcmp(n.data, nodes[0].data)) {\n        nodes = [n]\n      } else if (this.eqcmp(nodes[0].data, n.data)) {\n        nodes.push(n)\n      }\n    })\n\n    return nodes\n  }\n\n  toString(): string {\n    let str = 'BST [\\n'\n    this.operateOnAll(({ data }) => {\n      str +=\n        '  ' +\n        data\n          .toString()\n          .split('\\n')\n          .join('\\n  ') +\n        '\\n'\n    })\n    str += ']'\n    return str\n  }\n}\n\nexport { Bst, RangeSearch, BstNode }\n","/**\n * @file This contains most of the data types used by the `ListDocumentModel`.\n * While `index.ts` does most of the heavy lifting, this file is the source of\n * most definitions used there. The files were split to make it easier for me to\n * switch since I can switch using tabs in my text editor.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { Int32 } from '../ints'\nimport { CompareResult, FatalError, allKeys } from '../utils'\n\n// What a C++ typedef would do\n// This makes it possible to completely swap out the type of the int used in the\n// algorithm w/o actually replacing each instance (which would be a real pain)\nimport LogootInt = Int32\n\n/**\n * A position in Logoot. This is just an array of numbers with some utility\n * functions. In Logoot, it must always be possible to allocate a position\n * between any possible two positions. In this algorithm, a position with more\n * `levels` (or elements in the array) comes first. So, if it is necessary to\n * create a position between `A` and `B`, then another level can be added to the\n * position to make it come after `A` and before `B`. Positions are represented\n * in writing the same as arrays: `[1,2,3]`\n * @example ```typescript\n * const a = new LogootPosition()\n * console.log(a.toString()) // [0]\n *\n * const b = a.offsetLowest(1)\n * console.log(b.toString()) // [1]\n *\n * console.log(new LogootPosition(1, a, b).toString()) // [0]\n * console.log(new LogootPosition(2, a, b).toString()) // [0,0]\n * ```\n */\nclass LogootPosition {\n  protected array: LogootInt[] = [new LogootInt(0)]\n\n  /**\n   * This constructor constructs a new position that is in the range specified\n   * by `start` and `end`. By using `len`, it is possible to enforce that a\n   * certain number of additional positions are available in the selected range.\n   * This guarantees that there's space for a LogootNode of length `len` at this\n   * position between `start` and `end`.\n   *\n   * @param len - The length of the allocation to make. The length is never\n   * actually stored in the Logoot position, but is used when finding space for\n   * the position to be created and `len` position(s) after it.\n   * @param start - This will cause the new position to have a value greater\n   * than or equal to this. This value is tricky: It must be the end of the last\n   * node. So if `A` is at `[1]` and an allocation *after* it is desired, then\n   * `[2]` would need to be passed to `start`.\n   * @param end - This will cause the new position to have a value less than or\n   * equal to this, subject to the value of `len`.\n   */\n  constructor(\n    len = 0,\n    readonly start?: LogootPosition,\n    readonly end?: LogootPosition\n  ) {\n    if (!start && end) {\n      this.array = end.inverseOffsetLowest(len).array\n    } else if (!end && start) {\n      this.array = start.copy().array\n    } else if (start && end) {\n      let done = false\n      const itstart = start.array.values()\n      const itend = end.array.values()\n      let nstart\n      let nend\n\n      this.array.length = 0\n\n      while (!done) {\n        if (!nstart || !nstart.done) {\n          nstart = itstart.next()\n        }\n        if (!nend || !nend.done) {\n          nend = itend.next()\n        }\n\n        if (!nstart.done && !nend.done) {\n          // See if we have enough space to insert 'len' between the nodes\n          if (nend.value.gteq(new LogootInt(nstart.value).add(len))) {\n            // There's space. We're done now: At the shallowest possible level\n            done = true\n          }\n          // Regardless, the start ID is the new ID for this level of our node\n          this.array.push(new LogootInt(nstart.value))\n        } else if (!nstart.done) {\n          // So there's no end restriction, that means we can just add right on\n          // top of the old end (the start of the new node)\n          this.array.push(new LogootInt(nstart.value))\n          done = true\n        } else if (!nend.done) {\n          // We have an end restriction, but no start restriction, so we just\n          // put the new node's start behind the old end\n          this.array.push(new LogootInt(nend.value).sub(len))\n          done = true\n        } else {\n          // So both other IDs have nothing else. It must be time to make a new\n          // level and be done\n          this.array.push(new LogootInt())\n          done = true\n        }\n      }\n    }\n  }\n\n  static fromJSON(eventnode: LogootPosition.JSON): LogootPosition {\n    const pos = new LogootPosition()\n    pos.array.length = 0\n    eventnode.forEach((n) => {\n      pos.array.push(LogootInt.fromJSON(n))\n    })\n    return pos\n  }\n  static fromInts(...ints: (LogootInt | number)[]): LogootPosition {\n    const pos = new LogootPosition()\n    pos.array.length = 0\n    ints.forEach((n) => {\n      pos.array.push(new LogootInt(n))\n    })\n    return pos\n  }\n  toJSON(): LogootPosition.JSON {\n    return this.array.map((n) => n.toJSON())\n  }\n\n  /**\n   * @returns Internal array length\n   */\n  get length(): number {\n    // A zero-length position is NOT valid\n    // Through some sneakiness, you COULD directly assign the array to make it\n    // have a length of zero. Don't do it.\n    return this.array.length\n  }\n  /**\n   * Returns the last index of the array. This is useful because before this,\n   * the algorithm code often contained many occurences of `length - 1`. This\n   * is used to cut down redundancy.\n   */\n  get levels(): number {\n    // A zero-length position is NOT valid\n    // Through some sneakiness, you COULD directly assign the array to make it\n    // have a length of zero. Don't do it.\n    return this.length - 1\n  }\n  /**\n   * An array accessor\n   */\n  level(n: number): LogootInt {\n    return this.array[n]\n  }\n  /**\n   * An array accessor\n   * @alias level\n   */\n  l(n: number): LogootInt {\n    return this.level(n)\n  }\n\n  /**\n   * Returns a new position with `offset` added to the lowest level of the\n   * position.\n   */\n  offsetLowest(offset: number | LogootInt): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((current, i, array) => {\n        return i < array.length - 1\n          ? current\n          : new LogootInt(current).add(offset)\n      })\n    })\n  }\n  /**\n   * Returns a new position with `offset` subtracted from the lowest level of\n   * the position.\n   */\n  inverseOffsetLowest(offset: number | LogootInt): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((current, i, array) => {\n        return i < array.length - 1\n          ? current\n          : new LogootInt(current).sub(offset)\n      })\n    })\n  }\n\n  /**\n   * Duplicates this position.\n   */\n  copy(): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((e) => new LogootInt(e))\n    })\n  }\n\n  /**\n   * Return a copy of this position, but with the number of levels specified by\n   * `level`. If this position has fewer levels, zeroes will be added in place.\n   */\n  equivalentPositionAtLevel(level: number): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: new Array(level + 1).fill(0, 0, level + 1).map((el, i) => {\n        return new LogootInt(this.array[i])\n      })\n    })\n  }\n\n  cmp(pos: LogootPosition, level = 0): CompareResult {\n    if (level >= this.length) {\n      if (this.length === pos.length) {\n        return 0\n      }\n      return 1\n    }\n    if (level >= pos.length) {\n      return -1\n    }\n    switch (this.level(level).cmp(pos.level(level))) {\n      case 1:\n        return 1\n      case -1:\n        return -1\n      case 0:\n        return this.cmp(pos, level + 1)\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * Return this position if it is between `min` or `max`, otherwise return\n   * `min` if this is less and `max` if this is greater.\n   * @param min - The minimum output.\n   * @param max - The maximum output.\n   * @param preserve_levels - If defined, the output number of levels will be\n   * equal to `preserve_levels`.\n   * @returns Either this position, min, or max. It is **not** copied, so if you\n   * want to modify it, you should copy it.\n   */\n  clamp(\n    min: LogootPosition,\n    max: LogootPosition,\n    preserve_levels?: undefined | number\n  ): LogootPosition {\n    const clamped = this.cmp(min) < 0 ? min : this.cmp(max) > 0 ? max : this\n    if (preserve_levels !== undefined) {\n      return clamped.equivalentPositionAtLevel(preserve_levels)\n    } else {\n      return clamped.copy()\n    }\n  }\n\n  toString(): string {\n    let str = '['\n    this.array.forEach((el, i, a) => {\n      str += el.toString() + (i >= a.length - 1 ? '' : ',')\n    })\n    str += ']'\n    return str\n  }\n}\nnamespace LogootPosition {\n  export type JSON = LogootInt.JSON[]\n  export namespace JSON {\n    export const Schema = { type: 'array', items: LogootInt.JSON.Schema }\n  }\n}\n\n/**\n * A type used to identify a branch. This value should be used to look up a\n * user-presentable name in another map stored outside of `logootish-js`. This\n * is implementation-defined and allows for the broadest possible definition of\n * a branch.\n */\ntype BranchKey = symbol | string | number\n\n/**\n * The type of node stored in a `LogootNodeGroup`.\n */\nenum NodeType {\n  DATA,\n  REMOVAL\n}\n/**\n * Names for NodeType that are printed in debug information.\n */\nconst nt_string = {\n  [NodeType.DATA]: 'DATA',\n  [NodeType.REMOVAL]: 'REMOVAL'\n}\n\n/**\n * A group of `LogootNodeGroup`s that are considered by the `JoinFunction` (see\n * the list document model `index.ts` file) to be related. Each Logoot node is\n * not displayed in the order specified in `groups`. Rather, all of the nodes on\n * a particular branch are displayed together and in the order defined by\n * `branch_order`.\n * @TODO Move `branch_order` into the ListDocumentModel. No reason not to have\n * a whole-document branch order.\n */\nclass ConflictGroup {\n  known_position = 0\n  /**\n   * The order in which branches are displayed. All of the nodes that make up\n   * a single branch are placed together.\n   */\n  readonly branch_order: BranchKey[] = []\n  /**\n   * A list of `LogootNodeGroups` that make up the Logoot side of the local\n   * document. A group's nodes will be split up and placed into one of the\n   * branch sections as defined in `branch_order`. These **absolutely must** be\n   * in order based on their Logoot positions.\n   */\n  groups: LogootNodeGroup[] = []\n\n  constructor(position: number) {\n    this.known_position = position\n  }\n\n  /**\n   * Get the equivalent length of all data nodes.\n   */\n  get ldoc_length(): number {\n    return this.groups.reduce((n, group) => {\n      return n + group.ldoc_length\n    }, 0)\n  }\n  /**\n   * Find the end in the local document,\n   */\n  get ldoc_end(): number {\n    return this.known_position + this.ldoc_length\n  }\n\n  /**\n   * Get the first group's Logoot position\n   */\n  get logoot_start(): LogootPosition {\n    return this.groups[0] ? this.groups[0].start : undefined\n  }\n  /**\n   * Get the last group's Logoot position\n   */\n  get logoot_end(): LogootPosition {\n    return this.groups.length\n      ? this.groups[this.groups.length - 1].end\n      : undefined\n  }\n\n  /**\n   * Get the first branch in this group.\n   */\n  get first_branch(): BranchKey {\n    return this.branch_order[0]\n  }\n  /**\n   * Get the last branch in this group.\n   */\n  get last_branch(): BranchKey {\n    return this.branch_order.length\n      ? this.branch_order[this.branch_order.length - 1]\n      : undefined\n  }\n\n  /**\n   * True if any groups are conflicted.\n   */\n  get conflicted(): boolean {\n    return this.groups.some((g) => g.conflicted)\n  }\n  /**\n   * The length in the local document (only `DATA` nodes) of only `branches`.\n   * @param branches - A list of branches to count.\n   */\n  branchLength(branches: BranchKey[]): number {\n    return this.groups.reduce((n, group) => {\n      return n + group.branchLength(branches)\n    }, 0)\n  }\n\n  /**\n   * Find the position in the local document of a group that **is already** in\n   * this `ConflictGroup`. This is named `insertPos` because it is used to find\n   * the insertion position of a new group, but the naming is a bit confusing.\n   * @param br - The branch on which to determine the position.\n   * @param at - The LogootNodeGroup to determine the position of.\n   * @returns The position of `at`.\n   * @throws {FatalError} Will throw if `after` is not in this CG.\n   */\n  insertPos(br: BranchKey, at: LogootNodeGroup): number {\n    // First, compute the offset for all of the previous branches (ex, A and B)\n    // AAAAAAABBBBccccccdddddeeee\n    let offset =\n      this.known_position +\n      this.branchLength(\n        this.branch_order.slice(0, this.branch_order.indexOf(br) + (at ? 0 : 1))\n      )\n\n    if (!at) {\n      return offset\n    }\n\n    // Sum up all of the prior groups on our branch\n    for (let i = 0; i < this.groups.length; i++) {\n      // Once we've found our group, bail out\n      if (this.groups[i] === at) {\n        return offset\n      }\n      offset += this.groups[i].branchLength([br])\n    }\n    throw new FatalError(\n      'Tried to insert after a LogootNodeGroup that is not in this conflict group'\n    )\n  }\n\n  /**\n   * Get the nodes to the left and right of `start`. If there is already a\n   * `LogootNodeGroup` with the same position, behavior is undefined.\n   * @param start - The position for which to find neighbors of.\n   * @returns An object containing `left` and `right` `LogootNodeGroup`s, as\n   * well as a `pos` number, which is the position of `right` in `this.groups`.\n   */\n  getNeighbors({\n    start\n  }: LogootNodeGroup): {\n    left: LogootNodeGroup\n    right: LogootNodeGroup\n    pos: number\n  } {\n    let left\n    for (let i = 0; i < this.groups.length; i++) {\n      if (this.groups[i].start.cmp(start) <= 0) {\n        left = this.groups[i]\n      }\n      if (this.groups[i].start.cmp(start) > 0) {\n        return { left, right: this.groups[i], pos: i }\n      }\n    }\n    return { left, right: undefined, pos: this.groups.length }\n  }\n\n  /**\n   * Adds a group with only one branch to this CG and returns its position.\n   * @param group - The group to add.\n   * @returns The position in the local document of the insertion.\n   * @throws {TypeError} If the group has more than one branch or if the group's\n   * `ConflictGroup` is not set to `this`. Set `group.group` to this before\n   * calling to avoid this error.\n   */\n  insertSingleBranchGroup(group: LogootNodeGroup): number {\n    if (group.n_branches !== 1) {\n      throw new TypeError('Passed group with no or more than one branch')\n    }\n    if (group.group !== this) {\n      throw new TypeError('Conflict group not assigned to node group')\n    }\n\n    const br = group.branches[0]\n    if (!this.branch_order.includes(br)) {\n      this.branch_order.push(br)\n    }\n\n    const { right, pos } = this.getNeighbors(group)\n\n    const known_position = this.insertPos(br, right)\n    this.groups.splice(pos, 0, group)\n    return known_position\n  }\n\n  toString(): string {\n    let str = `Conflict @ ${this.known_position} (`\n    str += this.branch_order.map((br) => br.toString()).join(' ')\n    str += `) {`\n    str += this.groups.map((gr) => {\n      return (\n        '\\n  ' +\n        gr\n          .toString()\n          .split('\\n')\n          .join('\\n  ')\n      )\n    })\n    str += '\\n}'\n    return str\n  }\n}\n\ntype LogootNode = { type: NodeType; rclk: LogootInt }\n/**\n * A group of nodes that are all on different branches and have different vector\n * clock values, but share the same **Logoot** start, end, and length.\n */\nclass LogootNodeGroup {\n  length = 0\n  start: LogootPosition = new LogootPosition()\n  group: ConflictGroup\n  /**\n   * The `LogootNode`s in this group. Despite what TypeScript thinks, they key\n   * is **not** a string. It is a BranchKey. Problem is, TS doesn't support\n   * using symbols to index a type, which will hopefully fixed when\n   * [TypeScript PR #26797](https://github.com/microsoft/TypeScript/pull/26797) lands.\n   * In the mean time, using `as` to turn the BranchKey into a string is used as\n   * a hacky workaround.\n   */\n  nodes: { [key: string]: LogootNode } = {}\n\n  constructor(old?: LogootNodeGroup) {\n    if (old) {\n      Object.assign(this, {\n        length: old.length,\n        start: old.start.copy(),\n        group: old.group\n      })\n      old.eachNode(({ type, rclk }, k) => {\n        this.br(k, { type, rclk: new LogootInt(rclk) })\n      })\n    }\n  }\n\n  /**\n   * Gets the length of all `DATA` nodes.\n   */\n  get ldoc_length(): number {\n    // For some reason, TS thinks that this will produce a BranchKey. Obviously,\n    // it doesn't, so I have to do the awkward \"as unknown as number\" cast :(\n    return (this.branches.reduce((n: number, br: number) => {\n      return this.br(br).type === NodeType.DATA ? n + this.length : n\n    }, 0) as unknown) as number\n  }\n\n  /**\n   * Gets the length of all `DATA` nodes on `branches`.\n   * @param branches - The branches to search.\n   * @returns The length of all `DATA` nodes\n   */\n  branchLength(branches: BranchKey[]): number {\n    return (this.branches\n      .filter((k) => branches.includes(k))\n      .reduce((n: number, br: number) => {\n        return this.br(br).type === NodeType.DATA ? n + this.length : n\n      }, 0) as unknown) as number\n  }\n\n  /**\n   * The end of the node. Note that technically there is not an atom at this\n   * position, so it's fair game to have another node placed at this position.\n   */\n  get end(): LogootPosition {\n    return this.start.offsetLowest(this.length)\n  }\n\n  get branches(): BranchKey[] {\n    return allKeys(this.nodes)\n  }\n  get n_branches(): number {\n    return this.branches.length\n  }\n  /**\n   * Returns true if there are multiple branches\n   */\n  get conflicted(): boolean {\n    return this.n_branches > 1\n    /* return ( // TODO: Fix\n      this.branches.filter((k) => {\n        return this.br(k).type !== NodeType.MERGE_INTO\n      }).length > 1\n    ) */\n  }\n\n  eachNode(cb: (n: LogootNode, k: BranchKey) => void): void {\n    this.branches.forEach((k) => {\n      cb(this.br(k), k)\n    })\n  }\n  mapNodes(\n    cb: (n: LogootNode, k: BranchKey) => LogootNode\n  ): {\n    [key: string]: LogootNode\n  } {\n    const rval: { [key: string]: LogootNode } = {}\n    this.branches.forEach((k) => {\n      rval[(k as unknown) as string] = cb(this.br(k), k)\n    })\n    return rval\n  }\n\n  /**\n   * This is a method to access and (possibly) assign a `LogootNode` to the\n   * particular branch. This is a thing because TypeScript does not yet support\n   * using symbols as keys and I don't feel like typing\n   * `(key as unknown) as string` a billion times. See\n   * [TypeScript PR #26797](https://github.com/microsoft/TypeScript/pull/26797).\n   */\n  br(key: BranchKey, node?: LogootNode): LogootNode {\n    if (node) {\n      this.nodes[(key as unknown) as string] = node\n    }\n    return this.nodes[(key as unknown) as string]\n  }\n  delBr(key: BranchKey): void {\n    delete this.nodes[(key as unknown) as string]\n  }\n\n  /**\n   * Split this LogootNodeGroup around a position `pos` units after the current\n   * start on the lowest level.\n   * @param pos - The location of where to split this group.\n   * @returns A new LogootNodeGroup. This is spliced into this conflict group,\n   * so no cleanup is necessary after this is run.\n   */\n  splitAround(pos: number): LogootNodeGroup {\n    const newgroup = new LogootNodeGroup(this)\n    newgroup.start = this.start.offsetLowest(pos)\n    newgroup.length = this.length - pos\n\n    // Ensure that we're in the right order in the ConflictGroup\n    const groups = newgroup.group.groups\n    groups.splice(groups.indexOf(this) + 1, 0, newgroup)\n\n    this.length = pos\n    return newgroup\n  }\n\n  toString(): string {\n    let str = `Group ${this.start.toString()} + ${this.length} {`\n    str += this.branches.map((k) => {\n      const br = this.br(k)\n      return `\\n  ${String(k)}: ${nt_string[br.type]} @ ${br.rclk.toString()}`\n    })\n    str += '\\n}'\n    return str\n  }\n}\n\nexport {\n  LogootInt,\n  LogootPosition,\n  NodeType,\n  ConflictGroup,\n  LogootNodeGroup,\n  BranchKey\n}\n","/**\n * @file Definition of various integers.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { CompareResult, Comparable } from './utils'\n\n/**\n * An abstract subclass of `Comparable` to provide a generic interface for\n * integer types that may not be supported by JavaScript\n * @template FutureType - The type of the subclass with which to restrict all\n * operations to the int class.\n * @inheritdoc\n */\nabstract class IntType<FutureType> extends Comparable<FutureType | number> {\n  // eslint-disable-next-line\n  abstract toJSON(): any\n  abstract toString(): string\n\n  /**\n   * Add another integer to the value of this one\n   * @param n - The number to add\n   */\n  abstract add(n: FutureType | number): FutureType\n  /**\n   * Add another integer to the value of this one\n   * @param n - The number to subtract\n   */\n  abstract sub(n: FutureType | number): FutureType\n\n  /**\n   * Assign another integer to this object\n   * @param n - The number to assign\n   */\n  abstract sub(n: FutureType | number): FutureType\n\n  /**\n   * The JavaScript int type for this integer (with an exception thrown if the\n   * value cannot be represented in 32 bits)\n   */\n  abstract js_int: number\n}\n\n/**\n * An `IntType` that restricts the number to 32 bits by using an `Int32Array`.\n * @inheritdoc\n * @example ```typescript\n * const a = new Int32(5)\n * console.log(a.toString()) // 5\n * a.add(10).sub(8)\n * console.log(a.toString()) // 7\n * const b = new Int32(3)\n * console.log(a.cmp(b)) // 1\n * ```\n */\nclass Int32 extends IntType<Int32> {\n  // Size limit the int, enforce signing, and remove decimals\n  private int32 = new Int32Array([0])\n\n  constructor(n: Int32 | number = 0) {\n    super()\n    if (n instanceof Int32) {\n      this.int32[0] = n.int32[0]\n    } else {\n      this.int32[0] = n\n    }\n  }\n\n  static fromJSON(obj: Int32.JSON): Int32 {\n    return new Int32(obj)\n  }\n\n  toJSON(): Int32.JSON {\n    return this.int32[0]\n  }\n\n  add(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] += n.int32[0]\n    } else {\n      this.int32[0] += n\n    }\n    return this\n  }\n  sub(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] -= n.int32[0]\n    } else {\n      this.int32[0] -= n\n    }\n    return this\n  }\n\n  assign(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] = n.int32[0]\n    } else {\n      this.int32[0] = n\n    }\n    return this\n  }\n\n  cmp(n: Int32 | number): CompareResult {\n    if (n instanceof Int32) {\n      return ((this.int32[0] >= n.int32[0] ? 1 : 0) +\n        (this.int32[0] <= n.int32[0] ? -1 : 0)) as CompareResult\n    } else {\n      return ((this.int32[0] >= n ? 1 : 0) +\n        (this.int32[0] <= n ? -1 : 0)) as CompareResult\n    }\n  }\n\n  copy(): Int32 {\n    return new Int32(this)\n  }\n\n  get js_int(): number {\n    return this.int32[0]\n  }\n\n  toString(): string {\n    return this.int32[0].toString()\n  }\n}\nnamespace Int32 {\n  export type JSON = number\n  export namespace JSON {\n    export const Schema = { type: 'number' }\n  }\n}\n\nexport { IntType, Int32 }\n"],"sourceRoot":""}