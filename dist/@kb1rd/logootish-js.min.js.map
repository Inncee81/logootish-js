{"version":3,"sources":["webpack://@kb1rd/logootish-js/webpack/universalModuleDefinition","webpack://@kb1rd/logootish-js/webpack/bootstrap","webpack://@kb1rd/logootish-js/./src/utils.ts","webpack://@kb1rd/logootish-js/./src/compare.ts","webpack://@kb1rd/logootish-js/./src/bst.ts","webpack://@kb1rd/logootish-js/./src/index.ts","webpack://@kb1rd/logootish-js/./src/listmodel/index.ts","webpack://@kb1rd/logootish-js/./src/listmodel/logoot.ts","webpack://@kb1rd/logootish-js/./src/ints.ts","webpack://@kb1rd/logootish-js/./src/debug.ts","webpack://@kb1rd/logootish-js/./node_modules/loglevel/lib/loglevel.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Comparable","arraymap","array","fn","length","newarray","splice","FatalError","Error","fatal","allKeys","obj","keys","concat","getOwnPropertySymbols","MemberPtr","val","allValues","map","k","BreakException","catchBreak","e","cmpResult","isNaN","TypeError","cmp","RangeBounds","a","b","closed_left","closed_right","Boolean","left_str","right_str","LCGC","LOGO","LCGO","LOGC","TypeRange","cf","min","max","bounds","undefined","NaN","Infinity","undef_min","undef_max","def_min","def_max","local","other","bound_def","bound_undef","rval","local_closed","other_closed","compareEndpoints","ComparableTypeRange","super","NumberRange","BstNode","data","TypeRangeSearch","range","buckets","lesser","greater","bucket","push","cval","RangeSearch","lesser_find_greatest","greater_find_least","points","pd","search","last_bucket","inclusive","point","current","clear_buckets","traverse_left","left","passed_bucket","right","range_buckets","forEach","el","sort","Bst","bst_root","node","gteqcmp","add","getBucketInfo","successor","setSuccessor","gtcmp","ptr","_getInorderSuccessor","filter","result","should_remove","remove","start","endm1","operation","undef","operateOnAllRange","sequential","operateOnAllGteq","operateOnAllLteq","operateOnAll","nodes","eqcmp","str","toString","split","join","DBstNode","parent_node","absolute_value","preferential_cmp","right_node","addChild","left_node","smallest_child","smallest_smaller_child","largest_child","largest_larger_child","vals","parentUpdate","tryRmRight","removeChild","tryRmLeft","cnode","inorder_successor","absval","replaceWith","next","cumulative","push_offset","traverse_right","sec","getRangeSection","setBucket","addToBucket","pop_offset","cb","DBst","EventState","ListDocumentModel","LogootInt","LogootPosition","NodeType","InsertionConflictError","MinimalJoinFunction","branches","br","branch","jf","ldoc_bst","logoot_bst","clock","canJoin","before_position","after_position","cg","logoot_start","lesser_length","ldoc_length","known_position","last_branch","first_branch","logoot_end","remaining_length","branch_order","indexOf","branchLength","slice","most_lesser","groups","end","inverseOffsetLowest","rclk","ldoc_end","unshift","removal_sets","group","rlen","type","DATA","offsetLowest","len","branch_removals","levels","depth_removals","last_removal","onRemoval","Math","removals","branch_set","entries","depth_set","nstart","nrclk","debug_logger","log","debug","info","String","level","nend","assign","range_search","create_range_search","push_point","all_greater","_lesser","_skip_ranges","_greater","skip_ranges","includes","split_pos","copy","sub","js_int","lesser_end","splitAround","conflict_order","ke","vgroup","LogootNodeGroup","operations","insert","offset","addSpaceBefore","translate","source","dest","splitCg","ng","ncg","ConflictGroup","known_end","excerpt_length","origin","moved_length","joinCg","lcg","fetch_position","next_length","last_start","last_group","next_group","group_level_start","clamp","group_level_end","empty_length","empty_offset","newgroup","last_join","next_join","already_joined","ipos","insertSingleBranchGroup","group_length","group_offset","insertPos","fixJoined","joined","should_join","conflicted","conflicting","mark","_mergeNode","REMOVAL","last_pos","last_kp","JsonableLogger","ops","op","ldm","post","newops","j","fromJSON","brk_tbl","_brk_i","toJSON","Int32","done","itstart","values","itend","gteq","eventnode","pos","ints","Array","fill","preserve_levels","clamped","equivalentPositionAtLevel","JSON","Schema","items","nt_string","position","reduce","some","g","at","n_branches","getNeighbors","gr","old","eachNode","IntType","int32","Int32Array","getLogger","definition","noop","isIE","window","navigator","test","userAgent","logMethods","bindMethod","methodName","method","Function","apply","arguments","traceForIE","console","trace","realMethod","replaceLoggingMethods","loggerName","methodFactory","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","defaultLevel","currentLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","location","encodeURIComponent","exec","getLevel","setLevel","persist","toUpperCase","SILENT","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","logger","_log","noConflict","getLoggers"],"mappings":"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","file":"@kb1rd/logootish-js.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@kb1rd/logootish-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@kb1rd/logootish-js\"] = factory();\n\telse\n\t\troot[\"@kb1rd/logootish-js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * @file Various utilities that don't belong anywhere else.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport {\n  CompareResult,\n  CompareFunction,\n  DualCompareFunction,\n  Comparable\n} from './compare'\n\n/**\n * Like the built-in map function, but it replaces the element with an arbitrary\n * number of elements, making it a combination of map, push, and filter.\n * @template T - The type of the array elements.\n * @param array - The array to map. It will be modified.\n * @param fn - The element mapper function. It takes the current element as an\n * argument and returns the element(s) take its place.\n * @return The same array that was passed as an argument.\n */\nfunction arraymap<T>(array: T[], fn: (el: T) => T[]): T[] {\n  for (let i = 0; i < array.length; ) {\n    const newarray = fn(array[i])\n    array.splice(i, 1, ...newarray)\n    i += newarray.length ? newarray.length : 1\n  }\n  return array\n}\n\n/**\n * A class created with a variable `fatal` added and set to true. This is used\n * for ensuring that a client knows to shut down a document if an error has\n * indicated that the document is corrupt.\n */\nclass FatalError extends Error {\n  fatal = true\n}\n\n/**\n * Designed to emulate pointers to members of an object. This is useful inside\n * the B-trees. This should not be used like a C pointer: If the value in the\n * destination object changes, so does the value reported by this object.\n * @template T - The container object type.\n * @template K - The key inside the object.\n */\nclass MemberPtr<T, K extends keyof T> {\n  private obj: T\n  private key: K\n  /**\n   * @param obj - The object with the member to reference.\n   * @param key - The key of the reference inside the object.\n   */\n  constructor(obj: T, key: K) {\n    this.obj = obj\n    this.key = key\n  }\n  /**\n   * The value of the 'pointer.'\n   */\n  get value(): T[K] {\n    return this.obj[this.key]\n  }\n  set value(val: T[K]) {\n    this.obj[this.key] = val\n  }\n}\n\nfunction allKeys<T, K extends keyof T>(obj: T): K[] {\n  return (Object.keys(obj) as K[]).concat(\n    Object.getOwnPropertySymbols(obj) as K[]\n  )\n}\n\nfunction allValues<T, V extends T[keyof T]>(obj: T): V[] {\n  return allKeys(obj).map((k) => obj[k]) as V[]\n}\n\nconst BreakException = {}\nfunction catchBreak(fn: () => void): void {\n  try {\n    fn()\n  } catch (e) {\n    if (e !== BreakException) {\n      throw e\n    }\n  }\n}\n\nexport {\n  arraymap,\n  FatalError,\n  CompareResult,\n  CompareFunction,\n  DualCompareFunction,\n  Comparable,\n  MemberPtr,\n  allKeys,\n  allValues,\n  BreakException,\n  catchBreak\n}\n","/**\n * @file Several useful things for doing comparisons and sorting data.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n\n/**\n * One of zero, one, or negative one.\n */\ntype CompareResult = -1 | 0 | 1\n/**\n * A function type that takes `T` and returns a CompareResult.\n */\ntype CompareFunction<T> = (other: T) => CompareResult\n/**\n * A function type that takes two of a type `T` and returns a CompareResult.\n */\ntype DualCompareFunction<T> = (a: T, b: T) => CompareResult\n\n/**\n * Turns a number into a `CompareResult.` If it is greater than 0, it will\n * become 1. If it is less then 0, it will become -1. If the input is\n * violating type constraints and is not a number, an error will be thrown.\n * @param n - The number to transform\n * @returns `-1` if `n<0`, `0` if `n==0`, `1` if `n>0`\n * @throws {TypeError} If `n` is not a number\n */\nfunction cmpResult(n: number): CompareResult {\n  if (isNaN(n) || n === undefined || n === null) {\n    throw new TypeError(`Invalid compare result '${n}.'`)\n  }\n  return n > 0 ? 1 : n < 0 ? -1 : 0\n}\n\n/**\n * A utility abstract class with no implementation for the function `cmp` and\n * implementations for `gt`, `gteq`, `eq`, `lteq`, and `lt` functions.\n * @template T The other type that can be compared.\n */\nabstract class Comparable<T> {\n  /**\n   * Compare this object to another one.\n   */\n  abstract cmp(other: T): CompareResult\n  /**\n   * @return True if this object is greater than the one provided.\n   */\n  gt(n: T): boolean {\n    return this.cmp(n) === 1\n  }\n  /**\n   * @return True if this object is greater than or equal to the one provided.\n   */\n  gteq(n: T): boolean {\n    return this.cmp(n) >= 0\n  }\n  /**\n   * @return True if this object is equal to the one provided.\n   */\n  eq(n: T): boolean {\n    return this.cmp(n) === 0\n  }\n  /**\n   * @return True if this object is less than or equal to the one provided.\n   */\n  lteq(n: T): boolean {\n    return this.cmp(n) <= 0\n  }\n  /**\n   * @return True if this object is less than the one provided.\n   */\n  lt(n: T): boolean {\n    return this.cmp(n) === -1\n  }\n}\n\n/**\n * An interface for anything that resembles a range of possible values.\n */\ninterface BaseRangeContainer<T> {\n  /**\n   * Determines if `item` is in this range.\n   * @param item - The item to test\n   * @returns True if the item is in the range\n   */\n  contains(item: T): boolean\n  /**\n   * Determines *all* of `range` is in this range\n   * @param item - The range to test\n   * @returns True if this range contains `range`\n   */\n  doesContainInRange(range: TypeRange<T>): boolean\n  /**\n   * Determines *any* of `range` is in this range\n   * @param item - The range to test\n   * @returns True if this range contains any element in `range`\n   */\n  mayContainInRange(range: TypeRange<T>): boolean\n}\n\nclass RangeBounds {\n  /**\n   * **L**esser **C**losed **G**reater **C**losed\n   */\n  static LCGC = new RangeBounds(true, true)\n  /**\n   * **L**esser **O**pen **G**reater **O**pen\n   */\n  static LOGO = new RangeBounds(false, false)\n  /**\n   * **L**esser **C**losed **G**reater **O**pen\n   */\n  static LCGO = new RangeBounds(true, false)\n  /**\n   * **L**esser **O**pen **G**reater **C**losed\n   */\n  static LOGC = new RangeBounds(false, true)\n\n  /**\n   * True if the left side is closed.\n   */\n  readonly closed_left: boolean\n  /**\n   * True if the right side is closed.\n   */\n  readonly closed_right: boolean\n\n  /**\n   * @param a - A boolean for the closure of the left side **or** a bracket\n   * string (like `[)`) for the range.\n   * @param b - A boolean for the closure of the right side. If brackets are\n   * provided, this will be ignored.\n   */\n  constructor(a: boolean | '[]' | '()' | '[)' | '(]', b?: boolean) {\n    if (a === true || a === false) {\n      this.closed_left = a\n      this.closed_right = Boolean(b)\n    } else if (a[0] && a[1]) {\n      this.closed_left = a[0] === '['\n      this.closed_right = a[1] === ']'\n    } else {\n      this.closed_left = true\n      this.closed_right = true\n    }\n  }\n  /**\n   * @returns A string that represents the left bracket (`[` or `(`)\n   */\n  get left_str(): string {\n    return this.closed_left ? '[' : '('\n  }\n  /**\n   * @returns A string that represents the right bracket (`]` or `)`)\n   */\n  get right_str(): string {\n    return this.closed_right ? ']' : ')'\n  }\n  /**\n   * @returns A bracket string like `[)`\n   */\n  toString(): string {\n    return this.left_str + this.right_str\n  }\n}\n\n/**\n * Specifies a bound of a range.\n */\ntype BoundSelector = 'max' | 'min'\n/**\n * Represents a simple range with a minimum and a maximum. Inclusivity is\n * controlled through `bounds`.\n */\nclass TypeRange<T> implements BaseRangeContainer<T> {\n  /**\n   * @param cf - A compare function that is used to compare two `T`\n   * @param min - The minimum value\n   * @param max - The maximum value\n   * @param bounds - The inclusivity bounds to use\n   */\n  constructor(\n    public readonly cf: DualCompareFunction<T>,\n    public min?: T,\n    public max?: T,\n    public bounds: RangeBounds = RangeBounds.LCGC\n  ) {}\n\n  /**\n   * Returns a range that is greater than `t`.\n   * @param cf - The compare function to use\n   * @param t - The value to use\n   */\n  static gt<T>(cf: DualCompareFunction<T>, t: T): TypeRange<T> {\n    return new TypeRange(cf, t, undefined, new RangeBounds(false, false))\n  }\n  /**\n   * Returns a range that is greater than or equal to `t`.\n   * @param cf - The compare function to use\n   * @param t - The value to use\n   */\n  static gteq<T>(cf: DualCompareFunction<T>, t: T): TypeRange<T> {\n    return new TypeRange(cf, t, undefined, new RangeBounds(true, false))\n  }\n  /**\n   * Returns a range that is less than `t`.\n   * @param cf - The compare function to use\n   * @param t - The value to use\n   */\n  static lt<T>(cf: DualCompareFunction<T>, t: T): TypeRange<T> {\n    return new TypeRange(cf, undefined, t, new RangeBounds(false, false))\n  }\n  /**\n   * Returns a range that is less than or equal to `t`.\n   * @param cf - The compare function to use\n   * @param t - The value to use\n   */\n  static lteq<T>(cf: DualCompareFunction<T>, t: T): TypeRange<T> {\n    return new TypeRange(cf, undefined, t, new RangeBounds(false, true))\n  }\n  /**\n   * A range that contains all possible values.\n   * @param cf - The compare function to use\n   */\n  static all<T>(cf: DualCompareFunction<T>): TypeRange<T> {\n    return new TypeRange(\n      cf,\n      undefined,\n      undefined,\n      new RangeBounds(false, false)\n    )\n  }\n\n  /**\n   * @returns True if `min` is `undefined` (Representing negative infinity)\n   */\n  get undef_min(): boolean {\n    return (\n      this.min === undefined ||\n      this.min === null ||\n      ((this.min as unknown) as number) === NaN ||\n      ((this.min as unknown) as number) === -Infinity\n    )\n  }\n  /**\n   * @returns True if `min` is defined (not negative infinity)\n   */\n  get def_min(): boolean {\n    return !this.undef_min\n  }\n  /**\n   * @returns True if `max` is `undefined` (Representing infinity)\n   */\n  get undef_max(): boolean {\n    return (\n      this.max === undefined ||\n      this.max === null ||\n      ((this.max as unknown) as number) === NaN ||\n      ((this.max as unknown) as number) === Infinity\n    )\n  }\n  /**\n   * @returns True if `max` is defined (not infinity)\n   */\n  get def_max(): boolean {\n    return !this.undef_max\n  }\n  /**\n   * @param b - The bound to select\n   * @returns True if the bound is defined (not an infinity)\n   */\n  bound_def(b: BoundSelector): boolean {\n    return b === 'min' ? this.def_min : this.def_max\n  }\n  /**\n   * @param b - The bound to select\n   * @returns True if the bound is undefined (is an infinity)\n   */\n  bound_undef(b: BoundSelector): boolean {\n    return b === 'min' ? this.undef_min : this.undef_max\n  }\n\n  contains(t: T): boolean {\n    return (\n      (!this.min ||\n        this.cf(t, this.min) >= (this.bounds.closed_left ? 0 : 1)) &&\n      (!this.max || this.cf(this.max, t) >= (this.bounds.closed_right ? 0 : 1))\n    )\n  }\n  /**\n   * Finds out if `t` is less than (`-1`), inside (`0`), or greater than\n   * (`1`) this range\n   * @param t The object to compare\n   */\n  getRangeSection(t: T): CompareResult {\n    if (\n      this.def_max &&\n      this.cf(this.max, t) < (this.bounds.closed_right ? 0 : 1)\n    ) {\n      return 1\n    }\n    if (\n      this.def_min &&\n      this.cf(t, this.min) < (this.bounds.closed_left ? 0 : 1)\n    ) {\n      return -1\n    }\n    return 0\n  }\n\n  /**\n   * Compares this range's endpoints to endpoints of another range. The\n   * comparison is relative to this (ex, it will be `1` if this is greater)\n   * @param local - The local bound to use\n   * @param r - The other range to use\n   * @param other - The other bound to use\n   * @returns The result of the comparison\n   */\n  compareEndpoints(\n    local: BoundSelector,\n    r: TypeRange<T>,\n    other: BoundSelector\n  ): CompareResult {\n    if (this.bound_def(local) && r.bound_undef(other)) {\n      return other === 'min' ? 1 : -1\n    }\n    if (this.bound_undef(local) && r.bound_undef(other)) {\n      return local !== other ? (local === 'max' ? 1 : -1) : 0\n    }\n    if (this.bound_undef(local) && r.bound_def(other)) {\n      return local === 'max' ? 1 : -1\n    }\n\n    const rval = this.cf(this[local] as T, r[other] as T)\n\n    if (rval === 0) {\n      const local_closed =\n        local === 'min' ? !this.bounds.closed_left : this.bounds.closed_right\n      const other_closed =\n        other === 'min' ? !r.bounds.closed_left : r.bounds.closed_right\n\n      if (local_closed && !other_closed) {\n        return 1\n      } else if (!local_closed && other_closed) {\n        return -1\n      }\n    }\n    return rval\n  }\n\n  doesContainInRange(r: TypeRange<T>): boolean {\n    return (\n      this.compareEndpoints('min', r, 'min') <= 0 &&\n      this.compareEndpoints('max', r, 'max') >= 0\n    )\n  }\n  mayContainInRange(r: TypeRange<T>): boolean {\n    return (\n      this.compareEndpoints('min', r, 'max') < 0 &&\n      this.compareEndpoints('max', r, 'min') > 0\n    )\n  }\n\n  toString(): string {\n    return `${this.bounds.left_str}${this.min},${this.max}${this.bounds.right_str}`\n  }\n}\n\n/**\n * A subclass of `TypeRange` that automatically creates a compare function if\n * `T` is of type `Comparable`.\n */\nclass ComparableTypeRange<T extends Comparable<T>> extends TypeRange<T> {\n  constructor(min: T, max: T, bounds?: RangeBounds) {\n    super((a: T, b: T) => a.cmp(b), min, max, bounds)\n  }\n}\n\n/**\n * A subclass of `TypeRange` for numbers. It has helper functions for applying\n * an offset to the range.\n */\nclass NumberRange extends TypeRange<number> {\n  constructor(min: number, max: number, bounds?: RangeBounds) {\n    super((a, b) => cmpResult(a - b), min, max, bounds)\n  }\n  /**\n   * Add a positive offset to the range\n   * @param o - The offset to apply\n   */\n  push_offset(o: number): void {\n    this.min += o\n    this.max += o\n  }\n  /**\n   * Add a negative offset to the range\n   * @param o - The offset to apply\n   */\n  pop_offset(o: number): void {\n    this.min -= o\n    this.max -= o\n  }\n}\n\nexport {\n  CompareResult,\n  CompareFunction,\n  DualCompareFunction,\n  cmpResult,\n  Comparable,\n  BaseRangeContainer,\n  RangeBounds,\n  TypeRange,\n  ComparableTypeRange,\n  NumberRange\n}\n","/**\n * @file A binary search tree implementation for finding ranges within the tree\n * and finding neighboring nodes. The documentation for this is, erm, not super\n * amazing.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { DualCompareFunction, MemberPtr, CompareResult } from './utils'\nimport { TypeRange, NumberRange } from './compare'\n\n/**\n * The node type used by the binary search tree\n */\nclass BstNode<T> {\n  /**\n   * The data contained in the node.\n   */\n  data: T\n  left: BstNode<T> | undefined\n  right: BstNode<T> | undefined\n  constructor(data: T) {\n    this.data = data\n  }\n}\n\n/**\n * The pointer type either to a leaf of the BST or the root. By using\n * `MemberPtr`, methods in the BST can re-assign the node value simply through\n * this 'pointer' object.\n */\ntype BstNodePtr<T> =\n  | MemberPtr<BstNode<T>, 'left'>\n  | MemberPtr<BstNode<T>, 'right'>\n  // eslint-disable-next-line\n  | MemberPtr<Bst<T, any>, 'bst_root'>\n/**\n * The type of a function that operates on nodes of the BST.\n */\ntype NodeOp<T> = (node: BstNode<T>) => void\n\nclass TypeRangeSearch<T, R> {\n  readonly buckets: {\n    lesser: [T, R][]\n    range: [T, R][]\n    greater: [T, R][]\n  } = { lesser: [], range: [], greater: [] }\n  constructor(public range: TypeRange<T>) {}\n\n  addToBucket(bucket: 'lesser' | 'range' | 'greater', val: T, obj: R): void {\n    this.buckets[bucket].push([val, obj])\n  }\n  setBucket(bucket: 'lesser' | 'greater', val: T, obj: R): void {\n    let cval: CompareResult\n    if (\n      !this.buckets[bucket].length ||\n      (cval = this.range.cf(val, this.buckets[bucket][0][0])) === 0\n    ) {\n      this.buckets[bucket].push([val, obj])\n      return\n    }\n    if (bucket === 'lesser' && cval > 0) {\n      this.buckets.lesser = [[val, obj]]\n    } else if (bucket === 'greater' && cval < 0) {\n      this.buckets.greater = [[val, obj]]\n    }\n  }\n}\n\n/**\n * A single point in a `RangeSearch`. The first element is the point value, the\n * second element is a boolean that is true if the point is inclusive, and the\n * third element the bucket string, or `undefined` to drop elements.\n */\ntype Point<T> = [T, boolean, string?]\n\n/**\n * A representation of an inequality that can be used to search and sort the\n * elements of an array into `bucket`s. It is a collection of `Point`s. Each\n * `Point` will include any values less that its own and, if the point is\n * inclusive, equal to its own.\n */\nclass RangeSearch<T> {\n  /**\n   * True if only **one** value is kept for elements before the first point.\n   * Used to find the inorder predecessor.\n   */\n  lesser_find_greatest = false\n  /**\n   * True if only **one** value is kept for elements after the last point. Used\n   * to find the inorder successor.\n   */\n  greater_find_least = false\n  private points: Point<T>[] = []\n  private last_bucket?: string\n  private cf: DualCompareFunction<T>\n\n  constructor(cf: DualCompareFunction<T>) {\n    this.cf = cf\n  }\n\n  static lteq<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, true, bucket])\n    search.last_bucket = undefined\n    return search\n  }\n  static lt<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, false, bucket])\n    search.last_bucket = undefined\n    return search\n  }\n  static gteq<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, false, undefined])\n    search.last_bucket = bucket\n    return search\n  }\n  static gt<T>(\n    cf: DualCompareFunction<T>,\n    pd: T,\n    bucket: string\n  ): RangeSearch<T> {\n    const search = new RangeSearch<T>(cf)\n    search.points.push([pd, true, undefined])\n    search.last_bucket = bucket\n    return search\n  }\n\n  /**\n   * Add a point to the collection.\n   * @param data - The value for comparison.\n   * @param bucket - The `bucket` to sort values into, or undefined to discard.\n   * @param inclusive - Determines if the point includes `data`.\n   */\n  push_point(data: T, bucket: string, inclusive = false): void {\n    const point: Point<T> = [data, inclusive, bucket]\n    for (let i = 0; i < this.points.length; i++) {\n      if (this.cf(data, this.points[i][0]) < 0) {\n        this.points.splice(i, 0, point)\n        return\n      }\n    }\n    this.points.push(point)\n  }\n  /**\n   * Set the default bucket for any values greater than the last point.\n   */\n  all_greater(bucket?: string): void {\n    this.last_bucket = bucket\n  }\n\n  /**\n   * A function used by Binary Search Trees to determine traversal.\n   * @param data - The value to compare.\n   * @param current - The current values that are stored.\n   * @param clear_buckets - If true, elements from `current` will be eliminated\n   * if they are affected by `lesser_find_greatest` or `greater_find_least` and\n   * an alternative closer to `data` is found.\n   * @param traverse_left - Will be called when there is the possibility that\n   * there are elements smaller than this one that will satisfy\n   * `greater_find_least`, thereby reducing the number of necessary traversals.\n   * @returns An object containing `left` and `right`, which are booleans that\n   * tell whether more data could be found to the left and right of `data`,\n   * respectively, as well as an optional `bucket` string to tell where `data`\n   * should be sorted.\n   */\n  getBucketInfo(\n    data: T,\n    current?: { [key: string]: T[] },\n    clear_buckets = false,\n    traverse_left?: () => void\n  ): {\n    left: boolean\n    right: boolean\n    bucket?: string\n  } {\n    let left = false\n    let passed_bucket = false\n    let bucket = this.last_bucket\n    let right = Boolean(this.last_bucket)\n\n    // Account for empty searches\n    if (!this.points.length && this.last_bucket) {\n      if (!left && traverse_left) {\n        traverse_left()\n      }\n      left = true\n    }\n\n    // Calculate the membership of each range before the point\n    for (let i = 0; i < this.points.length; i++) {\n      const [other, inclusive, b] = this.points[i]\n\n      if (b && !passed_bucket) {\n        if (!left && traverse_left) {\n          traverse_left()\n        }\n        left = true\n      }\n\n      // Should we add to this current bucket?\n      if (this.cf(data, other) < (inclusive ? 1 : 0)) {\n        if (!passed_bucket) {\n          passed_bucket = true\n          bucket = b\n        }\n        if (\n          i == 0 &&\n          this.lesser_find_greatest &&\n          clear_buckets &&\n          current[b] &&\n          current[b].length\n        ) {\n          if (this.cf(current[b][0], data) < 0) {\n            current[b] = []\n          } else if (this.cf(current[b][0], data) > 0) {\n            bucket = undefined\n          }\n        }\n      }\n\n      if (b && passed_bucket && this.cf(other, data) !== 0) {\n        right = true\n      }\n    }\n\n    // Ensure we account for the area after the last point\n    if (!passed_bucket && this.last_bucket) {\n      const b = this.last_bucket\n      // Traverse the left side assuming we haven't already\n      if (bucket && !left) {\n        left = true\n        traverse_left()\n      }\n      if (\n        this.greater_find_least &&\n        clear_buckets &&\n        current[b] &&\n        current[b].length\n      ) {\n        if (this.cf(current[b][0], data) > 0) {\n          current[b] = []\n        } else if (this.cf(current[b][0], data) < 0) {\n          bucket = undefined\n        }\n      }\n      right = true\n    }\n\n    // Don't traverse if unnecessary\n    left =\n      left &&\n      (!this.lesser_find_greatest ||\n        !this.points.length ||\n        !current[this.points[0][2]] ||\n        !current[this.points[0][2]].length ||\n        this.cf(current[this.points[0][2]][0], data) <= 0)\n    right =\n      right &&\n      (!this.greater_find_least ||\n        !current[this.last_bucket] ||\n        !current[this.last_bucket].length ||\n        this.cf(current[this.last_bucket][0], data) >= 0)\n\n    return { left, bucket, right }\n  }\n\n  /*\n   * Place `data` into a bucket defined by `range_buckets` based on the points\n   * that have been added to this search\n   * @param data - The value to sort.\n   * @param range_buckets - Sort `data` into one of the buckets defined as\n   * properties on this object. An array will be assigned at the bucket name if\n   * the target bucket is not already defined.\n   * @returns `range_buckets`\n   */\n  sort(\n    data: T,\n    range_buckets: { [key: string]: T[] } = {}\n  ): { [key: string]: T[] } {\n    let i\n    for (i = 0; i < this.points.length; i++) {\n      const [other, inclusive, b] = this.points[i]\n\n      if (this.cf(data, other) < (inclusive ? 1 : 0)) {\n        if (!b) {\n          return range_buckets\n        }\n        if (\n          !range_buckets[b] ||\n          (i === 0 &&\n            this.lesser_find_greatest &&\n            range_buckets[b].length &&\n            this.cf(range_buckets[b][0], data) < 0)\n        ) {\n          range_buckets[b] = []\n        }\n        range_buckets[b].push(data)\n        return range_buckets\n      }\n    }\n    i = this.points.length\n\n    const b = this.last_bucket\n    if (!b) {\n      return range_buckets\n    }\n    if (\n      !range_buckets[b] ||\n      (this.greater_find_least &&\n        range_buckets[b].length &&\n        this.cf(range_buckets[b][0], data) > 0)\n    ) {\n      range_buckets[b] = []\n    }\n    range_buckets[b].push(data)\n    return range_buckets\n  }\n\n  /*\n   * Sort the elements of `array` into buckets and return the result.\n   * @param array - The array to sort.\n   * @returns The populated buckets.\n   */\n  search_array(array: T[]): { [key: string]: T[] } {\n    const range_buckets: { [key: string]: T[] } = {}\n    array.forEach((el) => this.sort(el, range_buckets))\n    return range_buckets\n  }\n}\n\n/**\n * A binary search tree implementation for finding ranges within the tree and\n * finding neighboring nodes.\n * @template T - The type stored in the tree.\n * @template S - The type used by search functions, but that cannot be added to\n * the tree. It defaults to `T`.\n */\nclass Bst<T extends S, S = T> {\n  bst_root: BstNode<T> | undefined = undefined\n  readonly cmp: DualCompareFunction<S>\n\n  /**\n   * @param cmp - The compare function to use to sort the tree.\n   */\n  constructor(cmp: DualCompareFunction<S>) {\n    this.cmp = cmp\n  }\n\n  gteqcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) >= 0\n  }\n  gtcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) > 0\n  }\n  eqcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) === 0\n  }\n\n  /**\n   * Add an element to the tree.\n   * @param object - The object to add to the tree.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  add(object: T, node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')): void {\n    if (!node.value) {\n      node.value = new BstNode(object)\n    } else if (this.gteqcmp(node.value.data, object)) {\n      this.add(object, new MemberPtr(node.value, 'left'))\n    } else {\n      this.add(object, new MemberPtr(node.value, 'right'))\n    }\n  }\n\n  /*\n   * Creates a range search from the local compare function.\n   * @returns A new range search.\n   */\n  create_range_search(): RangeSearch<S> {\n    return new RangeSearch<S>(this.cmp)\n  }\n\n  /*\n   * Efficiently search the BST and sort the applicable nodes into buckets.\n   * @param search - The `RangeSearch` to do\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   * @param map - The object to assign buckets to. It is returned.\n   * @returns An object with type `T` sorted into buckets.\n   */\n  search(\n    search: RangeSearch<S>,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root'),\n    map: { [key: string]: T[] } = {}\n  ): { [key: string]: T[] } {\n    if (!node.value) {\n      return map\n    }\n    const { bucket, right } = search.getBucketInfo(\n      node.value.data,\n      map,\n      true,\n      () => {\n        // Interrupting the sorting into buckets to search the left side of the\n        // tree allows us to look for elements that *might* be smaller, so we\n        // can avoid needlessly searching the right side of the tree\n        this.search(search, new MemberPtr(node.value, 'left'), map)\n      }\n    )\n    if (bucket) {\n      if (!map[bucket]) {\n        map[bucket] = []\n      }\n      map[bucket].push(node.value.data)\n    }\n    if (right) {\n      this.search(search, new MemberPtr(node.value, 'right'), map)\n    }\n    return map\n  }\n\n  /**\n   * A method designed mostly for internal use that finds the next element in\n   * the tree if all of the elements were placed in order.\n   * @param object - The object or search type to find the successor of\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  _getInorderSuccessor(\n    object: S,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): { ptr: BstNodePtr<T>; data: T } | undefined {\n    type SuccessorType = { ptr: BstNodePtr<T>; data: T } | undefined\n    let successor: SuccessorType\n    const setSuccessor = (s: SuccessorType): void => {\n      if (!successor || (s && this.gtcmp(successor.data, s.data))) {\n        successor = s\n      }\n    }\n    if (node.value) {\n      if (this.gteqcmp(node.value.data, object)) {\n        if (node.value.data !== object) {\n          setSuccessor({ ptr: node, data: node.value.data })\n        }\n        setSuccessor(\n          this._getInorderSuccessor(object, new MemberPtr(node.value, 'left'))\n        )\n      }\n      setSuccessor(\n        this._getInorderSuccessor(object, new MemberPtr(node.value, 'right'))\n      )\n    }\n    return successor\n  }\n  /**\n   * Remove an element from the tree.\n   * @param object - The object to remove or a search type that is evaluated\n   * to the same value as an object in the tree. Equivalence is determined\n   * exclusively using the compare function.\n   * @param filter - An optional function that has the final say in whether a\n   * node is removed. While an `object` is provided for quick tree traversal, it\n   * is not always desirable to remove *every* node with that particular value.\n   * This function allows the user to override that behavior.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  remove(\n    object: S,\n    filter: (data: T) => boolean = (): boolean => true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      const result = this.cmp(node.value.data, object)\n      const should_remove = filter(node.value.data)\n      if (result > 0) {\n        this.remove(object, filter, new MemberPtr(node.value, 'left'))\n      } else if (result < 0) {\n        this.remove(object, filter, new MemberPtr(node.value, 'right'))\n      } else {\n        this.remove(object, filter, new MemberPtr(node.value, 'left'))\n        this.remove(object, filter, new MemberPtr(node.value, 'right'))\n      }\n      if (result === 0 && should_remove) {\n        if (node.value.left && node.value.right) {\n          const successor = this._getInorderSuccessor(node.value.data, node)\n\n          this.remove(successor.data, undefined, successor.ptr)\n          node.value.data = successor.data\n        } else {\n          node.value = node.value.left || node.value.right\n        }\n      }\n    }\n  }\n\n  /**\n   * Perform an operation on all of the elements in a range.\n   * @param start - The search type or object at which to start a search.\n   * @param endm1 - The search type or object at which to end a search\n   * inclusively. The name is `endm1` to stand for `END Minus 1` since the\n   * search is performed inclusively.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   * @param undef - TODO: Fix\n   */\n  operateOnAllRange(\n    start: S,\n    endm1: S,\n    operation: NodeOp<T>,\n    node = this.bst_root,\n    undef = false\n  ): void {\n    if (node && !undef) {\n      if (this.gteqcmp(node.data, start)) {\n        if (this.gteqcmp(endm1, node.data)) {\n          this.operateOnAllRange(start, endm1, operation, node.left, !node.left)\n          this.operateOnAllRange(\n            start,\n            endm1,\n            operation,\n            node.right,\n            !node.right\n          )\n          operation(node)\n        } else {\n          this.operateOnAllRange(start, endm1, operation, node.left, !node.left)\n        }\n      } else {\n        this.operateOnAllRange(start, endm1, operation, node.right, !node.right)\n      }\n    }\n  }\n  /**\n   * Perform an operation on all of the elements greater than or equal to a\n   * search type or object.\n   * @param value - The search type or object at which to start a search.\n   * @param sequential - If true, `operation` will be called sequentially. If\n   * false, `operation` will be called for the root node first, then children.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAllGteq(\n    value: S,\n    operation: NodeOp<T>,\n    sequential = true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (this.gteqcmp(node.value.data, value)) {\n        if (!sequential) {\n          operation(node.value)\n        }\n        this.operateOnAllGteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'left')\n        )\n        if (sequential) {\n          operation(node.value)\n        }\n      }\n      this.operateOnAllGteq(\n        value,\n        operation,\n        sequential,\n        new MemberPtr(node.value, 'right')\n      )\n    }\n  }\n  /**\n   * Perform an operation on all of the elements less than or equal to a\n   * search type or object.\n   * @param value - The search type or object at which to end a search.\n   * @param sequential - If true, `operation` will be called sequentially. If\n   * false, `operation` will be called for the root node first, then children.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAllLteq(\n    value: S,\n    operation: NodeOp<T>,\n    sequential = true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (this.gteqcmp(value, node.value.data)) {\n        if (!sequential) {\n          operation(node.value)\n        }\n        this.operateOnAllLteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'left')\n        )\n        if (sequential) {\n          operation(node.value)\n        }\n        this.operateOnAllLteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'right')\n        )\n      } else {\n        this.operateOnAllLteq(\n          value,\n          operation,\n          sequential,\n          new MemberPtr(node.value, 'left')\n        )\n      }\n    }\n  }\n\n  /**\n   * Perform an operation on all nodes.\n   * @param operation - The function to run on each node.\n   * @param sequential - If true, `operation` will be called sequentially. If\n   * false, `operation` will be called for the root node first, then children.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAll(\n    operation: NodeOp<T>,\n    sequential = true,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (!sequential) {\n        operation(node.value)\n      }\n      this.operateOnAll(\n        operation,\n        sequential,\n        new MemberPtr(node.value, 'left')\n      )\n      if (sequential) {\n        operation(node.value)\n      }\n      this.operateOnAll(\n        operation,\n        sequential,\n        new MemberPtr(node.value, 'right')\n      )\n    }\n  }\n\n  /**\n   * Get all the objects in a range.\n   * @param start - The search type or object at which to start a search.\n   * @param endm1 - The search type or object at which to end a search\n   * inclusively. The name is `endm1` to stand for `END Minus 1` since the\n   * search is performed inclusively.\n   */\n  getRange(start: S, endm1: S): (BstNode<T> | undefined)[] {\n    const nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllRange(start, endm1, (n) => nodes.push(n))\n\n    return nodes\n  }\n  /**\n   * Get all the objects greater than or equal to an object or search type.\n   * @param value - The search type or object at which to start a search.\n   */\n  getGteq(value: S): (BstNode<T> | undefined)[] {\n    let nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllGteq(value, (n) => {\n      if (!nodes[0] || this.gtcmp(nodes[0].data, n.data)) {\n        nodes = [n]\n      } else if (this.eqcmp(nodes[0].data, n.data)) {\n        nodes.push(n)\n      }\n    })\n\n    return nodes\n  }\n  /**\n   * Get all the objects less than or equal to an object or search type.\n   * @param value - The search type or object at which to end a search.\n   */\n  getLteq(value: S): (BstNode<T> | undefined)[] {\n    let nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllLteq(value, (n) => {\n      if (!nodes[0] || this.gtcmp(n.data, nodes[0].data)) {\n        nodes = [n]\n      } else if (this.eqcmp(nodes[0].data, n.data)) {\n        nodes.push(n)\n      }\n    })\n\n    return nodes\n  }\n\n  toString(): string {\n    let str = 'BST [\\n'\n    this.operateOnAll(({ data }) => {\n      str +=\n        '  ' +\n        data\n          .toString()\n          .split('\\n')\n          .join('\\n  ') +\n        '\\n'\n    })\n    str += ']'\n    return str\n  }\n}\n\ntype DBstSearchable = { value: number }\nabstract class DBstNode<T extends DBstNode<T>> {\n  parent_node?: T\n  left_node?: T\n  right_node?: T\n\n  constructor(public value: number = 0) {}\n\n  get absolute_value(): number {\n    return this.value + (this.parent_node ? this.parent_node.absolute_value : 0)\n  }\n\n  /**\n   * Order nodes that have the same `value` may be ordered differently using\n   * this function.\n   */\n  abstract preferential_cmp(other: DBstSearchable | T): CompareResult\n\n  addChild(node: T): void {\n    node.value -= this.value\n    if (node.value > 0 || this.preferential_cmp(node) < 0) {\n      if (this.right_node) {\n        this.right_node.addChild(node)\n      } else {\n        this.right_node = node as T\n        // T will always be an instance of DBstNode<T>\n        ;(node as DBstNode<T>).parent_node = (this as unknown) as T\n      }\n    } else {\n      if (this.left_node) {\n        this.left_node.addChild(node)\n      } else {\n        this.left_node = node as T\n        ;(node as DBstNode<T>).parent_node = (this as unknown) as T\n      }\n    }\n  }\n\n  get smallest_child(): T {\n    if (this.left_node) {\n      return this.left_node.smallest_child || this.left_node\n    } else if (this.right_node) {\n      return this.right_node.smallest_child || this.right_node\n    }\n    return undefined\n  }\n  get smallest_smaller_child(): T {\n    if (this.left_node) {\n      return this.left_node.smallest_smaller_child || this.left_node\n    }\n    return undefined\n  }\n  get largest_child(): T {\n    if (this.right_node) {\n      return this.right_node.largest_child || this.right_node\n    } else if (this.left_node) {\n      return this.left_node.largest_child || this.left_node\n    }\n    return undefined\n  }\n  get largest_larger_child(): T {\n    if (this.right_node) {\n      return this.right_node.largest_larger_child || this.right_node\n    }\n    return undefined\n  }\n\n  get inorder_successor(): T {\n    if (this.right_node) {\n      return this.right_node.smallest_smaller_child || this.right_node\n    }\n    let node = (this as undefined) as T\n    while (node) {\n      if (\n        node.value <= 0 &&\n        node.parent_node &&\n        node.parent_node.left_node === node\n      ) {\n        return node.parent_node\n      }\n      node = node.parent_node\n    }\n    return undefined\n  }\n\n  replaceWith(data: T): T {\n    if (data) {\n      data.value = data.value - this.absolute_value + this.value\n    }\n    if (this.parent_node) {\n      if (this.value <= 0) {\n        this.parent_node.left_node = data\n      } else {\n        this.parent_node.right_node = data\n      }\n      if (data) {\n        if (data.parent_node) {\n          if (data.parent_node.left_node === data) {\n            delete data.parent_node.left_node\n          } else if (data.parent_node.right_node === data) {\n            delete data.parent_node.right_node\n          }\n          delete data.parent_node\n        }\n        data.parent_node = this.parent_node\n      }\n    }\n\n    if (data && this.left_node && this.left_node !== data) {\n      data.left_node = this.left_node\n      data.left_node.parent_node = data\n      data.left_node.value += this.value - data.value\n    }\n    if (data && this.right_node && this.right_node !== data) {\n      data.right_node = this.right_node\n      data.right_node.parent_node = data\n      data.right_node.value += this.value - data.value\n    }\n\n    delete this.parent_node\n    delete this.right_node\n    delete this.left_node\n\n    return (this as unknown) as T\n  }\n\n  removeChild(\n    value: number,\n    filter: (data: T) => boolean = (): boolean => true,\n    vals: T[] = [],\n    parentUpdate: (np: T) => void = (): void => undefined\n  ): T[] {\n    const tryRmLeft = (): void => {\n      if (this.left_node) {\n        this.left_node.removeChild(value - this.left_node.value, filter, vals)\n      }\n    }\n    const tryRmRight = (): void => {\n      if (this.right_node) {\n        this.right_node.removeChild(value - this.right_node.value, filter, vals)\n      }\n    }\n    if (value <= 0) {\n      tryRmLeft()\n    } else if (value > 0) {\n      tryRmRight()\n    }\n    if (value === 0 && filter((this as unknown) as T)) {\n      vals.push((this as unknown) as T)\n      let cnode: T\n      if (this.right_node && this.left_node) {\n        cnode = this.inorder_successor\n\n        // Keep the value here while we remove (`removeChild` needs the tree to\n        // be preserved)\n        const absval = cnode.absolute_value\n        cnode.parent_node.removeChild(cnode.value, (n) => n === cnode)\n        cnode.value = absval\n      } else if (this.right_node) {\n        cnode = this.right_node\n        cnode.value = cnode.absolute_value\n      } else if (this.left_node) {\n        cnode = this.left_node\n        cnode.value = cnode.absolute_value\n      } else {\n        cnode = undefined\n      }\n      this.replaceWith(cnode)\n      parentUpdate(cnode)\n    }\n    return vals\n  }\n\n  addSpaceBefore(s: number): void {\n    let next = (this as unknown) as T\n    let cumulative = 0\n    while (next) {\n      // Increment `next` value if it's greater than `this`\n      if (cumulative >= 0 && this.preferential_cmp(next) <= 0) {\n        cumulative -= next.value\n        next.value += s\n        // Ensure that the left node's position is not changed\n        if (next.left_node) {\n          next.left_node.value -= s\n        }\n      } else {\n        cumulative -= next.value\n      }\n      next = next.parent_node\n    }\n  }\n\n  search(s: TypeRangeSearch<number, T>, cval: number): void {\n    cval += this.value\n    ;(s.range as NumberRange).push_offset(-this.value)\n\n    const traverse_left = (): void => {\n      this.left_node.search(s, cval)\n    }\n    const traverse_right = (): void => {\n      this.right_node.search(s, cval)\n    }\n\n    const sec = s.range.getRangeSection(0)\n    if (sec < 0) {\n      // We're under the target range...\n\n      // Try assigning this to a bucket (if the current value is greater, this)\n      // will be ignored.\n      s.setBucket('lesser', cval, (this as unknown) as T)\n      // Always traverse right since it could be greater\n      if (this.right_node) {\n        traverse_right()\n      }\n      // Traverse left if the left node is equal (zero offset)\n      if (this.left_node && this.left_node.value === 0) {\n        traverse_left()\n      }\n    } else if (sec > 0) {\n      // We're above the target range...\n\n      // The same as above, but with the `greater` bucket\n      s.setBucket('greater', cval, (this as unknown) as T)\n      // Always try to find a smaller node\n      if (this.left_node) {\n        traverse_left()\n      }\n    } else {\n      // We're in the target range...\n\n      s.addToBucket('range', cval, (this as unknown) as T)\n      // Now, we have to traverse left **and** right\n      if (this.left_node) {\n        traverse_left()\n      }\n      if (this.right_node) {\n        traverse_right()\n      }\n    }\n\n    ;(s.range as NumberRange).pop_offset(-this.value)\n  }\n\n  operateOnAll(cb: (data: T) => void): void {\n    if (this.left_node) {\n      this.left_node.operateOnAll(cb)\n    }\n    cb((this as unknown) as T)\n    if (this.right_node) {\n      this.right_node.operateOnAll(cb)\n    }\n  }\n}\n\nclass DBst<T extends DBstNode<T>> {\n  bst_root?: T = undefined\n\n  add(node: T): T {\n    if (!this.bst_root) {\n      this.bst_root = node\n    } else {\n      this.bst_root.addChild(node)\n    }\n    return node\n  }\n  remove(\n    value: number,\n    filter: (data: T) => boolean = (): boolean => true\n  ): T[] {\n    const vals: T[] = []\n    if (this.bst_root) {\n      this.bst_root.removeChild(\n        value - this.bst_root.value,\n        filter,\n        vals,\n        (p: T) => {\n          this.bst_root = p\n        }\n      )\n    }\n    return vals\n  }\n  search(range: NumberRange): TypeRangeSearch<number, T> {\n    const search = new TypeRangeSearch<number, T>(range)\n    if (this.bst_root) {\n      this.bst_root.search(search, 0)\n    }\n    return search\n  }\n\n  operateOnAll(cb: (data: T) => void): void {\n    if (this.bst_root) {\n      this.bst_root.operateOnAll(cb)\n    }\n  }\n\n  toString(): string {\n    let str = 'DBST [\\n'\n    this.operateOnAll((data) => {\n      str +=\n        '  ' +\n        data\n          .toString()\n          .split('\\n')\n          .join('\\n  ') +\n        '\\n'\n    })\n    str += ']'\n    return str\n  }\n}\n\nexport { Bst, RangeSearch, BstNode, DBst, DBstSearchable, DBstNode }\n","/**\n * @file This file imports the ListDocumentModel and defines event handling\n * systems.\n * @TODO Move event abstraction layer here\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport {\n  ListDocumentModel,\n  LogootInt,\n  LogootPosition,\n  NodeType\n} from './listmodel'\n\nenum EventState {\n  /**\n   * Not being actively sent and can be modified.\n   */\n  PENDING,\n  /**\n   * In transit. Cannot be modified.\n   */\n  SENDING,\n  /**\n   * Already sent. Also cannot be modified.\n   */\n  COMPLETE\n}\n\n/**\n * Generic event interface.\n */\ninterface LogootishEvent {\n  state: EventState\n  readonly type: string\n  // eslint-disable-next-line\n  toJSON(): any\n}\n\nexport { EventState, ListDocumentModel, LogootInt, LogootPosition, NodeType }\n","/**\n * @file This file contains the bulky position manipulation logic for any list-\n * based CRDT (arrays, text, rich text, etc.)\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { NumberRange, RangeBounds } from '../compare'\nimport { FatalError, allValues, BreakException, catchBreak } from '../utils'\nimport { Bst, DBst } from '../bst'\n\nimport {\n  LogootInt,\n  LogootPosition,\n  NodeType,\n  ConflictGroup,\n  LogootNodeGroup,\n  BranchKey\n} from './logoot'\n\nimport { debug } from '../debug'\n\ntype KnownPositionBst = DBst<ConflictGroup>\ntype LogootBst = Bst<LogootNodeGroup, { start: LogootPosition }>\n\n/**\n * A Logoot removal.\n */\ntype Removal = {\n  branch: BranchKey\n  start: LogootPosition\n  length: number\n  rclk: LogootInt\n}\n\ntype RemovalOperation = {\n  type: 'r'\n  start: number\n  length: number\n}\ntype InsertionOperation = {\n  type: 'i'\n  start: number\n  offset: number\n  length: number\n}\ntype TranslationOperation = {\n  type: 't'\n  source: number\n  length: number\n  dest: number\n}\ntype MarkOperation = {\n  type: 'm'\n  start: number\n  length: number\n  conflicting: boolean\n}\n/**\n * An operation returned by `_mergeNode` to be run on the local document.\n */\ntype Operation =\n  | RemovalOperation\n  | InsertionOperation\n  | TranslationOperation\n  | MarkOperation\n\n/**\n * An error thrown when an insertion is attempted at the boundary between two\n * branches that are not the one in the active document.\n */\nclass InsertionConflictError extends Error {}\n\n/**\n * A function that determines if two `LogootNodeGroup`s should be in the same\n * `ConflictGroup`. The two arguments must be in order.\n * @param a - The first `LogootNodeGroup`\n * @param b - The second `LogootNodeGroup`\n * @returns True if the two groups can be joined.\n */\ntype JoinFunction = (a: LogootNodeGroup, b: LogootNodeGroup) => boolean\n/**\n * A `JoinFunction` that joins two nodes if they have the same branches that are\n * in conflict.\n */\nconst MinimalJoinFunction = (\n  a: LogootNodeGroup,\n  b: LogootNodeGroup\n): boolean => {\n  if (a.branches.filter((br) => !b.br(br)).length) {\n    return false\n  }\n  if (b.branches.filter((br) => !a.br(br)).length) {\n    return false\n  }\n  return true\n}\n\n/**\n * A representation of the Logootish Document Model for mapping \"real,\"\n * continuous `known_position`s to Logoot positions. This is useful when working\n * with strings, arrays, or, just in general, anything that needs a fixed order.\n * This does not actually store the data in question, but stores a mapping of\n * real indices in the data to the Logoot positions of that element. This is\n * used to transform edits between ones in the Logoot and local position spaces.\n * One important thing to note: Logoot edits (insertions/removals) can be\n * applied in any order. Local edits **must** be applied in a consistent order.\n */\nclass ListDocumentModel {\n  /**\n   * The BST maps out where all insertion nodes are in the local document's\n   * memory. It is used to go from position -> node\n   */\n  ldoc_bst: KnownPositionBst = new DBst()\n  /**\n   * This BST maps Logoot position identifiers to their text node to allow\n   * lookup of text position from Logoot ID\n   */\n  logoot_bst: LogootBst = new Bst((a, b) => a.start.cmp(b.start))\n  /** A map of removals that do not yet have text to remove */\n  // removal_bst: LogootBst = new Bst((a, b) => a.start.cmp(b.start))\n  /**\n   * This is a Lamport clock. A proper vector clock would have too many entries\n   * for large, multi-user documents.\n   * See the Logoot paper for why. Unlike the Logoot implementation, this is\n   * incremented with each removal only and is kept constant with insertions.\n   */\n  clock = new LogootInt()\n  branch: BranchKey\n\n  /**\n   * An optional instance of the `ListDocumentModel.Logger` class to log all\n   * operations that modify the BST (all calls to `_mergeNode`) to help with\n   * bug identification when applicable.\n   */\n  debug_logger?: ListDocumentModel.Logger\n\n  canJoin: JoinFunction\n\n  constructor(branch: BranchKey, jf: JoinFunction = MinimalJoinFunction) {\n    this.branch = branch\n    this.canJoin = jf\n  }\n\n  /**\n   * The goal of this method is to find the Logoot position corresponding to a\n   * particular local position. Unlike the old version, this does **not**\n   * actually record the insertion. The output of this must be passed in to\n   * `insertLogoot` for that to happen. This provides greater flexibility for\n   * the programmer. All insertions will be determined on the `branch` variable\n   * of this class. This means that if this funcion is called and the start\n   * position is in between two atoms, the first on `branch` and the second not,\n   * the resulting order will leave the new atom after the first atom, but *not\n   * necessarily* after the second atom since conflicts allow atoms to appear\n   * out of their Logoot order. However, if an insertion is attempted between\n   * two atoms on branches that are not `branch`, then it will not be possible\n   * to determine where the resulting node should go. A `InsertionConflictError`\n   * will be thrown. UI should respond to this by informing the user to resolve\n   * the conflict first.\n   * @param start - The position of the insertion\n   * @param length - The length of the insertion\n   * @returns An object containing `start` (a LogootPosition), `length`, `br`\n   * (just `this.branch`), and `rclk` (just `this.clock`). The `start` value is\n   * the only one that is actually calculated. The others are returned for\n   * convenience.\n   */\n  insertLocal(\n    start: number,\n    length: number\n  ): {\n    start: LogootPosition\n    length: number\n    br: BranchKey\n    rclk: LogootInt\n  } {\n    // Search:\n    // n < start   -> _lesser\n    // start <= n  -> _greater\n    const { buckets } = this.ldoc_bst.search(\n      new NumberRange(start, start, RangeBounds.LOGO)\n    )\n\n    let lesser: ConflictGroup\n    let greater: ConflictGroup\n    if (buckets.lesser && buckets.lesser.length) {\n      // The earliest one will not be a only a removal if nodes are ordered\n      // properly. We can ignore the removals in between\n      lesser = buckets.lesser\n        .map(([, cg]) => cg)\n        .sort((a, b) => a.logoot_start.cmp(b.logoot_start))[0]\n    }\n    if (buckets.greater && buckets.greater.length) {\n      // Now grab the last element...\n      greater = buckets.greater\n        .map(([, cg]) => cg)\n        .sort((a, b) => b.logoot_start.cmp(a.logoot_start))[0]\n    }\n\n    let before_position\n    let after_position\n\n    const lesser_length = lesser ? lesser.ldoc_length : 0\n    if (lesser && lesser.known_position + lesser_length === start) {\n      // Between two CGs...\n      if (\n        greater &&\n        lesser.last_branch === greater.first_branch &&\n        lesser.last_branch !== this.branch\n      ) {\n        // If we're between two CGs and they both are on the same branch, it's\n        // impossible to tell on which the insertion should be made\n        throw new InsertionConflictError()\n      }\n      before_position = lesser.logoot_end\n      after_position = greater ? greater.logoot_start : undefined\n    } else if (lesser) {\n      ;((): void => {\n        let remaining_length = start - lesser.known_position\n        if (lesser.branch_order.indexOf(this.branch) < 0) {\n          remaining_length -= lesser.ldoc_length\n        } else {\n          remaining_length -= lesser.branchLength(\n            lesser.branch_order.slice(\n              0,\n              lesser.branch_order.indexOf(this.branch)\n            )\n          )\n        }\n        if (remaining_length < 0) {\n          throw new FatalError('Search returned out of order nodes')\n        }\n        if (remaining_length === 0) {\n          // We're at the left end here, so we have to look up *another* lesser\n          // Search:\n          // n < lesser.known_position   -> _lesser\n          // lesser.known_position <= n  -x\n          // TODO: Don't find `greater`. Maybe make a range that ignores one\n          // bound?\n          // TODO: What about the case where two CGs have the same start\n          // position?\n          const { buckets } = this.ldoc_bst.search(\n            new NumberRange(\n              lesser.known_position,\n              lesser.known_position,\n              RangeBounds.LOGC\n            )\n          )\n\n          let most_lesser\n          if (buckets.lesser && buckets.lesser.length) {\n            most_lesser = buckets.lesser\n              .map(([, cg]) => cg)\n              .sort((a, b) => a.logoot_start.cmp(b.logoot_start))[0]\n          }\n          // Now, go in between the two nodes just as we would've above\n          before_position = most_lesser.logoot_end\n          after_position = lesser.logoot_start\n          return\n        }\n\n        // So, we're not at the start. Find a good position\n        for (let i = 0; i < lesser.groups.length; i++) {\n          const { end } = lesser.groups[i]\n          remaining_length -= lesser.groups[i].branchLength([this.branch])\n\n          if (remaining_length < 0) {\n            before_position = after_position = end.inverseOffsetLowest(\n              -remaining_length\n            )\n            return\n          } else if (remaining_length === 0) {\n            before_position = end\n            after_position = lesser.groups[i + 1]\n              ? lesser.groups[i + 1].start\n              : greater\n              ? greater.logoot_start\n              : undefined\n            return\n          }\n        }\n        // We must be in between two branches that are not ours\n        throw new InsertionConflictError()\n      })()\n    } else if (greater) {\n      after_position = greater.logoot_start\n    }\n\n    return {\n      start: new LogootPosition(length, before_position, after_position),\n      length,\n      br: this.branch,\n      rclk: this.clock\n    }\n  }\n\n  /**\n   * Finds the sets of Logoot positions in a certain real text range. This is\n   * used to find the removal operations to perform, but it does **not**\n   * actually record the updates, just like `insertLocal`.\n   * @param start - The position to start removing, inclusive.\n   * @param length - The length of the removal\n   * @returns - An object containing an array of `removals`. Each removal has a\n   * `start` LogootPosition, a numeric `length`, a `branch` (which is a\n   * BranchKey), and a `rclk` vector clock value.\n   */\n  removeLocal(start: number, length: number): { removals: Removal[] } {\n    // Search:\n    // n < start   -> _lesser\n    // start <= n  -> _greater\n    const { buckets } = this.ldoc_bst.search(\n      new NumberRange(start, start + length, RangeBounds.LOGC)\n    )\n\n    const nodes = buckets.range.map(([, cg]) => cg)\n    if (buckets.lesser && buckets.lesser.length) {\n      // The earliest one will not be a only a removal if nodes are ordered\n      // properly. We can ignore the removals in between\n      const l = buckets.lesser\n        .map(([, cg]) => cg)\n        .sort((a, b) => a.logoot_start.cmp(b.logoot_start))[0]\n      if (l.ldoc_end > start) {\n        nodes.unshift(l)\n      }\n    }\n\n    const removal_sets: { [key: string]: { [key: number]: Removal[] } } = {}\n    function onRemoval(\n      br: BranchKey,\n      start: LogootPosition,\n      len: number,\n      rclk: LogootInt\n    ): void {\n      if (len <= 0) {\n        return\n      }\n      if (!removal_sets[(br as unknown) as string]) {\n        removal_sets[(br as unknown) as string] = {}\n      }\n      const branch_removals = removal_sets[(br as unknown) as string]\n\n      if (!branch_removals[start.levels]) {\n        branch_removals[start.levels] = []\n      }\n      const depth_removals = branch_removals[start.levels]\n      const last_removal = depth_removals[depth_removals.length - 1]\n\n      if (\n        last_removal &&\n        last_removal.branch === br &&\n        last_removal.start.offsetLowest(last_removal.length).cmp(start) === 0 &&\n        last_removal.rclk.cmp(rclk) === 0\n      ) {\n        last_removal.length += len\n      } else {\n        depth_removals.push({ branch: br, start, length: len, rclk })\n      }\n    }\n\n    let remaining_length = start + length - nodes[0].known_position\n    // TODO: This is *really* inefficient for obvious reasons\n    catchBreak(() =>\n      nodes.forEach((cg) => {\n        cg.branch_order.forEach((br) => {\n          cg.groups.forEach((group) => {\n            if (!group.br(br)) {\n              return\n            }\n            let { start, length: rlen } = group\n            const { type, rclk } = group.br(br)\n\n            if (type === NodeType.DATA) {\n              if (remaining_length > length) {\n                start = start.offsetLowest(remaining_length - length)\n                rlen -= remaining_length - length\n              }\n              onRemoval(br, start, Math.min(rlen, remaining_length), rclk)\n              remaining_length -= group.length\n            }\n            if (remaining_length <= 0) {\n              throw BreakException\n            }\n          })\n        })\n      })\n    )\n\n    const removals: Removal[] = []\n    allValues(removal_sets).forEach((branch_set) => {\n      Object.entries(branch_set).forEach(([, depth_set]) => {\n        depth_set.forEach((o) => removals.push(o))\n      })\n    })\n\n    return { removals }\n  }\n\n  /**\n   * This is the most important method in the `ListDocumentModel`. This method\n   * adds atoms to the BSTs. By consequence, it replaces nodes and generates\n   * conflicts as necessary to add the node to the BST. **Users should never\n   * call this function directly.**\n   * @param br - The branch to insert on\n   * @param nstart - The start Logoot position of the insertion\n   * @param length - The length of the insertion\n   * @param nrclk - The clock value for the insertion\n   * @param type - The type of node to add. Anything other than data will result\n   * in data being removed if it conflicts on the same branch\n   * @param canJoin - A `JoinFunction` to determine if two node groups should\n   * be joined together in the same conflict group\n   */\n  _mergeNode(\n    br: BranchKey,\n    nstart: LogootPosition,\n    length: number,\n    nrclk: LogootInt,\n    type: NodeType,\n    canJoin: JoinFunction\n  ): Operation[] {\n    if (this.debug_logger) {\n      this.debug_logger.log({\n        br,\n        start: nstart,\n        length,\n        rclk: nrclk,\n        type\n      })\n    }\n\n    debug.info(`Merging ${type} ${String(br)} ${nstart} + ${length} @ ${nrclk}`)\n\n    const level = nstart.levels\n    const nend = nstart.offsetLowest(length)\n\n    if (this.clock.cmp(nrclk) < 0) {\n      this.clock.assign(nrclk)\n    }\n\n    // Search:\n    // n < nstart          -> _lesser\n    // nstart <= n < nend  -> _skip_ranges\n    // nend <= n           -> _greater\n    const range_search = this.logoot_bst.create_range_search()\n    range_search.lesser_find_greatest = true\n    range_search.greater_find_least = true\n    range_search.push_point({ start: nstart }, '_lesser', false)\n    range_search.push_point({ start: nend }, '_skip_ranges', false)\n    range_search.all_greater('_greater')\n    const { _lesser, _skip_ranges, _greater } = this.logoot_bst.search(\n      range_search\n    )\n\n    let lesser\n    let greater\n    if (_lesser && _lesser.length > 1) {\n      throw new FatalError(\n        'Corrupt BST. There are multiple nodes at a position.'\n      )\n    } else if (_lesser && _lesser.length) {\n      lesser = _lesser[0]\n    }\n    if (_greater && _greater.length > 1) {\n      throw new FatalError(\n        'Corrupt BST. There are multiple nodes at a position.'\n      )\n    } else if (_greater && _greater.length) {\n      greater = _greater[0]\n    }\n    let skip_ranges = _skip_ranges\n      ? _skip_ranges.sort((a, b) => a.start.cmp(b.start))\n      : []\n\n    if (lesser && skip_ranges.includes(lesser)) {\n      skip_ranges.splice(skip_ranges.indexOf(lesser), 1)\n    }\n    if (greater && skip_ranges.includes(greater)) {\n      skip_ranges.splice(skip_ranges.indexOf(greater), 1)\n    }\n    if (lesser) {\n      skip_ranges.unshift(lesser)\n    }\n    // Split lesser if there's no way that it will conflict (which will be if\n    // it's on a higher level)\n    if (\n      lesser &&\n      lesser.start.levels < level &&\n      lesser.start.cmp(nstart) < 0 &&\n      lesser.end.cmp(nend) > 0\n    ) {\n      const split_pos = nstart\n        .copy()\n        .level(lesser.start.levels)\n        .sub(lesser.start.level(lesser.start.levels)).js_int\n      if (split_pos > 0 && split_pos < lesser.length) {\n        const lesser_end = lesser.splitAround(split_pos)\n        skip_ranges.push(lesser_end)\n        this.logoot_bst.add(lesser_end)\n      }\n    }\n    if (greater && !skip_ranges.includes(greater)) {\n      skip_ranges.push(greater)\n    }\n\n    // Keep track of all the conflict groups we're automatically modifying\n    let conflict_order: ConflictGroup[] = []\n    if (skip_ranges.length) {\n      const ke = skip_ranges[skip_ranges.length - 1].group.ldoc_end\n\n      conflict_order = this.ldoc_bst\n        .search(new NumberRange(skip_ranges[0].group.known_position, ke))\n        .buckets.range.sort((a, b) => a[0] - b[0])\n        .map(([, cg]) => cg)\n    }\n\n    // Nodes on higher levels do not matter in our collision search, only in the\n    // sorting done by the BSTs. Lower levels matter since we must skip them.\n    // HOWEVER, we do need a greater node so that the algorithm will detect the\n    // next CG and (maybe) join into it\n    // TODO: Maybe a better search algo could come up with a pre-filtered\n    // `skip_ranges` for me\n    skip_ranges = skip_ranges.filter(\n      ({ start }) => start.levels >= level || start.cmp(nend) >= 0\n    )\n\n    // Ensure that there's something at the end of the list so that it will\n    // always run regardless and if there are nodes, that there is always a node\n    // last in the array at the end position\n    if (\n      !skip_ranges.length ||\n      skip_ranges[skip_ranges.length - 1].start.cmp(nend) < 0\n    ) {\n      const vgroup = new LogootNodeGroup()\n      vgroup.start = nend\n      skip_ranges.push(vgroup)\n    }\n\n    /* const original_known_end = conflict_order.length\n      ? conflict_order[conflict_order.length - 1].ldoc_end\n      : 0 */\n\n    // Track all the operations that have been performed and the offset that\n    // should be placed on nodes after this one. This will modify the nodes\n    // in `conflict_order`\n    const operations: Operation[] = []\n    const remove = (cg: ConflictGroup, start: number, length: number): void => {\n      if (length === 0) {\n        return\n      }\n      operations.push({\n        type: 'r',\n        start,\n        length\n      })\n      const successor = cg.inorder_successor\n      if (successor) {\n        successor.addSpaceBefore(-length)\n      }\n    }\n    const insert = (\n      cg: ConflictGroup,\n      start: number,\n      offset: number,\n      length: number\n    ): void => {\n      if (length === 0) {\n        return\n      }\n      operations.push({\n        type: 'i',\n        start,\n        offset,\n        length\n      })\n      const successor = cg.inorder_successor\n      if (successor) {\n        successor.addSpaceBefore(length)\n      }\n    }\n    const translate = (source: number, length: number, dest: number): void => {\n      if (length === 0) {\n        return\n      }\n      if (source === dest) {\n        return\n      }\n      operations.push({ type: 't', source, length, dest })\n    }\n    const mark = (\n      start: number,\n      length: number,\n      conflicting: boolean\n    ): void => {\n      if (length === 0) {\n        return\n      }\n      operations.push({ type: 'm', start, length, conflicting })\n    }\n\n    // Split a conflict group and translate the child nodes\n    const splitCg = (cg: ConflictGroup, ng: LogootNodeGroup): ConflictGroup => {\n      if (!cg.groups.includes(ng)) {\n        throw new FatalError('Node group not in conflict group.')\n      }\n      if (!conflict_order.includes(cg)) {\n        throw new FatalError('Conflict group not in conflict_order')\n      }\n\n      // New Conflict Group -- Ok, my naming is bad here lol\n      const ncg = new ConflictGroup(cg.ldoc_end)\n\n      let known_position = cg.known_position\n      const known_end = ncg.known_position\n      cg.branch_order.forEach((br) => {\n        // Calculate the area ahead of the known_position that isn't moved\n        const excerpt_length = ((): number => {\n          let origin = 0\n          for (let i = 0; i < cg.groups.length; i++) {\n            origin += cg.groups[i].branchLength([br])\n            if (cg.groups[i] === ng) {\n              return origin\n            }\n          }\n          // This should never happen\n          throw new FatalError()\n        })()\n\n        ncg.branch_order.push(br)\n\n        const moved_length = cg.branchLength([br]) - excerpt_length\n\n        ncg.value -= moved_length\n        known_position += excerpt_length\n        translate(known_position, moved_length, known_end - moved_length)\n      })\n\n      ncg.groups = cg.groups.splice(cg.groups.indexOf(ng) + 1, cg.groups.length)\n      ncg.groups.forEach((group) => (group.group = ncg))\n\n      this.ldoc_bst.add(ncg)\n      conflict_order.splice(conflict_order.indexOf(cg) + 1, 0, ncg)\n\n      return ncg\n    }\n    // Join a conflict group and translate the child nodes\n    const joinCg = (lcg: ConflictGroup, ncg: ConflictGroup): void => {\n      ncg.branch_order.forEach((br) => {\n        if (!lcg.branch_order.includes(br)) {\n          lcg.branch_order.push(br)\n        }\n      })\n\n      ncg.groups.forEach((group) => (group.group = lcg))\n      lcg.groups.splice(lcg.groups.length, 0, ...ncg.groups)\n\n      let fetch_position = ncg.known_position\n      let known_position = lcg.known_position\n      ncg.branch_order.forEach((br) => {\n        known_position += lcg.branchLength([br])\n        const next_length = ncg.branchLength([br])\n        translate(fetch_position, next_length, known_position - next_length)\n        fetch_position += next_length\n      })\n\n      ncg.branch_order.length = 0\n      ncg.groups = []\n      // Ensure that we remove **only** this node from the BST\n      this.ldoc_bst.remove(ncg.known_position, (other) => other === ncg)\n      conflict_order.splice(conflict_order.indexOf(ncg), 1)\n    }\n\n    let last_start = nstart.level(level)\n    let last_group = lesser\n    skip_ranges.forEach((group, i) => {\n      // Can be reassigned when nodes are split\n      let next_group = skip_ranges[i + 1]\n\n      const group_level_start = group.start.clamp(nstart, nend, level).l(level)\n      const group_level_end = group.end.clamp(nstart, nend, level).l(level)\n\n      const empty_length = group_level_start.copy().sub(last_start).js_int\n      const empty_offset = last_start.copy().sub(nstart.l(level)).js_int\n\n      // First, add a new group to the empty space (if there is any)\n      if (\n        empty_length > 0 ||\n        // If the next node has fewer levels, the empty space is *technically*\n        // infinite, but empty_length won't show this\n        (group.start.levels < level &&\n          length - empty_offset > 0 &&\n          group.start.cmp(nstart) > 0 &&\n          last_start.cmp(nstart.l(level)) < 0)\n      ) {\n        const newgroup = new LogootNodeGroup()\n        newgroup.start = nstart.copy()\n        newgroup.start.l(level).assign(last_start)\n        newgroup.length = empty_length || length - empty_offset\n        newgroup.br(br, { type, rclk: nrclk })\n        debug.info(`Creating new group at ${newgroup.start.toString()}`)\n\n        // Now, we actually insert the node where it should be according to the\n        // node canJoin function\n        // First, check if we can join with the two nodes flanking this one\n        // Remember, we're operating BEFORE `group`\n        const last_join = last_group && canJoin(last_group, newgroup)\n        const next_join = group && canJoin(newgroup, group)\n        const already_joined =\n          last_group && group && last_group.group === group.group\n\n        if (!already_joined && last_join && next_join) {\n          // Join last and next\n          joinCg(last_group.group, group.group)\n        } else if (already_joined && !(last_join && next_join)) {\n          // Split last and next\n          splitCg(last_group.group, last_group)\n        }\n\n        if (!last_join && !next_join) {\n          // Ok, so now we need to create a new conflict group\n          newgroup.group = new ConflictGroup(\n            last_group ? last_group.group.ldoc_end : 0\n          )\n          newgroup.group.branch_order.push(br)\n\n          conflict_order.splice(\n            last_group ? conflict_order.indexOf(last_group.group) + 1 : 0,\n            0,\n            newgroup.group\n          )\n        } else {\n          // Now, make sure we have a target group\n          newgroup.group = last_join ? last_group.group : group.group\n        }\n\n        if (type === NodeType.DATA) {\n          const ipos = newgroup.group.insertSingleBranchGroup(newgroup)\n          if (!last_join && !next_join) {\n            this.ldoc_bst.add(newgroup.group)\n          }\n          insert(newgroup.group, ipos, empty_offset, newgroup.length)\n        } else {\n          newgroup.group.insertSingleBranchGroup(newgroup)\n          if (!last_join && !next_join) {\n            this.ldoc_bst.add(newgroup.group)\n          }\n        }\n\n        last_group = newgroup\n        this.logoot_bst.add(newgroup)\n      }\n\n      const group_length = group_level_end.copy().sub(group_level_start).js_int\n      const group_offset = group_level_start.copy().sub(nstart.l(level)).js_int\n      // Now, add the new node to the existing group\n      if (\n        group.start.levels === level &&\n        group_length > 0 &&\n        (!group.br(br) ||\n          // Data nodes have the lowest priority\n          nrclk.cmp(group.br(br).rclk) > (type === NodeType.DATA ? 0 : -1))\n      ) {\n        // Split off the trailing start\n        if (group.start.cmp(nstart) < 0) {\n          last_group = group\n          group = group.splitAround(\n            nstart.l(level).sub(group.start.l(level)).js_int\n          )\n          this.logoot_bst.add(group)\n        }\n        // Split off the trailing end\n        if (group.end.cmp(nend) > 0) {\n          const newgroup = group.splitAround(\n            group.length - group.end.l(level).sub(nend.l(level)).js_int\n          )\n          this.logoot_bst.add(newgroup)\n          next_group = newgroup\n        }\n        debug.info(`Adding to existing group at ${group.start.toString()}`)\n\n        // Ensure that this group is in the branch order\n        if (!group.group.branch_order.includes(br)) {\n          group.group.branch_order.push(br)\n        }\n\n        // Now, capture this node's target position\n        const known_position = group.group.insertPos(br, group)\n        // Remove old conflicts\n        if (group.br(br) && group.br(br).type === NodeType.DATA) {\n          remove(group.group, known_position, group.length)\n        }\n        // Ensure the new data is correct\n        group.br(br, { type, rclk: nrclk })\n        // Add new data\n        if (type === NodeType.DATA) {\n          insert(group.group, known_position, group_offset, group.length)\n        }\n\n        const fixJoined = (a: LogootNodeGroup, b: LogootNodeGroup): void => {\n          if (!a || !b) {\n            return\n          }\n          const joined = a.group === b.group\n          const should_join = canJoin(a, b)\n          if (!joined && should_join) {\n            joinCg(a.group, b.group)\n          } else if (joined && !should_join) {\n            // The BST allows chaning of the `known_position` after adding a\n            // node, **so long as the nodes are in the same order.** Since not\n            // all node positions have been updated, we cannot add the node with\n            // the pre-incremented position\n            splitCg(a.group, a)\n          }\n        }\n\n        // Double check that these nodes still should be joined\n        fixJoined(last_group, group)\n        fixJoined(group, next_group)\n      }\n\n      last_start = group.end.clamp(nstart, nend, level).level(level)\n      last_group = group\n    })\n\n    // TODO: Actually figure out which CGs have changed state\n    conflict_order.forEach(({ known_position, ldoc_length, conflicted }) => {\n      mark(known_position, ldoc_length, conflicted)\n    })\n\n    return operations\n  }\n\n  insertLogoot(\n    br: BranchKey,\n    start: LogootPosition,\n    length: number,\n    rclk: LogootInt\n  ): Operation[] {\n    return this._mergeNode(br, start, length, rclk, NodeType.DATA, this.canJoin)\n  }\n\n  removeLogoot(\n    br: BranchKey,\n    start: LogootPosition,\n    length: number,\n    rclk: LogootInt\n  ): Operation[] {\n    return this._mergeNode(\n      br,\n      start,\n      length,\n      rclk,\n      NodeType.REMOVAL,\n      this.canJoin\n    )\n  }\n\n  /**\n   * An extremely expensive operation that scans the BSTs for obvious signs of\n   * corruption (empty CGs, non-continuous ldoc, out-of-order ldoc, etc.)\n   * @throws {FatalError} If any corruption detected\n   */\n  selfTest(): void {\n    let last_pos: LogootPosition\n    let last_kp = 0\n    this.ldoc_bst.operateOnAll((data) => {\n      if (!data.groups.length) {\n        throw new FatalError('Node with no groups detected.')\n      }\n      if (data.known_position !== last_kp) {\n        throw new Error(\n          `Ldoc is out of order. Found known position ${data.known_position} after ${last_kp}`\n        )\n      }\n      last_kp = data.ldoc_end\n      data.groups.forEach(({ start }) => {\n        if (last_pos && last_pos.cmp(start) >= 0) {\n          throw new FatalError(\n            `Ldoc is out of order. Found ${start.toString()} after ${last_pos.toString()}.`\n          )\n        }\n        last_pos = start\n      })\n    })\n  }\n}\n\nnamespace ListDocumentModel {\n  export type LogOperation = {\n    br: BranchKey\n    start: LogootPosition\n    length: number\n    rclk: LogootInt\n    type: NodeType\n  }\n  export interface Logger {\n    log(op: LogOperation): void\n    replayAll(\n      ldm: ListDocumentModel,\n      post?: (ldm: ListDocumentModel) => void\n    ): void\n  }\n  export class JsonableLogger implements Logger {\n    ops: LogOperation[] = []\n    log(op: LogOperation): void {\n      this.ops.push(op)\n    }\n    replayAll(\n      ldm: ListDocumentModel,\n      post: (\n        ldm: ListDocumentModel,\n        logop: LogOperation,\n        newops: Operation[]\n      ) => void = (): void => undefined\n    ): Operation[] {\n      let ops: Operation[] = []\n      let newops: Operation[]\n      this.ops.forEach((o) => {\n        newops = ldm._mergeNode(\n          o.br,\n          o.start,\n          o.length,\n          o.rclk,\n          o.type,\n          ldm.canJoin\n        )\n        ops = ops.concat(newops)\n        post(ldm, o, newops)\n      })\n      return ops\n    }\n\n    restoreFromJSON(j: JsonableLogger.JSON[]): JsonableLogger {\n      this.ops = j.map((o) => ({\n        br: `BR[${o.b.toString(16)}]`,\n        start: LogootPosition.fromJSON(o.s),\n        length: o.l,\n        rclk: LogootInt.fromJSON(o.r),\n        type:\n          o.t === 'D'\n            ? NodeType.DATA\n            : o.t === 'R'\n            ? NodeType.REMOVAL\n            : ((): NodeType => {\n                throw new TypeError('Node type was not one of DATA or REMOVAL')\n              })()\n      }))\n      return this\n    }\n    toJSON(): JsonableLogger.JSON[] {\n      const brk_tbl: { [key: string]: number } = {}\n      let _brk_i = 0\n      const map_brk = (k: BranchKey): number => {\n        if (brk_tbl[(k as unknown) as string] === undefined) {\n          brk_tbl[(k as unknown) as string] = _brk_i++\n        }\n        return brk_tbl[(k as unknown) as string]\n      }\n      return this.ops.map((o) => ({\n        b: map_brk(o.br),\n        s: o.start.toJSON(),\n        l: o.length,\n        r: o.rclk.toJSON(),\n        t:\n          o.type === NodeType.DATA\n            ? 'D'\n            : NodeType.REMOVAL\n            ? 'R'\n            : ((): string => {\n                throw new TypeError('Node type was not one of DATA or REMOVAL')\n              })()\n      }))\n    }\n  }\n  export namespace JsonableLogger {\n    export type JSON = {\n      b: number\n      s: LogootPosition.JSON\n      l: number\n      r: LogootInt.JSON\n      t: string\n    }\n  }\n}\n\nexport {\n  LogootInt,\n  LogootPosition,\n  KnownPositionBst,\n  LogootBst,\n  Removal,\n  ListDocumentModel,\n  NodeType\n}\n","/**\n * @file This contains most of the data types used by the `ListDocumentModel`.\n * While `index.ts` does most of the heavy lifting, this file is the source of\n * most definitions used there. The files were split to make it easier for me to\n * switch since I can switch using tabs in my text editor.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { DBstNode, DBstSearchable } from '../bst'\nimport { Int32 } from '../ints'\nimport { CompareResult, FatalError, allKeys } from '../utils'\n\n// What a C++ typedef would do\n// This makes it possible to completely swap out the type of the int used in the\n// algorithm w/o actually replacing each instance (which would be a real pain)\nimport LogootInt = Int32\n\n/**\n * A position in Logoot. This is just an array of numbers with some utility\n * functions. In Logoot, it must always be possible to allocate a position\n * between any possible two positions. In this algorithm, a position with more\n * `levels` (or elements in the array) comes first. So, if it is necessary to\n * create a position between `A` and `B`, then another level can be added to the\n * position to make it come after `A` and before `B`. Positions are represented\n * in writing the same as arrays: `[1,2,3]`\n * @example ```typescript\n * const a = new LogootPosition()\n * console.log(a.toString()) // [0]\n *\n * const b = a.offsetLowest(1)\n * console.log(b.toString()) // [1]\n *\n * console.log(new LogootPosition(1, a, b).toString()) // [0]\n * console.log(new LogootPosition(2, a, b).toString()) // [0,0]\n * ```\n */\nclass LogootPosition {\n  protected array: LogootInt[] = [new LogootInt(0)]\n\n  /**\n   * This constructor constructs a new position that is in the range specified\n   * by `start` and `end`. By using `len`, it is possible to enforce that a\n   * certain number of additional positions are available in the selected range.\n   * This guarantees that there's space for a LogootNode of length `len` at this\n   * position between `start` and `end`.\n   *\n   * @param len - The length of the allocation to make. The length is never\n   * actually stored in the Logoot position, but is used when finding space for\n   * the position to be created and `len` position(s) after it.\n   * @param start - This will cause the new position to have a value greater\n   * than or equal to this. This value is tricky: It must be the end of the last\n   * node. So if `A` is at `[1]` and an allocation *after* it is desired, then\n   * `[2]` would need to be passed to `start`.\n   * @param end - This will cause the new position to have a value less than or\n   * equal to this, subject to the value of `len`.\n   */\n  constructor(\n    len = 0,\n    readonly start?: LogootPosition,\n    readonly end?: LogootPosition\n  ) {\n    if (!start && end) {\n      this.array = end.inverseOffsetLowest(len).array\n    } else if (!end && start) {\n      this.array = start.copy().array\n    } else if (start && end) {\n      let done = false\n      const itstart = start.array.values()\n      const itend = end.array.values()\n      let nstart\n      let nend\n\n      this.array.length = 0\n\n      while (!done) {\n        if (!nstart || !nstart.done) {\n          nstart = itstart.next()\n        }\n        if (!nend || !nend.done) {\n          nend = itend.next()\n        }\n\n        if (!nstart.done && !nend.done) {\n          // See if we have enough space to insert 'len' between the nodes\n          if (nend.value.gteq(new LogootInt(nstart.value).add(len))) {\n            // There's space. We're done now: At the shallowest possible level\n            done = true\n          }\n          // Regardless, the start ID is the new ID for this level of our node\n          this.array.push(new LogootInt(nstart.value))\n        } else if (!nstart.done) {\n          // So there's no end restriction, that means we can just add right on\n          // top of the old end (the start of the new node)\n          this.array.push(new LogootInt(nstart.value))\n          done = true\n        } else if (!nend.done) {\n          // We have an end restriction, but no start restriction, so we just\n          // put the new node's start behind the old end\n          this.array.push(new LogootInt(nend.value).sub(len))\n          done = true\n        } else {\n          // So both other IDs have nothing else. It must be time to make a new\n          // level and be done\n          this.array.push(new LogootInt())\n          done = true\n        }\n      }\n    }\n  }\n\n  static fromJSON(eventnode: LogootPosition.JSON): LogootPosition {\n    const pos = new LogootPosition()\n    pos.array.length = 0\n    eventnode.forEach((n) => {\n      pos.array.push(LogootInt.fromJSON(n))\n    })\n    return pos\n  }\n  static fromInts(...ints: (LogootInt | number)[]): LogootPosition {\n    const pos = new LogootPosition()\n    pos.array.length = 0\n    ints.forEach((n) => {\n      pos.array.push(new LogootInt(n))\n    })\n    return pos\n  }\n  toJSON(): LogootPosition.JSON {\n    return this.array.map((n) => n.toJSON())\n  }\n\n  /**\n   * @returns Internal array length\n   */\n  get length(): number {\n    // A zero-length position is NOT valid\n    // Through some sneakiness, you COULD directly assign the array to make it\n    // have a length of zero. Don't do it.\n    return this.array.length\n  }\n  /**\n   * Returns the last index of the array. This is useful because before this,\n   * the algorithm code often contained many occurences of `length - 1`. This\n   * is used to cut down redundancy.\n   */\n  get levels(): number {\n    // A zero-length position is NOT valid\n    // Through some sneakiness, you COULD directly assign the array to make it\n    // have a length of zero. Don't do it.\n    return this.length - 1\n  }\n  /**\n   * An array accessor\n   */\n  level(n: number): LogootInt {\n    return this.array[n]\n  }\n  /**\n   * An array accessor\n   * @alias level\n   */\n  l(n: number): LogootInt {\n    return this.level(n)\n  }\n\n  /**\n   * Returns a new position with `offset` added to the lowest level of the\n   * position.\n   */\n  offsetLowest(offset: number | LogootInt): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((current, i, array) => {\n        return i < array.length - 1\n          ? current\n          : new LogootInt(current).add(offset)\n      })\n    })\n  }\n  /**\n   * Returns a new position with `offset` subtracted from the lowest level of\n   * the position.\n   */\n  inverseOffsetLowest(offset: number | LogootInt): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((current, i, array) => {\n        return i < array.length - 1\n          ? current\n          : new LogootInt(current).sub(offset)\n      })\n    })\n  }\n\n  /**\n   * Duplicates this position.\n   */\n  copy(): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((e) => new LogootInt(e))\n    })\n  }\n\n  /**\n   * Return a copy of this position, but with the number of levels specified by\n   * `level`. If this position has fewer levels, zeroes will be added in place.\n   */\n  equivalentPositionAtLevel(level: number): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: new Array(level + 1).fill(0, 0, level + 1).map((el, i) => {\n        return new LogootInt(this.array[i])\n      })\n    })\n  }\n\n  cmp(pos: LogootPosition, level = 0): CompareResult {\n    if (level >= this.length) {\n      if (this.length === pos.length) {\n        return 0\n      }\n      return 1\n    }\n    if (level >= pos.length) {\n      return -1\n    }\n    switch (this.level(level).cmp(pos.level(level))) {\n      case 1:\n        return 1\n      case -1:\n        return -1\n      case 0:\n        return this.cmp(pos, level + 1)\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * Return this position if it is between `min` or `max`, otherwise return\n   * `min` if this is less and `max` if this is greater.\n   * @param min - The minimum output.\n   * @param max - The maximum output.\n   * @param preserve_levels - If defined, the output number of levels will be\n   * equal to `preserve_levels`.\n   * @returns Either this position, min, or max. It is **not** copied, so if you\n   * want to modify it, you should copy it.\n   */\n  clamp(\n    min: LogootPosition,\n    max: LogootPosition,\n    preserve_levels?: undefined | number\n  ): LogootPosition {\n    const clamped = this.cmp(min) < 0 ? min : this.cmp(max) > 0 ? max : this\n    if (preserve_levels !== undefined) {\n      return clamped.equivalentPositionAtLevel(preserve_levels)\n    } else {\n      return clamped.copy()\n    }\n  }\n\n  toString(): string {\n    let str = '['\n    this.array.forEach((el, i, a) => {\n      str += el.toString() + (i >= a.length - 1 ? '' : ',')\n    })\n    str += ']'\n    return str\n  }\n}\nnamespace LogootPosition {\n  export type JSON = LogootInt.JSON[]\n  export namespace JSON {\n    export const Schema = { type: 'array', items: LogootInt.JSON.Schema }\n  }\n}\n\n/**\n * A type used to identify a branch. This value should be used to look up a\n * user-presentable name in another map stored outside of `logootish-js`. This\n * is implementation-defined and allows for the broadest possible definition of\n * a branch.\n */\ntype BranchKey = symbol | string | number\n\n/**\n * The type of node stored in a `LogootNodeGroup`.\n */\nenum NodeType {\n  DATA,\n  REMOVAL\n}\n/**\n * Names for NodeType that are printed in debug information.\n */\nconst nt_string = {\n  [NodeType.DATA]: 'DATA',\n  [NodeType.REMOVAL]: 'REMOVAL'\n}\n\n/**\n * A group of `LogootNodeGroup`s that are considered by the `JoinFunction` (see\n * the list document model `index.ts` file) to be related. Each Logoot node is\n * not displayed in the order specified in `groups`. Rather, all of the nodes on\n * a particular branch are displayed together and in the order defined by\n * `branch_order`.\n * @TODO Move `branch_order` into the ListDocumentModel. No reason not to have\n * a whole-document branch order.\n */\nclass ConflictGroup extends DBstNode<ConflictGroup> {\n  /**\n   * The order in which branches are displayed. All of the nodes that make up\n   * a single branch are placed together.\n   */\n  readonly branch_order: BranchKey[] = []\n  /**\n   * A list of `LogootNodeGroups` that make up the Logoot side of the local\n   * document. A group's nodes will be split up and placed into one of the\n   * branch sections as defined in `branch_order`. These **absolutely must** be\n   * in order based on their Logoot positions.\n   */\n  groups: LogootNodeGroup[] = []\n\n  constructor(position: number) {\n    super(position)\n  }\n\n  get known_position(): number {\n    return this.absolute_value\n  }\n\n  /**\n   * Get the equivalent length of all data nodes.\n   */\n  get ldoc_length(): number {\n    return this.groups.reduce((n, group) => {\n      return n + group.ldoc_length\n    }, 0)\n  }\n  /**\n   * Find the end in the local document,\n   */\n  get ldoc_end(): number {\n    return this.known_position + this.ldoc_length\n  }\n\n  /**\n   * Get the first group's Logoot position\n   */\n  get logoot_start(): LogootPosition {\n    return this.groups[0] ? this.groups[0].start : undefined\n  }\n  /**\n   * Get the last group's Logoot position\n   */\n  get logoot_end(): LogootPosition {\n    return this.groups.length\n      ? this.groups[this.groups.length - 1].end\n      : undefined\n  }\n\n  preferential_cmp(other: DBstSearchable | ConflictGroup): CompareResult {\n    if ((other as { logoot_start: LogootPosition }).logoot_start) {\n      return this.logoot_start.cmp((other as ConflictGroup).logoot_start)\n    }\n    return 0\n  }\n\n  /**\n   * Get the first branch in this group.\n   */\n  get first_branch(): BranchKey {\n    return this.branch_order[0]\n  }\n  /**\n   * Get the last branch in this group.\n   */\n  get last_branch(): BranchKey {\n    return this.branch_order.length\n      ? this.branch_order[this.branch_order.length - 1]\n      : undefined\n  }\n\n  /**\n   * True if any groups are conflicted.\n   */\n  get conflicted(): boolean {\n    return this.groups.some((g) => g.conflicted)\n  }\n  /**\n   * The length in the local document (only `DATA` nodes) of only `branches`.\n   * @param branches - A list of branches to count.\n   */\n  branchLength(branches: BranchKey[]): number {\n    return this.groups.reduce((n, group) => {\n      return n + group.branchLength(branches)\n    }, 0)\n  }\n\n  /**\n   * Find the position in the local document of a group that **is already** in\n   * this `ConflictGroup`. This is named `insertPos` because it is used to find\n   * the insertion position of a new group, but the naming is a bit confusing.\n   * @param br - The branch on which to determine the position.\n   * @param at - The LogootNodeGroup to determine the position of.\n   * @returns The position of `at`.\n   * @throws {FatalError} Will throw if `after` is not in this CG.\n   */\n  insertPos(br: BranchKey, at: LogootNodeGroup): number {\n    // First, compute the offset for all of the previous branches (ex, A and B)\n    // AAAAAAABBBBccccccdddddeeee\n    let offset =\n      this.known_position +\n      this.branchLength(\n        this.branch_order.slice(0, this.branch_order.indexOf(br) + (at ? 0 : 1))\n      )\n\n    if (!at) {\n      return offset\n    }\n\n    // Sum up all of the prior groups on our branch\n    for (let i = 0; i < this.groups.length; i++) {\n      // Once we've found our group, bail out\n      if (this.groups[i] === at) {\n        return offset\n      }\n      offset += this.groups[i].branchLength([br])\n    }\n    throw new FatalError(\n      'Tried to insert after a LogootNodeGroup that is not in this conflict group'\n    )\n  }\n\n  /**\n   * Get the nodes to the left and right of `start`. If there is already a\n   * `LogootNodeGroup` with the same position, behavior is undefined.\n   * @param start - The position for which to find neighbors of.\n   * @returns An object containing `left` and `right` `LogootNodeGroup`s, as\n   * well as a `pos` number, which is the position of `right` in `this.groups`.\n   */\n  getNeighbors({\n    start\n  }: LogootNodeGroup): {\n    left: LogootNodeGroup\n    right: LogootNodeGroup\n    pos: number\n  } {\n    let left\n    for (let i = 0; i < this.groups.length; i++) {\n      if (this.groups[i].start.cmp(start) <= 0) {\n        left = this.groups[i]\n      }\n      if (this.groups[i].start.cmp(start) > 0) {\n        return { left, right: this.groups[i], pos: i }\n      }\n    }\n    return { left, right: undefined, pos: this.groups.length }\n  }\n\n  /**\n   * Adds a group with only one branch to this CG and returns its position.\n   * @param group - The group to add.\n   * @returns The position in the local document of the insertion.\n   * @throws {TypeError} If the group has more than one branch or if the group's\n   * `ConflictGroup` is not set to `this`. Set `group.group` to this before\n   * calling to avoid this error.\n   */\n  insertSingleBranchGroup(group: LogootNodeGroup): number {\n    if (group.n_branches !== 1) {\n      throw new TypeError('Passed group with no or more than one branch')\n    }\n    if (group.group !== this) {\n      throw new TypeError('Conflict group not assigned to node group')\n    }\n\n    const br = group.branches[0]\n    if (!this.branch_order.includes(br)) {\n      this.branch_order.push(br)\n    }\n\n    const { right, pos } = this.getNeighbors(group)\n\n    const known_position = this.insertPos(br, right)\n    this.groups.splice(pos, 0, group)\n    return known_position\n  }\n\n  toString(): string {\n    let str = `Conflict @ ${this.known_position} (`\n    str += this.branch_order.map((br) => br.toString()).join(' ')\n    str += `) {`\n    str += this.groups.map((gr) => {\n      return (\n        '\\n  ' +\n        gr\n          .toString()\n          .split('\\n')\n          .join('\\n  ')\n      )\n    })\n    str += '\\n}'\n    return str\n  }\n}\n\ntype LogootNode = { type: NodeType; rclk: LogootInt }\n/**\n * A group of nodes that are all on different branches and have different vector\n * clock values, but share the same **Logoot** start, end, and length.\n */\nclass LogootNodeGroup {\n  length = 0\n  start: LogootPosition = new LogootPosition()\n  group: ConflictGroup\n  /**\n   * The `LogootNode`s in this group. Despite what TypeScript thinks, they key\n   * is **not** a string. It is a BranchKey. Problem is, TS doesn't support\n   * using symbols to index a type, which will hopefully fixed when\n   * [TypeScript PR #26797](https://github.com/microsoft/TypeScript/pull/26797) lands.\n   * In the mean time, using `as` to turn the BranchKey into a string is used as\n   * a hacky workaround.\n   */\n  nodes: { [key: string]: LogootNode } = {}\n\n  constructor(old?: LogootNodeGroup) {\n    if (old) {\n      Object.assign(this, {\n        length: old.length,\n        start: old.start.copy(),\n        group: old.group\n      })\n      old.eachNode(({ type, rclk }, k) => {\n        this.br(k, { type, rclk: new LogootInt(rclk) })\n      })\n    }\n  }\n\n  /**\n   * Gets the length of all `DATA` nodes.\n   */\n  get ldoc_length(): number {\n    // For some reason, TS thinks that this will produce a BranchKey. Obviously,\n    // it doesn't, so I have to do the awkward \"as unknown as number\" cast :(\n    return (this.branches.reduce((n: number, br: number) => {\n      return this.br(br).type === NodeType.DATA ? n + this.length : n\n    }, 0) as unknown) as number\n  }\n\n  /**\n   * Gets the length of all `DATA` nodes on `branches`.\n   * @param branches - The branches to search.\n   * @returns The length of all `DATA` nodes\n   */\n  branchLength(branches: BranchKey[]): number {\n    return (this.branches\n      .filter((k) => branches.includes(k))\n      .reduce((n: number, br: number) => {\n        return this.br(br).type === NodeType.DATA ? n + this.length : n\n      }, 0) as unknown) as number\n  }\n\n  /**\n   * The end of the node. Note that technically there is not an atom at this\n   * position, so it's fair game to have another node placed at this position.\n   */\n  get end(): LogootPosition {\n    return this.start.offsetLowest(this.length)\n  }\n\n  get branches(): BranchKey[] {\n    return allKeys(this.nodes)\n  }\n  get n_branches(): number {\n    return this.branches.length\n  }\n  /**\n   * Returns true if there are multiple branches\n   */\n  get conflicted(): boolean {\n    return this.n_branches > 1\n    /* return ( // TODO: Fix\n      this.branches.filter((k) => {\n        return this.br(k).type !== NodeType.MERGE_INTO\n      }).length > 1\n    ) */\n  }\n\n  eachNode(cb: (n: LogootNode, k: BranchKey) => void): void {\n    this.branches.forEach((k) => {\n      cb(this.br(k), k)\n    })\n  }\n  mapNodes(\n    cb: (n: LogootNode, k: BranchKey) => LogootNode\n  ): {\n    [key: string]: LogootNode\n  } {\n    const rval: { [key: string]: LogootNode } = {}\n    this.branches.forEach((k) => {\n      rval[(k as unknown) as string] = cb(this.br(k), k)\n    })\n    return rval\n  }\n\n  /**\n   * This is a method to access and (possibly) assign a `LogootNode` to the\n   * particular branch. This is a thing because TypeScript does not yet support\n   * using symbols as keys and I don't feel like typing\n   * `(key as unknown) as string` a billion times. See\n   * [TypeScript PR #26797](https://github.com/microsoft/TypeScript/pull/26797).\n   */\n  br(key: BranchKey, node?: LogootNode): LogootNode {\n    if (node) {\n      this.nodes[(key as unknown) as string] = node\n    }\n    return this.nodes[(key as unknown) as string]\n  }\n  delBr(key: BranchKey): void {\n    delete this.nodes[(key as unknown) as string]\n  }\n\n  /**\n   * Split this LogootNodeGroup around a position `pos` units after the current\n   * start on the lowest level.\n   * @param pos - The location of where to split this group.\n   * @returns A new LogootNodeGroup. This is spliced into this conflict group,\n   * so no cleanup is necessary after this is run.\n   */\n  splitAround(pos: number): LogootNodeGroup {\n    const newgroup = new LogootNodeGroup(this)\n    newgroup.start = this.start.offsetLowest(pos)\n    newgroup.length = this.length - pos\n\n    // Ensure that we're in the right order in the ConflictGroup\n    const groups = newgroup.group.groups\n    groups.splice(groups.indexOf(this) + 1, 0, newgroup)\n\n    this.length = pos\n    return newgroup\n  }\n\n  toString(): string {\n    let str = `Group ${this.start.toString()} + ${this.length} {`\n    str += this.branches.map((k) => {\n      const br = this.br(k)\n      return `\\n  ${String(k)}: ${nt_string[br.type]} @ ${br.rclk.toString()}`\n    })\n    str += '\\n}'\n    return str\n  }\n}\n\nexport {\n  LogootInt,\n  LogootPosition,\n  NodeType,\n  ConflictGroup,\n  LogootNodeGroup,\n  BranchKey\n}\n","/**\n * @file Definition of various integers.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { CompareResult, Comparable } from './utils'\n\n/**\n * An abstract subclass of `Comparable` to provide a generic interface for\n * integer types that may not be supported by JavaScript\n * @template FutureType - The type of the subclass with which to restrict all\n * operations to the int class.\n * @inheritdoc\n */\nabstract class IntType<FutureType> extends Comparable<FutureType | number> {\n  // eslint-disable-next-line\n  abstract toJSON(): any\n  abstract toString(): string\n\n  /**\n   * Add another integer to the value of this one\n   * @param n - The number to add\n   */\n  abstract add(n: FutureType | number): FutureType\n  /**\n   * Add another integer to the value of this one\n   * @param n - The number to subtract\n   */\n  abstract sub(n: FutureType | number): FutureType\n\n  /**\n   * Assign another integer to this object\n   * @param n - The number to assign\n   */\n  abstract sub(n: FutureType | number): FutureType\n\n  /**\n   * The JavaScript int type for this integer (with an exception thrown if the\n   * value cannot be represented in 32 bits)\n   */\n  abstract js_int: number\n}\n\n/**\n * An `IntType` that restricts the number to 32 bits by using an `Int32Array`.\n * @inheritdoc\n * @example ```typescript\n * const a = new Int32(5)\n * console.log(a.toString()) // 5\n * a.add(10).sub(8)\n * console.log(a.toString()) // 7\n * const b = new Int32(3)\n * console.log(a.cmp(b)) // 1\n * ```\n */\nclass Int32 extends IntType<Int32> {\n  // Size limit the int, enforce signing, and remove decimals\n  private int32 = new Int32Array([0])\n\n  constructor(n: Int32 | number = 0) {\n    super()\n    if (n instanceof Int32) {\n      this.int32[0] = n.int32[0]\n    } else {\n      this.int32[0] = n\n    }\n  }\n\n  static fromJSON(obj: Int32.JSON): Int32 {\n    return new Int32(obj)\n  }\n\n  toJSON(): Int32.JSON {\n    return this.int32[0]\n  }\n\n  add(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] += n.int32[0]\n    } else {\n      this.int32[0] += n\n    }\n    return this\n  }\n  sub(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] -= n.int32[0]\n    } else {\n      this.int32[0] -= n\n    }\n    return this\n  }\n\n  assign(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] = n.int32[0]\n    } else {\n      this.int32[0] = n\n    }\n    return this\n  }\n\n  cmp(n: Int32 | number): CompareResult {\n    if (n instanceof Int32) {\n      return ((this.int32[0] >= n.int32[0] ? 1 : 0) +\n        (this.int32[0] <= n.int32[0] ? -1 : 0)) as CompareResult\n    } else {\n      return ((this.int32[0] >= n ? 1 : 0) +\n        (this.int32[0] <= n ? -1 : 0)) as CompareResult\n    }\n  }\n\n  copy(): Int32 {\n    return new Int32(this)\n  }\n\n  get js_int(): number {\n    return this.int32[0]\n  }\n\n  toString(): string {\n    return this.int32[0].toString()\n  }\n}\nnamespace Int32 {\n  export type JSON = number\n  export namespace JSON {\n    export const Schema = { type: 'number' }\n  }\n}\n\nexport { IntType, Int32 }\n","/**\n * @file Definition of the `debug` constant from `loglevel`.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport loglevel from 'loglevel'\n\nconst debug = loglevel.getLogger('logootish-js')\n\nexport { debug }\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n"],"sourceRoot":""}