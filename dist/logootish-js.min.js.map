{"version":3,"sources":["webpack://logootish-js/webpack/universalModuleDefinition","webpack://logootish-js/webpack/bootstrap","webpack://logootish-js/./src/utils.ts","webpack://logootish-js/./src/index.ts","webpack://logootish-js/./src/ints.ts","webpack://logootish-js/./src/bst.ts","webpack://logootish-js/./src/debug.ts","webpack://logootish-js/./node_modules/loglevel/lib/loglevel.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","arraymap","array","fn","length","newarray","splice","FatalError","Error","fatal","Comparable","cmp","MemberPtr","obj","val","EventState","EventType","LogootInt","Int32","LogootPosition","len","start","end","inverseOffsetLowest","copy","done","itstart","values","itend","nstart","nend","next","push","sub","gteq","add","eventnode","pos","forEach","fromJSON","map","toJSON","level","offset","assign","current","e","Array","fill","el","min","max","preserve_levels","clamped","undefined","equivalentPositionAtLevel","str","a","toString","JSON","Schema","type","items","LogootNode","node","known_position","rclk","offsetLowest","InsertionEvent","body","left","right","INSERTION","last","state","PENDING","properties","removals","RemovalEvent","REMOVAL","Document","send","insertLocal","removeLocal","ldoc_bst","Bst","b","logoot_bst","removal_bst","pending_events","vector_clock","_active_listeners","last_insertion_event","event","index","indexOf","oldevent","_removePendingEvent","_tryMergeEvents","queue_send","SENDING","then","COMPLETE","catch","flagCancelled","data","retry_after_ms","debug","warn","setTimeout","error","position","text","nodes_lesser","getLteq","nodes_greater","getGteq","lesser","greater","left_position","right_position","operateOnAllGteq","_pushEvent","nodes","getRange","concat","last_end","newlen","newstart","remove","bst","resolveConflict","addNode","informRemoval","levels","skip_ranges","sort","includes","unshift","filter","clip_nstart","clip_nend","conflict","whole_node","result","js_int","endnode","n_end_old","known_start","positions","lesser_pos","Math","newnodes","last_known_position","skip_range","cstart","clamp","cend","event_contents","this_rclk","info","stringify","_mergeNode","whole","newnode","node_body","substr","new_rclk","IntType","super","int32","Int32Array","BstNode","bst_root","gteqcmp","successor","setSuccessor","gtcmp","eqcmp","ptr","_getInorderSuccessor","endm1","operation","undef","operateOnAllRange","operateOnAllLteq","operateOnAll","getLogger","definition","noop","undefinedType","isIE","window","test","navigator","userAgent","logMethods","bindMethod","methodName","method","Function","apply","arguments","traceForIE","console","log","trace","replaceLoggingMethods","loggerName","methodFactory","enableLoggingWhenConsoleArrives","defaultMethodFactory","realMethod","Logger","defaultLevel","currentLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","location","encodeURIComponent","exec","slice","getLevel","setLevel","persist","toUpperCase","SILENT","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","TypeError","logger","_log","noConflict","getLoggers"],"mappings":"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","file":"logootish-js.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"logootish-js\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"logootish-js\"] = factory();\n\telse\n\t\troot[\"logootish-js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @file Various utilities that don't belong anywhere else.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n\n/**\n * Like the built-in map function, but it replaces the element with an arbitrary\n * number of elements, making it a combination of map, push, and filter.\n * @template T - The type of the array elements.\n * @param array - The array to map. It will be modified.\n * @param fn - The element mapper function. It takes the current element as an\n * argument and returns the element(s) take its place.\n * @return The same array that was passed as an argument.\n */\nfunction arraymap<T>(array: T[], fn: (el: T) => T[]): T[] {\n  for (let i = 0; i < array.length; ) {\n    const newarray = fn(array[i])\n    array.splice(i, 1, ...newarray)\n    i += newarray.length ? newarray.length : 1\n  }\n  return array\n}\n\n/**\n * A class created with a variable `fatal` added and set to true. This is used\n * for ensuring that a client knows to shut down a document if an error has\n * indicated that the document is corrupt.\n */\nclass FatalError extends Error {\n  fatal = true\n}\n\n/**\n * One of zero, one, or negative one.\n */\ntype CompareResult = -1 | 0 | 1\n/**\n * A function type that takes `T` and returns a CompareResult.\n */\ntype CompareFunction<T> = (other: T) => CompareResult\n/**\n * A function type that takes two of a type `T` and returns a CompareResult.\n */\ntype DualCompareFunction<T> = (a: T, b: T) => CompareResult\n\n/**\n * A utility abstract class with no implementation for the function `cmp` and\n * implementations for `gt`, `gteq`, `eq`, `lteq`, and `lt` functions.\n * @template T The other type that can be compared.\n */\nabstract class Comparable<T> {\n  /**\n   * Compare this object to another one.\n   */\n  abstract cmp(other: T): CompareResult\n  /**\n   * @return True if this object is greater than the one provided.\n   */\n  gt(n: T): boolean {\n    return this.cmp(n) === 1\n  }\n  /**\n   * @return True if this object is greater than or equal to the one provided.\n   */\n  gteq(n: T): boolean {\n    return this.cmp(n) >= 0\n  }\n  /**\n   * @return True if this object is equal to the one provided.\n   */\n  eq(n: T): boolean {\n    return this.cmp(n) === 0\n  }\n  /**\n   * @return True if this object is less than or equal to the one provided.\n   */\n  lteq(n: T): boolean {\n    return this.cmp(n) <= 0\n  }\n  /**\n   * @return True if this object is less than the one provided.\n   */\n  lt(n: T): boolean {\n    return this.cmp(n) === -1\n  }\n}\n\n/**\n * Designed to emulate pointers to members of an object. This is useful inside\n * the B-trees. This should not be used like a C pointer: If the value in the\n * destination object changes, so does the value reported by this object.\n * @template T - The container object type.\n * @template K - The key inside the object.\n */\nclass MemberPtr<T, K extends keyof T> {\n  private obj: T\n  private key: K\n  /**\n   * @param obj - The object with the member to reference.\n   * @param key - The key of the reference inside the object.\n   */\n  constructor(obj: T, key: K) {\n    this.obj = obj\n    this.key = key\n  }\n  /**\n   * The value of the 'pointer.'\n   */\n  get value(): T[K] {\n    return this.obj[this.key]\n  }\n  set value(val: T[K]) {\n    this.obj[this.key] = val\n  }\n}\n\nexport {\n  arraymap,\n  FatalError,\n  CompareResult,\n  CompareFunction,\n  DualCompareFunction,\n  Comparable,\n  MemberPtr\n}\n","/**\n * @file This is the core of the Logootish algorithm. It contains all position\n * manipulation code.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { arraymap, FatalError, CompareResult } from './utils'\nimport { Int32 } from './ints'\nimport { Bst } from './bst'\n\nimport { debug } from './debug'\n\n// What a C++ typedef would do\n// This makes it possible to completely swap out the type of the int used in the\n// algorithm w/o actually replacing each instance (which would be a real pain)\nimport LogootInt = Int32\n\n/**\n * A position in Logoot. This is just an array of numbers with some utility\n * functions. In Logoot, it must always be possible to allocate a position\n * between any possible two positions. In this algorithm, a position with more\n * `levels` (or elements in the array) comes first. So, if it is necessary to\n * create a position between `A` and `B`, then another level can be added to the\n * position to make it come after `A` and before `B`. Positions are represented\n * in writing the same as arrays: `[1,2,3]`\n * @example ```typescript\n * const a = new LogootPosition()\n * console.log(a.toString()) // [0]\n *\n * const b = a.offsetLowest(1)\n * console.log(b.toString()) // [1]\n *\n * console.log(new LogootPosition(1, a, b).toString()) // [0]\n * console.log(new LogootPosition(2, a, b).toString()) // [0,0]\n * ```\n */\nclass LogootPosition {\n  protected array: LogootInt[] = [new LogootInt(0)]\n\n  /**\n   * This constructor constructs a new position that is in the range specified\n   * by `start` and `end`. By using `len`, it is possible to enforce that a\n   * certain number of additional positions are available in the selected range.\n   * This guarantees that there's space for a LogootNode of length `len` at this\n   * position between `start` and `end`.\n   *\n   * @param len - The length of the allocation to make. The length is never\n   * actually stored in the Logoot position, but is used when finding space for\n   * the position to be created and `len` position(s) after it.\n   * @param start - This will cause the new position to have a value greater\n   * than or equal to this. This value is tricky: It must be the end of the last\n   * node. So if `A` is at `[1]` and an allocation *after* it is desired, then\n   * `[2]` would need to be passed to `start`.\n   * @param end - This will cause the new position to have a value less than or\n   * equal to this, subject to the value of `len`.\n   */\n  constructor(\n    len = 0,\n    readonly start?: LogootPosition,\n    readonly end?: LogootPosition\n  ) {\n    if (!start && end) {\n      this.array = end.inverseOffsetLowest(len).array\n    } else if (!end && start) {\n      this.array = start.copy().array\n    } else if (start && end) {\n      let done = false\n      const itstart = start.array.values()\n      const itend = end.array.values()\n      let nstart\n      let nend\n\n      this.array.length = 0\n\n      while (!done) {\n        if (!nstart || !nstart.done) {\n          nstart = itstart.next()\n        }\n        if (!nend || !nend.done) {\n          nend = itend.next()\n        }\n\n        if (!nstart.done && !nend.done) {\n          // See if we have enough space to insert 'len' between the nodes\n          if (nend.value.gteq(new LogootInt(nstart.value).add(len))) {\n            // There's space. We're done now: At the shallowest possible level\n            done = true\n          }\n          // Regardless, the start ID is the new ID for this level of our node\n          this.array.push(new LogootInt(nstart.value))\n        } else if (!nstart.done) {\n          // So there's no end restriction, that means we can just add right on\n          // top of the old end (the start of the new node)\n          this.array.push(new LogootInt(nstart.value))\n          done = true\n        } else if (!nend.done) {\n          // We have an end restriction, but no start restriction, so we just\n          // put the new node's start behind the old end\n          this.array.push(new LogootInt(nend.value).sub(len))\n          done = true\n        } else {\n          // So both other IDs have nothing else. It must be time to make a new\n          // level and be done\n          this.array.push(new LogootInt())\n          done = true\n        }\n      }\n    }\n  }\n\n  static fromJSON(eventnode: LogootPosition.JSON): LogootPosition {\n    const pos = new LogootPosition()\n    pos.array.length = 0\n    eventnode.forEach((n) => {\n      pos.array.push(LogootInt.fromJSON(n))\n    })\n    return pos\n  }\n  toJSON(): LogootPosition.JSON {\n    return this.array.map((n) => n.toJSON())\n  }\n\n  /**\n   * @returns Internal array length\n   */\n  get length(): number {\n    // A zero-length position is NOT valid\n    // Through some sneakiness, you COULD directly assign the array to make it\n    // have a length of zero. Don't do it.\n    return this.array.length\n  }\n  /**\n   * Returns the last index of the array. This is useful because before this,\n   * the algorithm code often contained many occurences of `length - 1`. This\n   * is used to cut down redundancy.\n   */\n  get levels(): number {\n    // A zero-length position is NOT valid\n    // Through some sneakiness, you COULD directly assign the array to make it\n    // have a length of zero. Don't do it.\n    return this.length - 1\n  }\n  /**\n   * An array accessor\n   */\n  level(n: number): LogootInt {\n    return this.array[n]\n  }\n  /**\n   * An array accessor\n   * @alias level\n   */\n  l(n: number): LogootInt {\n    return this.level(n)\n  }\n\n  /**\n   * Returns a new position with `offset` added to the lowest level of the\n   * position.\n   */\n  offsetLowest(offset: number | LogootInt): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((current, i, array) => {\n        return i < array.length - 1\n          ? current\n          : new LogootInt(current).add(offset)\n      })\n    })\n  }\n  /**\n   * Returns a new position with `offset` subtracted from the lowest level of\n   * the position.\n   */\n  inverseOffsetLowest(offset: number | LogootInt): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((current, i, array) => {\n        return i < array.length - 1\n          ? current\n          : new LogootInt(current).sub(offset)\n      })\n    })\n  }\n\n  /**\n   * Duplicates this position.\n   */\n  copy(): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: this.array.map((e) => new LogootInt(e))\n    })\n  }\n\n  /**\n   * Return a copy of this position, but with the number of levels specified by\n   * `level`. If this position has fewer levels, zeroes will be added in place.\n   */\n  equivalentPositionAtLevel(level: number): LogootPosition {\n    return Object.assign(new LogootPosition(), {\n      array: new Array(level + 1).fill(0, 0, level + 1).map((el, i) => {\n        return new LogootInt(this.array[i])\n      })\n    })\n  }\n\n  cmp(pos: LogootPosition, level = 0): CompareResult {\n    if (level >= this.length) {\n      if (this.length === pos.length) {\n        return 0\n      }\n      return 1\n    }\n    if (level >= pos.length) {\n      return -1\n    }\n    switch (this.level(level).cmp(pos.level(level))) {\n      case 1:\n        return 1\n      case -1:\n        return -1\n      case 0:\n        return this.cmp(pos, level + 1)\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * Return this position if it is between `min` or `max`, otherwise return\n   * `min` if this is less and `max` if this is greater.\n   * @param min - The minimum output.\n   * @param max - The maximum output.\n   * @param preserve_levels - If defined, the output number of levels will be\n   * equal to `preserve_levels`.\n   */\n  clamp(\n    min: LogootPosition,\n    max: LogootPosition,\n    preserve_levels?: undefined | number\n  ): LogootPosition {\n    const clamped = this.cmp(min) < 0 ? min : this.cmp(max) > 0 ? max : this\n    if (preserve_levels !== undefined) {\n      return clamped.equivalentPositionAtLevel(preserve_levels)\n    } else {\n      return clamped.copy()\n    }\n  }\n\n  toString(): string {\n    let str = '['\n    this.array.forEach((el, i, a) => {\n      str += el.toString() + (i >= a.length - 1 ? '' : ',')\n    })\n    str += ']'\n    return str\n  }\n}\nnamespace LogootPosition {\n  export type JSON = LogootInt.JSON[]\n  export namespace JSON {\n    export const Schema = { type: 'array', items: LogootInt.JSON.Schema }\n  }\n}\n\n/**\n * Logoot treats each atom as seperate. However, in a real-world environment, it\n * is not practical to treat each atom seperately. To save memory and CPU time,\n * the algorithm groups together consecutive atoms into `LogootNode`s. A\n * `LogootNode` is technically just a series of consecutive atoms with the same\n * `rclk` (vector clock).\n */\nclass LogootNode {\n  known_position = 0\n  length = 0\n  start: LogootPosition = new LogootPosition()\n  rclk: LogootInt = new LogootInt(0)\n\n  /**\n   * @param node - A node to copy, C++ style\n   */\n  constructor(node?: LogootNode) {\n    if (node) {\n      Object.assign(this, {\n        known_position: node.known_position,\n        length: node.length,\n        start: node.start.offsetLowest(new LogootInt()),\n        rclk: new LogootInt(node.rclk)\n      })\n    }\n  }\n\n  /**\n   * The end of the node. Note that technically there is not an atom at this\n   * position, so it's fair game to have another node placed at this position.\n   */\n  get end(): LogootPosition {\n    return this.start.offsetLowest(this.length)\n  }\n\n  toString(): string {\n    return (\n      this.start.toString() +\n      (typeof this.known_position === 'number'\n        ? '(' + this.known_position + ')'\n        : '') +\n      ` + ${this.length} @ ${this.rclk}`\n    )\n  }\n}\ntype LogootNodeWithMeta = LogootNode & { offset: number }\n\nenum EventState {\n  /**\n   * Not being actively sent and can be modified.\n   */\n  PENDING,\n  /**\n   * In transit. Cannot be modified.\n   */\n  SENDING,\n  /**\n   * Already sent. Also cannot be modified.\n   */\n  COMPLETE\n}\n/**\n * @deprecated in favor of typeof statements, but I've been meaning to remove\n * code dependent on this for a few versions now.\n * @todo Fix me\n */\nenum EventType {\n  INSERTION,\n  REMOVAL\n}\n\n/**\n * Generic event interface.\n */\ninterface LogootEvent {\n  type: EventType\n  state: EventState\n  // eslint-disable-next-line\n  toJSON(): any\n  rclk: LogootInt\n}\n\n/**\n * An event sent when text is added, which contains a body and start position.\n */\nclass InsertionEvent implements LogootEvent {\n  type = EventType.INSERTION\n  body = ''\n  start?: LogootPosition = undefined\n  known_position?: number = undefined\n  rclk = new LogootInt()\n\n  // Previous & next insertion event\n  last: InsertionEvent = undefined\n  next: InsertionEvent = undefined\n\n  state = EventState.PENDING\n\n  constructor(\n    body: string,\n    left?: LogootPosition,\n    right?: LogootPosition,\n    rclk?: LogootInt,\n    known_position?: number\n  ) {\n    Object.assign(this, {\n      body,\n      known_position,\n      state: EventState.PENDING,\n      start: new LogootPosition(body.length, left, right),\n      rclk: new LogootInt(rclk)\n    })\n  }\n\n  static fromJSON(eventnode: InsertionEvent.JSON): InsertionEvent {\n    return new InsertionEvent(\n      eventnode.body,\n      LogootPosition.fromJSON(eventnode.start),\n      undefined,\n      LogootInt.fromJSON(eventnode.rclk)\n    )\n  }\n  toJSON(): InsertionEvent.JSON {\n    return {\n      body: this.body,\n      start: this.start.toJSON(),\n      rclk: this.rclk.toJSON()\n    }\n  }\n\n  get length(): number {\n    return this.body.length\n  }\n  get end(): LogootPosition {\n    return this.start.offsetLowest(this.length)\n  }\n  get node(): LogootNode {\n    const node = new LogootNode()\n    Object.assign(node, {\n      start: this.start,\n      length: this.length,\n      known_position: this.known_position,\n      rclk: this.rclk\n    })\n    return node\n  }\n}\nnamespace InsertionEvent {\n  export type JSON = {\n    body: string\n    start: LogootPosition.JSON\n    rclk: LogootInt.JSON\n  }\n  export namespace JSON {\n    export const Schema = {\n      type: 'object',\n      properties: {\n        removals: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              start: LogootPosition.JSON.Schema,\n              length: { type: 'number' }\n            }\n          }\n        },\n        rclk: LogootInt.JSON.Schema\n      }\n    }\n  }\n}\n\ntype Removal = { start: LogootPosition; length: number }\ntype RemovalJSON = { start: LogootPosition.JSON; length: number }\n/**\n * An event sent when text is removed, which contains an array of start\n * positions and lengths. An array was chosen since it is preferred for one\n * operation to translate to one event. In an insertion, this is easy since\n * there is just a start and body. However, a removal might remove areas of text\n * that are on different levels and could generate many events.\n */\nclass RemovalEvent implements LogootEvent {\n  type = EventType.REMOVAL\n  removals: Removal[] = []\n  rclk: LogootInt\n\n  state = EventState.PENDING\n\n  constructor(removals: Removal[], rclk?: LogootInt) {\n    this.removals = removals\n    this.rclk = new LogootInt(rclk)\n  }\n\n  static fromJSON(eventnode: RemovalEvent.JSON): RemovalEvent {\n    return new RemovalEvent(\n      eventnode.removals.map((r) => ({\n        start: LogootPosition.fromJSON(r.start),\n        length: r.length\n      })),\n      LogootInt.fromJSON(eventnode.rclk)\n    )\n  }\n  toJSON(): RemovalEvent.JSON {\n    return {\n      removals: this.removals.map((r) => ({\n        start: r.start.toJSON(),\n        length: r.length\n      })),\n      rclk: this.rclk.toJSON()\n    }\n  }\n}\nnamespace RemovalEvent {\n  export type JSON = { removals: RemovalJSON[]; rclk: LogootInt.JSON }\n  export namespace JSON {\n    export const Schema = {\n      type: 'object',\n      properties: {\n        removals: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              start: LogootPosition.JSON.Schema,\n              length: { type: 'number' }\n            }\n          }\n        },\n        rclk: LogootInt.JSON.Schema\n      }\n    }\n  }\n}\n\ntype KnownPositionBst = Bst<LogootNode, { known_position: number }>\ntype LogootBst = Bst<LogootNode, { start: LogootPosition }>\n\ntype Conflict = {\n  start: LogootPosition\n  end: LogootPosition\n  clip_nstart: boolean\n  clip_nend: boolean\n  whole_node: boolean\n  level: number\n}\n\n/**\n * A representation of the Logootish Document that maps \"real,\" continuous\n * `known_position`s to Logoot positions.\n * @todo Remove all code specific to the event system being used.\n * @todo Overhaul insert/remove functions to never handle events or text.\n * Instead, another module should handle everything having to do with events.\n * This would make the document universal for any data type, including, but not\n * limited to, arrays and rich text.\n */\nclass Document {\n  /**\n   * The BST maps out where all insertion nodes are in the local document's\n   * memory. It is used to go from position -> node\n   */\n  ldoc_bst: KnownPositionBst = new Bst(\n    (a, b) => (a.known_position - b.known_position) as CompareResult\n  )\n  /**\n   * This BST maps Logoot position identifiers to their text node to allow\n   * lookup of text position from Logoot ID\n   */\n  logoot_bst: LogootBst = new Bst((a, b) => a.start.cmp(b.start))\n  /** A map of removals that do not yet have text to remove */\n  removal_bst: LogootBst = new Bst((a, b) => a.start.cmp(b.start))\n  /** Events that need to get sent over Matrix */\n  pending_events: LogootEvent[] = []\n  /**\n   * See the Logoot paper for why. Unlike the Logoot implementation, this is\n   * incremented with each deletion only.\n   */\n  vector_clock = new LogootInt()\n\n  /**\n   * Used to keep track of active EventEmitter listeners having anything to do\n   * with this document\n   * @deprecated it shouldn't be here and is temporary\n   * @todo Move this to matrix-notepad\n   */\n  _active_listeners: any[] = []\n\n  private send: (e: LogootEvent) => Promise<any>\n\n  private insertLocal: (position: number, body: string) => void\n  private removeLocal: (position: number, length: number) => void\n\n  last_insertion_event: InsertionEvent = undefined\n\n  /**\n   * @param send - A callback function to send a LogootEvent\n   * @param insertLocal - A callback function to insert text\n   * @param removeLocal - A callback function to remove text\n   */\n  constructor(\n    send: (e: LogootEvent) => Promise<any>,\n    insertLocal: (position: number, body: string) => void,\n    removeLocal: (position: number, length: number) => void\n  ) {\n    this.send = send\n    this.insertLocal = insertLocal\n    this.removeLocal = removeLocal\n  }\n\n  /**\n   * Remove an event from the pending event array\n   */\n  private _removePendingEvent(event: LogootEvent): boolean {\n    const index = this.pending_events.indexOf(event)\n    if (index >= 0) {\n      this.pending_events.splice(index, 1)\n      return true\n    }\n    return false\n  }\n  /**\n   * Merge an event with other neighboring ones\n   */\n  private _tryMergeEvents(event: InsertionEvent): boolean {\n    if (event.state !== EventState.PENDING) {\n      return false\n    }\n    // TODO: Maybe do a tree lookup instead. But this is complicated since then\n    // each node has to store its associated event\n    if (event.last && event.last.state === EventState.PENDING) {\n      let oldevent = event\n      while (oldevent.last && oldevent.last.state === EventState.PENDING) {\n        oldevent.last.body += oldevent.body\n\n        oldevent.last.next = oldevent.next\n        if (oldevent.next) {\n          oldevent.next.last = oldevent.last\n        }\n\n        this._removePendingEvent(oldevent)\n\n        if (this.last_insertion_event === oldevent) {\n          this.last_insertion_event = oldevent.last\n        }\n        oldevent = oldevent.last\n      }\n      // Now try the other direction...\n      this._tryMergeEvents(oldevent)\n      return true\n    } else if (event.next && event.next.state === EventState.PENDING) {\n      let oldevent = event\n      while (oldevent.next && oldevent.next.state === EventState.PENDING) {\n        oldevent.next.body = oldevent.body + oldevent.next.body\n        oldevent.next.start = oldevent.start\n\n        oldevent.next.last = oldevent.last\n        if (oldevent.last) {\n          oldevent.last.next = oldevent.next\n        }\n\n        this._removePendingEvent(oldevent)\n\n        if (this.last_insertion_event === oldevent) {\n          this.last_insertion_event = oldevent.next\n        }\n        oldevent = oldevent.next\n      }\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Send a `LogootEvent` using the document-specific logic.\n   */\n  private _pushEvent(event: LogootEvent): void {\n    this.pending_events.push(event)\n\n    const queue_send = (): void => {\n      event.state = EventState.SENDING\n      this.send(event)\n        .then(() => {\n          this._removePendingEvent(event)\n          event.state = EventState.COMPLETE\n        })\n        .catch((e) => {\n          event.state = EventState.PENDING\n          // TODO: Nothing is here *should* be Matrix specific\n          if (e.event) {\n            e.event.flagCancelled()\n          }\n          if (e && e.data && e.data.retry_after_ms) {\n            if (\n              event.type === EventType.INSERTION &&\n              this._tryMergeEvents(event as InsertionEvent)\n            ) {\n              debug.warn(\n                `Hitting the rate limit: Will resend in ${e.data.retry_after_ms} ms with multiple messages merged together`\n              )\n              return {}\n            }\n            debug.warn(\n              `Hitting the rate limit: Will resend in ${e.data.retry_after_ms} ms`\n            )\n            setTimeout(queue_send, e.data.retry_after_ms)\n          } else {\n            debug.error('Error sending event', e)\n            return e\n          }\n        })\n    }\n    queue_send()\n  }\n\n  /**\n   * Inform the document of new text in the local text copy. This will call the\n   * `send` function with the resulting event.\n   * @param position - The index of new text\n   * @param text - The text that will be inserted\n   */\n  insert(position: number, text: string): void {\n    debug.debug('INSERT', position, text)\n\n    // The position must be -1 for lesser because it can't count the text node\n    // currently in the insertion position (we're between two nodes)\n    const nodes_lesser = this.ldoc_bst.getLteq({ known_position: position - 1 })\n    const nodes_greater = this.ldoc_bst.getGteq({ known_position: position })\n\n    let lesser\n    let greater\n\n    // Nodes are not allowed to have the same position\n    if (nodes_lesser.length > 1 || nodes_greater.length > 1) {\n      throw new FatalError(\n        'Corrupt BST. There are multiple nodes at a position.'\n      )\n    } else {\n      lesser = nodes_lesser[0]\n      greater = nodes_greater[0]\n    }\n\n    // Finally, we can create positions...\n    let left_position\n    let right_position\n\n    if (lesser) {\n      left_position = lesser.data.end\n    }\n    if (greater) {\n      right_position = greater.data.start\n    }\n\n    if (lesser && lesser.data.length + lesser.data.known_position > position) {\n      // This means that we're right inside another node, so the next position\n      // will be inside the first node\n      left_position = lesser.data.start.offsetLowest(\n        position - lesser.data.known_position\n      )\n      right_position = left_position\n\n      // Now, we must split the node in half (nodes can't overlap)\n      const node = new LogootNode()\n      node.length = lesser.data.known_position + lesser.data.length - position\n      node.known_position = position + length\n      node.start = right_position.offsetLowest(length)\n      node.rclk = lesser.data.rclk\n      this.ldoc_bst.add(node)\n      this.logoot_bst.add(node)\n    }\n\n    const event = new InsertionEvent(\n      text,\n      left_position,\n      right_position,\n      this.vector_clock,\n      position\n    )\n\n    // Now, make a space between the nodes\n    this.ldoc_bst.operateOnAllGteq({ known_position: position }, (n) => {\n      n.data.known_position += event.length\n    })\n\n    const node = event.node\n    this.ldoc_bst.add(node)\n    this.logoot_bst.add(node)\n\n    // Logic to help merge events together. It is VERY rough and will really\n    // only work when events are consecutive, but its better than spamming the\n    // HS and having text go letter by letter when we hit the rate limit\n    if (\n      this.last_insertion_event &&\n      event.start.cmp(this.last_insertion_event.end) === 0\n    ) {\n      event.last = this.last_insertion_event\n      this.last_insertion_event.next = event\n    }\n    if (this._tryMergeEvents(event)) {\n      return\n    }\n    this._pushEvent(event)\n    this.last_insertion_event = event\n  }\n\n  /**\n   * Inform the document of removed text in the local text copy. This will call\n   * the `send` function with the resulting event.\n   * @param position - The index of old text\n   * @param length - The length text that will be removed\n   */\n  remove(position: number, length: number): void {\n    debug.debug('REMOVE', position, length)\n\n    // First, find any nodes that MAY have content removed from them\n    const nodes = this.ldoc_bst\n      .getRange(\n        { known_position: position },\n        { known_position: position + length - 1 }\n      )\n      .concat(this.ldoc_bst.getLteq({ known_position: position - 1 }))\n\n    const removals: Removal[] = []\n    let last_end: LogootPosition\n    nodes.forEach(({ data }) => {\n      let newlen = data.length\n      let newstart = data.start\n      if (data.known_position < position) {\n        newlen -= position - data.known_position\n        newstart = newstart.offsetLowest(position - data.known_position)\n      }\n      if (data.known_position + data.length > position + length) {\n        newlen -= data.known_position + data.length - (position + length)\n      }\n\n      if (last_end && last_end.cmp(data.start) === 0) {\n        removals[removals.length - 1].length += newlen\n      } else if (newlen > 0) {\n        removals.push({\n          start: newstart,\n          length: newlen\n        })\n      }\n\n      last_end = data.end\n      data.length -= newlen\n      if (data.length <= 0) {\n        this.logoot_bst.remove(data)\n        this.ldoc_bst.remove(data)\n      }\n    })\n\n    this.ldoc_bst.operateOnAllGteq({ known_position: position }, (n) => {\n      n.data.known_position -= length\n    })\n\n    const event = new RemovalEvent(removals, new LogootInt(this.vector_clock))\n    this.vector_clock.add(1)\n\n    this._pushEvent(event)\n  }\n\n  /**\n   * This is possibly the most important function in this entire program. The\n   * role of this function is to determine which parts of a node will have\n   * precedence over nodes currently in a Logoot binary search tree. Any new\n   * node must be filtered to determine which parts can actually make it into\n   * the document. For example, if there is a node with a higher `rclk`\n   * currently in the BST, that portion that overlaps with the node must be cut\n   * out. If the reverse is true, the node must be removed. This is done by\n   * first filtering the nodes in the region in question using a user-defined\n   * priority function. Nodes are either kept, ignored, or removed. These nodes\n   * are then used as regions of the input to skip over (variable named\n   * `skip_ranges`) and the resulting node(s) are returned.\n   *\n   * @param bst - The binary search tree containing current nodes to consider\n   * @param nstart - The start of the region in question\n   * @param length - The length of the region in question\n   * @param resolveConflict - A callback function determining what happens to a\n   * node currently in the BST in the region in question. If it returns 1, the\n   * node is kept. If it is 0, the node is ignored and is not skipped over. If\n   * it is -1, the section in question of the node is removed and the\n   * `informRemoval` function is called so further removals can be performed.\n   * @param addNode - A function only called when a node is split into pieces\n   * and additional nodes must be added as side-effects of the operation.\n   * @param informRemoval - A function to be called when a section or all of a\n   * node is removed so that the caller can modify the document as necessary.\n   */\n  _mergeNode(\n    bst: LogootBst,\n    nstart: LogootPosition,\n    length: number,\n    resolveConflict: (\n      node: LogootNode,\n      conflict: Conflict,\n      lesser: LogootNode\n    ) => CompareResult,\n    addNode: (node: LogootNode) => void,\n    informRemoval: (\n      node: LogootNode,\n      pos: number,\n      length: number,\n      whole: boolean\n    ) => void\n  ): LogootNodeWithMeta[] {\n    const level = nstart.levels\n    const nend = nstart.offsetLowest(length)\n\n    // These ranges are areas of the document that are already populated in the\n    // region where the insert is happening. If there are conflicts, they will\n    // be skipped. The end of this new insert must be added to the end as a fake\n    // zero-length node so that the for each loop triggers for the end.\n    let skip_ranges = bst\n      .getRange({ start: nstart }, { start: nend })\n      .map(({ data }) => data)\n      .sort((a, b) => a.start.cmp(b.start))\n\n    const nodes_lesser = bst.getLteq({ start: nstart })\n    let lesser: LogootNode\n    if (nodes_lesser.length > 1) {\n      throw new FatalError(\n        'Corrupt BST. There are multiple nodes at a position.'\n      )\n    } else if (nodes_lesser.length) {\n      lesser = nodes_lesser[0].data\n    }\n\n    // Ensure that lesser is initially defined as a skip_range (this is useful\n    // for some removals that may want to use conflicts with lesser\n    if (lesser && !skip_ranges.includes(lesser)) {\n      skip_ranges.unshift(lesser)\n    }\n    // It's fine that known_position is invalid because that would only impact\n    // nodes AFTER this one (whose calculations depend upon it)\n    skip_ranges.push({\n      start: nend,\n      end: nend,\n      length: 0,\n      known_position: 0,\n      rclk: new LogootInt(0)\n    })\n\n    skip_ranges = skip_ranges.filter((n) => {\n      if (n.length && n.start.levels === level) {\n        const clip_nstart = nstart.cmp(n.start) > 0\n        const clip_nend = nend.cmp(n.end) < 0\n        const start = clip_nstart ? nstart : n.start\n        const end = clip_nend ? nend : n.end\n        if (start.cmp(end) === 0) {\n          return true\n        }\n        const conflict = {\n          start,\n          end,\n          clip_nstart,\n          clip_nend,\n          whole_node: !(clip_nstart || clip_nend),\n          level\n        }\n\n        // Get the externally defined result for this conflict\n        const result = resolveConflict(n, conflict, lesser)\n\n        // Actually remove the node or part of it if it looses\n        if (result < 1) {\n          if (result < 0) {\n            // Shortcut to remove the whole node\n            if (conflict.whole_node) {\n              informRemoval(n, n.known_position, n.length, true)\n              n.length = 0\n            } else {\n              // Find the length of the middle region of the node\n              // nnnnnRRRRnnnn <- Where the 'R' is (l=4 in this case)\n              const l = new LogootInt(end.l(level)).sub(start.l(level)).js_int\n\n              // Make a copy because we will need to modify the original\n              const endnode = new LogootNode(n)\n              endnode.start = end\n              const n_end_old = n.end.offsetLowest(0)\n\n              if (clip_nstart) {\n                // This means we're dealing with an area ahead of the node with\n                // a length > 0:\n                // NNNNrrrrrnnnnn (As above, 'r' is the section of the node\n                // being removed)\n                n.length = new LogootInt(start.l(level)).sub(\n                  n.start.l(level)\n                ).js_int\n\n                endnode.known_position += n.length\n                endnode.start.offsetLowest(n.known_position + n.length + l)\n                informRemoval(n, n.known_position + n.length, l, n.length <= 0)\n              } else {\n                // The removal must be right up against the edge of the node,\n                // so we can take an easy shortcut:\n                // RRRRnnnnnn\n                informRemoval(n, n.known_position, l, true)\n                endnode.start.offsetLowest(n.known_position + l)\n              }\n              if (clip_nend) {\n                // Ok, so now we have to add a new node to account for the\n                // trailing end portion: [nnnn]rrrrNNNNN <- that\n                // We also have to re-add it to the BSTs because they are\n                // sorted by start position, so if we modify the start, we could\n                // break the sorting\n                endnode.length = new LogootInt(n_end_old.l(level)).sub(\n                  end.l(level)\n                ).js_int\n                if (endnode.length > 0) {\n                  addNode(endnode)\n                }\n              }\n            }\n          }\n          return false\n        }\n      }\n      return true\n    })\n\n    let known_start = 0\n    if (lesser) {\n      const positions = [lesser.length]\n      // Find where we are inside lesser. If we're outside of lesser, this will\n      // be greater than lesser's length and will be ignored\n      if (lesser.start.levels < nstart.levels) {\n        positions.push(\n          new LogootInt(nstart.l(lesser.start.levels)).sub(\n            lesser.start.l(lesser.start.levels)\n          ).js_int\n        )\n      }\n\n      // Figure out which endpoint to use, the end of lesser or where our\n      // position is if its inside lesser\n      const lesser_pos = Math.min(...positions)\n      known_start = lesser.known_position + lesser_pos\n\n      // Split lesser in two if necessary\n      if (lesser.length - lesser_pos) {\n        const node = new LogootNode(lesser)\n        node.start = node.start.offsetLowest(lesser_pos)\n        node.length -= lesser_pos\n        node.known_position += lesser_pos\n        addNode(node)\n\n        lesser.length = lesser_pos\n      }\n    }\n\n    const newnodes: LogootNodeWithMeta[] = []\n    // We fake the last node end to be the start of the new node because the\n    // inserted text always needs to 'snap' to the end of the last node,\n    // regardless of discontinuities in Logoot positions\n    let last_end = nstart\n    let last_known_position = known_start\n    skip_ranges.forEach((skip_range) => {\n      const { start, end, length } = skip_range\n      // Clamped regions to consider. Anything outside of the node to be\n      // inserted doesn't matter, so we clamp it out\n      // Of course, that means we have to recalculate EVERYTHING *sigh*\n      const cstart = start.equivalentPositionAtLevel(level).clamp(nstart, nend)\n      const cend = end.equivalentPositionAtLevel(level).clamp(nstart, nend)\n\n      // Now, find the offset in our body string\n      const offset = new LogootInt(last_end.l(level)).sub(nstart.l(level))\n        .js_int\n\n      const node: LogootNodeWithMeta = Object.assign(new LogootNode(), {\n        offset\n      })\n      // Find the new node length by finding the distance between the last end\n      // and the next one\n      node.length = new LogootInt(cstart.l(level)).sub(last_end.l(level)).js_int\n\n      if (node.length <= 0) {\n        last_end = cend\n        if (skip_range !== lesser) {\n          last_known_position += length\n        }\n        return\n      }\n\n      node.start = nstart.offsetLowest(offset)\n      node.known_position = last_known_position\n\n      newnodes.push(node)\n\n      last_end = cend\n      last_known_position += node.length\n      if (skip_range !== lesser) {\n        // When incrementing the known_position, we ALWAYS use the length of\n        // the whole node since we will have to skip over the node regardless\n        // of how much of it actually concerns the node being added\n        // For example, if we're adding a node around an existing node with a\n        // greater number of levels, it will have the length of zero on our\n        // current level (because it is between two positions), but we still\n        // MUST skip over its entire non-zero length\n        last_known_position += length\n      }\n    })\n    return newnodes\n  }\n\n  /**\n   * Inform the document of an incoming event from remote documents. The\n   * function `insertLocal` will be called based on the results of this.\n   * @param event_contents - The raw incoming JSON\n   */\n  remoteInsert(event_contents: InsertionEvent.JSON): void {\n    const { body, start: nstart, rclk: this_rclk } = InsertionEvent.fromJSON(\n      event_contents\n    )\n    debug.debug('REMOTE INSERT', body, nstart.toString(), this_rclk.toString())\n\n    if (this_rclk.cmp(this.vector_clock) > 0) {\n      this.vector_clock = this_rclk\n      debug.info('Fast-forward vector clock to', JSON.stringify(this_rclk))\n    }\n\n    const nodes = this._mergeNode(\n      this.logoot_bst,\n      nstart,\n      body.length,\n      (node, conflict, lesser) => {\n        // If we're inside and on a lower level than lesser, simply ignore it\n        if (node === lesser && lesser.start.levels < conflict.level) {\n          return 0\n        }\n        if (node.rclk.cmp(this_rclk) < 0) {\n          return -1\n        }\n        if (node.rclk.cmp(this_rclk) === 0) {\n          // TODO: Do something about conflicts that cause dropped data here\n          // This is HUGE and the editor WILL NOT FUNCTION WITHOUT IT!!!\n          // I really don't like the idea of pushing this until after initial\n          // release, but oh well.\n          // Also, does this even work?\n          debug.info('Dropped conflicting node')\n        }\n        return 1\n      },\n      (node) => {\n        this.ldoc_bst.add(node)\n        this.logoot_bst.add(node)\n      },\n      (node, pos, length, whole) => {\n        if (whole) {\n          this.ldoc_bst.remove(node)\n          this.logoot_bst.remove(node)\n        }\n        this.removeLocal(pos, length)\n        this.ldoc_bst.operateOnAllGteq({ known_position: pos }, (n) => {\n          if (n.data === node) {\n            return\n          }\n          n.data.known_position -= length\n        })\n      }\n    )\n\n    arraymap(nodes, (node) => {\n      let last_known_position = node.known_position\n      return this._mergeNode(\n        this.removal_bst,\n        node.start,\n        node.length,\n        (node) => {\n          if (node.rclk.cmp(this_rclk) < 0) {\n            return 0\n          }\n          return 1\n        },\n        () => {},\n        () => {}\n      ).map((newnode) => {\n        // known_positions in the removal tree are BS, so set them correctly\n        // here. TODO: Remove known_position from removals\n        newnode.known_position = last_known_position\n        newnode.offset += node.offset\n        last_known_position += newnode.length\n        return newnode\n      })\n    })\n\n    nodes.forEach((node) => {\n      node.rclk = this_rclk\n      // Now, make a space between the nodes\n      this.ldoc_bst.operateOnAllGteq(node, (n) => {\n        if (n.data === node) {\n          return\n        }\n        n.data.known_position += node.length\n      })\n\n      const node_body = body.substr(node.offset, node.length)\n      delete node.offset\n      this.insertLocal(node.known_position, node_body)\n\n      this.ldoc_bst.add(node)\n      this.logoot_bst.add(node)\n    })\n  }\n\n  /**\n   * Inform the document of an incoming event from remote documents. The\n   * function `removeLocal` will be called based on the results of this.\n   * @param event_contents - The raw incoming JSON\n   */\n  remoteRemove(event_contents: RemovalEvent.JSON): void {\n    const { rclk, removals } = RemovalEvent.fromJSON(event_contents)\n\n    const new_rclk = new LogootInt(rclk).add(1)\n    if (new_rclk.cmp(this.vector_clock) > 0) {\n      this.vector_clock = new_rclk\n      debug.info('Fast-forward vector clock to', JSON.stringify(new_rclk))\n    }\n\n    removals.forEach((r) => {\n      const { start } = r\n      const end = start.offsetLowest(r.length)\n      // The level where our removal is happening (always the lowest)\n      const level = start.levels\n      debug.debug('REMOTE REMOVE', start.toString(), r.length, rclk.toString())\n\n      // This is basically the same as the invocation in remoteInsert, only it\n      // doesn't add the resulting nodes to anything\n      const nodes = this._mergeNode(\n        this.logoot_bst,\n        start,\n        r.length,\n        (node) => {\n          // TODO: Nodes with the SAME `rclk` should still have a removal added\n          // at their position because another node with the same `rclk` as the\n          // one just removed could show up.\n          if (node.rclk.cmp(rclk) <= 0) {\n            return -1\n          }\n          return 1\n        },\n        (node) => {\n          this.ldoc_bst.add(node)\n          this.logoot_bst.add(node)\n        },\n        (node, pos, length, whole) => {\n          if (whole) {\n            this.ldoc_bst.remove(node)\n            this.logoot_bst.remove(node)\n          }\n          this.removeLocal(pos, length)\n          this.ldoc_bst.operateOnAllGteq({ known_position: pos }, (n) => {\n            if (n.data === node) {\n              return\n            }\n            n.data.known_position -= length\n          })\n        }\n      )\n\n      // Now, use the text nodes that stay as `skip_ranges`, like in the\n      // `_mergeNode` function, to find where the removal should be added to the\n      // removal BST\n      nodes.push({\n        start: end,\n        end,\n        length: 0,\n        known_position: 0,\n        rclk: new LogootInt(),\n        offset: 0\n      })\n\n      // I've gotten lazier and lazier with variable names as this file has\n      // gotten longer. I've regressed to single letter variable names\n      let last_end = start\n      nodes.forEach((n) => {\n        const length = new LogootInt(n.end.l(level)).sub(last_end.l(level))\n          .js_int\n        // Now, merge this removal with possible other ones in the removal_bst\n        const nodes = this._mergeNode(\n          this.removal_bst,\n          last_end,\n          length,\n          (node) => {\n            if (node.rclk.cmp(rclk) < 0) {\n              return -1\n            }\n            return 1\n          },\n          (node) => {\n            this.removal_bst.add(node)\n          },\n          (node, pos, length, whole) => {\n            if (whole) {\n              this.removal_bst.remove(node)\n            }\n          }\n        )\n\n        // Make sure the removals actually exist\n        nodes.forEach((node) => {\n          node.rclk = rclk\n          delete node.offset\n\n          this.removal_bst.add(node)\n        })\n        last_end = n.end\n      })\n    })\n  }\n}\n\nexport {\n  EventType,\n  EventState,\n  Document,\n  InsertionEvent,\n  RemovalEvent,\n  LogootNode,\n  LogootPosition\n}\n","/**\n * @file Definition of various integers.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { CompareResult, Comparable } from './utils'\n\n/**\n * An abstract subclass of `Comparable` to provide a generic interface for\n * integer types that may not be supported by JavaScript\n * @template FutureType - The type of the subclass with which to restrict all\n * operations to the int class.\n * @inheritdoc\n */\nabstract class IntType<FutureType> extends Comparable<FutureType | number> {\n  // eslint-disable-next-line\n  abstract toJSON(): any\n  abstract toString(): string\n\n  /**\n   * Add another integer to the value of this one\n   * @param n - The number to add\n   */\n  abstract add(n: FutureType | number): FutureType\n  /**\n   * Add another integer to the value of this one\n   * @param n - The number to subtract\n   */\n  abstract sub(n: FutureType | number): FutureType\n\n  /**\n   * The JavaScript int type for this integer (with an exception thrown if the\n   * value cannot be represented in 32 bits)\n   */\n  abstract js_int: number\n}\n\n/**\n * An `IntType` that restricts the number to 32 bits by using an `Int32Array`.\n * @inheritdoc\n * @example ```typescript\n * const a = new Int32(5)\n * console.log(a.toString()) // 5\n * a.add(10).sub(8)\n * console.log(a.toString()) // 7\n * const b = new Int32(3)\n * console.log(a.cmp(b)) // 1\n * ```\n */\nclass Int32 extends IntType<Int32> {\n  // Size limit the int, enforce signing, and remove decimals\n  private int32 = new Int32Array([0])\n\n  constructor(n: Int32 | number = 0) {\n    super()\n    if (n instanceof Int32) {\n      this.int32[0] = n.int32[0]\n    } else {\n      this.int32[0] = n\n    }\n  }\n\n  static fromJSON(obj: Int32.JSON): Int32 {\n    return new Int32(obj)\n  }\n\n  toJSON(): Int32.JSON {\n    return this.int32[0]\n  }\n\n  add(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] += n.int32[0]\n    } else {\n      this.int32[0] += n\n    }\n    return this\n  }\n  sub(n: Int32 | number): Int32 {\n    if (n instanceof Int32) {\n      this.int32[0] -= n.int32[0]\n    } else {\n      this.int32[0] -= n\n    }\n    return this\n  }\n\n  cmp(n: Int32 | number): CompareResult {\n    if (n instanceof Int32) {\n      return ((this.int32[0] >= n.int32[0] ? 1 : 0) +\n        (this.int32[0] <= n.int32[0] ? -1 : 0)) as CompareResult\n    } else {\n      return ((this.int32[0] >= n ? 1 : 0) +\n        (this.int32[0] <= n ? -1 : 0)) as CompareResult\n    }\n  }\n\n  get js_int(): number {\n    return this.int32[0]\n  }\n\n  toString(): string {\n    return this.int32[0].toString()\n  }\n}\nnamespace Int32 {\n  export type JSON = number\n  export namespace JSON {\n    export const Schema = { type: 'number' }\n  }\n}\n\nexport { IntType, Int32 }\n","/**\n * @file A binary search tree implementation for finding ranges within the tree\n * and finding neighboring nodes.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport { DualCompareFunction, MemberPtr } from './utils'\n\n/**\n * The node type used by the binary search tree\n */\nclass BstNode<T> {\n  /**\n   * The data contained in the node.\n   */\n  data: T\n  left: BstNode<T> | undefined\n  right: BstNode<T> | undefined\n  constructor(data: T) {\n    this.data = data\n  }\n}\n\n/**\n * The pointer type either to a leaf of the BST or the root. By using\n * `MemberPtr`, methods in the BST can re-assign the node value simply through\n * this 'pointer' object.\n */\ntype BstNodePtr<T> =\n  | MemberPtr<BstNode<T>, 'left'>\n  | MemberPtr<BstNode<T>, 'right'>\n  // eslint-disable-next-line\n  | MemberPtr<Bst<T, any>, 'bst_root'>\n/**\n * The type of a function that operates on nodes of the BST.\n */\ntype NodeOp<T> = (node: BstNode<T>) => void\n\n/**\n * A binary search tree implementation for finding ranges within the tree and\n * finding neighboring nodes.\n * @template T - The type stored in the tree.\n * @template S - The type used by search functions, but that cannot be added to\n * the tree. It defaults to `T`.\n */\nclass Bst<T extends S, S = T> {\n  bst_root: BstNode<T> | undefined = undefined\n  readonly cmp: DualCompareFunction<S>\n\n  /**\n   * @param cmp - The compare function to use to sort the tree.\n   */\n  constructor(cmp: DualCompareFunction<S>) {\n    this.cmp = cmp\n  }\n\n  gteqcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) >= 0\n  }\n  gtcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) > 0\n  }\n  eqcmp(a: S, b: S): boolean {\n    return this.cmp(a, b) === 0\n  }\n\n  /**\n   * Add an element to the tree.\n   * @param object - The object to add to the tree.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  add(object: T, node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')): void {\n    if (!node.value) {\n      node.value = new BstNode(object)\n    } else if (this.gteqcmp(node.value.data, object)) {\n      this.add(object, new MemberPtr(node.value, 'left'))\n    } else {\n      this.add(object, new MemberPtr(node.value, 'right'))\n    }\n  }\n\n  /**\n   * A method designed mostly for internal use that finds the next element in\n   * the tree if all of the elements were placed in order.\n   * @param object - The object or search type to find the successor of\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  _getInorderSuccessor(\n    object: S,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): { ptr: BstNodePtr<T>; data: T } | undefined {\n    type SuccessorType = { ptr: BstNodePtr<T>; data: T } | undefined\n    let successor: SuccessorType\n    const setSuccessor = (s: SuccessorType): void => {\n      if (!successor || (s && this.gtcmp(successor.data, s.data))) {\n        successor = s\n      }\n    }\n    if (node.value) {\n      if (this.gteqcmp(node.value.data, object)) {\n        if (!this.eqcmp(node.value.data, object)) {\n          setSuccessor({ ptr: node, data: node.value.data })\n        }\n        setSuccessor(\n          this._getInorderSuccessor(object, new MemberPtr(node.value, 'left'))\n        )\n      }\n      setSuccessor(\n        this._getInorderSuccessor(object, new MemberPtr(node.value, 'right'))\n      )\n    }\n    return successor\n  }\n  /**\n   * Remove an element from the tree.\n   * @param object - The object to remove or a search type that is evaluated\n   * to the same value as an object in the tree. Equivalence is determined\n   * exclusively using the compare function.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  remove(\n    object: S,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      const result = this.cmp(node.value.data, object)\n      if (result > 0) {\n        this.remove(object, new MemberPtr(node.value, 'left'))\n      } else if (result < 0) {\n        this.remove(object, new MemberPtr(node.value, 'right'))\n      } else if (node.value.left && node.value.right) {\n        const successor = this._getInorderSuccessor(node.value.data, node)\n\n        this.remove(successor.data, successor.ptr)\n        node.value.data = successor.data\n      } else {\n        node.value = node.value.left || node.value.right\n      }\n    }\n  }\n\n  /**\n   * Perform an operation on all of the elements in a range.\n   * @param start - The search type or object at which to start a search.\n   * @param endm1 - The search type or object at which to end a search\n   * inclusively. The name is `endm1` to stand for `END Minus 1` since the\n   * search is performed inclusively.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   * @param undef - TODO: Fix\n   */\n  operateOnAllRange(\n    start: S,\n    endm1: S,\n    operation: NodeOp<T>,\n    node = this.bst_root,\n    undef = false\n  ): void {\n    if (node && !undef) {\n      if (this.gteqcmp(node.data, start)) {\n        if (this.gteqcmp(endm1, node.data)) {\n          this.operateOnAllRange(start, endm1, operation, node.left, !node.left)\n          this.operateOnAllRange(\n            start,\n            endm1,\n            operation,\n            node.right,\n            !node.right\n          )\n          operation(node)\n        } else {\n          this.operateOnAllRange(start, endm1, operation, node.left, !node.left)\n        }\n      } else {\n        this.operateOnAllRange(start, endm1, operation, node.right, !node.right)\n      }\n    }\n  }\n  /**\n   * Perform an operation on all of the elements greater than or equal to a\n   * search type or object.\n   * @param value - The search type or object at which to start a search.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAllGteq(\n    value: S,\n    operation: NodeOp<T>,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (this.gteqcmp(node.value.data, value)) {\n        operation(node.value)\n        this.operateOnAllGteq(\n          value,\n          operation,\n          new MemberPtr(node.value, 'left')\n        )\n      }\n      this.operateOnAllGteq(\n        value,\n        operation,\n        new MemberPtr(node.value, 'right')\n      )\n    }\n  }\n  /**\n   * Perform an operation on all of the elements less than or equal to a\n   * search type or object.\n   * @param value - The search type or object at which to end a search.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAllLteq(\n    value: S,\n    operation: NodeOp<T>,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      if (this.gteqcmp(value, node.value.data)) {\n        operation(node.value)\n        this.operateOnAllLteq(\n          value,\n          operation,\n          new MemberPtr(node.value, 'right')\n        )\n      }\n      this.operateOnAllLteq(value, operation, new MemberPtr(node.value, 'left'))\n    }\n  }\n\n  /**\n   * Perform an operation on all nodes.\n   * @param operation - The function to run on each node.\n   * @param node - The node in the tree where the search can be started. It's\n   * optional and does not need to be changed for nearly all use cases.\n   */\n  operateOnAll(\n    operation: NodeOp<T>,\n    node: BstNodePtr<T> = new MemberPtr(this, 'bst_root')\n  ): void {\n    if (node.value) {\n      this.operateOnAll(operation, new MemberPtr(node.value, 'left'))\n      operation(node.value)\n      this.operateOnAll(operation, new MemberPtr(node.value, 'right'))\n    }\n  }\n\n  /**\n   * Get all the objects in a range.\n   * @param start - The search type or object at which to start a search.\n   * @param endm1 - The search type or object at which to end a search\n   * inclusively. The name is `endm1` to stand for `END Minus 1` since the\n   * search is performed inclusively.\n   */\n  getRange(start: S, endm1: S): (BstNode<T> | undefined)[] {\n    const nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllRange(start, endm1, (n) => nodes.push(n))\n\n    return nodes\n  }\n  /**\n   * Get all the objects greater than or equal to an object or search type.\n   * @param value - The search type or object at which to start a search.\n   */\n  getGteq(value: S): (BstNode<T> | undefined)[] {\n    let nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllGteq(value, (n) => {\n      if (!nodes[0] || this.gtcmp(nodes[0].data, n.data)) {\n        nodes = [n]\n      } else if (this.eqcmp(nodes[0].data, n.data)) {\n        nodes.push(n)\n      }\n    })\n\n    return nodes\n  }\n  /**\n   * Get all the objects less than or equal to an object or search type.\n   * @param value - The search type or object at which to end a search.\n   */\n  getLteq(value: S): (BstNode<T> | undefined)[] {\n    let nodes: (BstNode<T> | undefined)[] = []\n    this.operateOnAllLteq(value, (n) => {\n      if (!nodes[0] || this.gtcmp(n.data, nodes[0].data)) {\n        nodes = [n]\n      } else if (this.eqcmp(nodes[0].data, n.data)) {\n        nodes.push(n)\n      }\n    })\n\n    return nodes\n  }\n\n  toString(): string {\n    let str = 'BST [\\n'\n    this.operateOnAll(({ data }) => {\n      str += '  ' + data.toString() + '\\n'\n    })\n    str += ']'\n    return str\n  }\n}\n\nexport { Bst, BstNode }\n","/**\n * @file Definition of the `debug` constant from `loglevel`.\n * @author Nathan Pennie <kb1rd@kb1rd.net>\n */\n/** */\n\nimport loglevel from 'loglevel'\n\nconst debug = loglevel.getLogger('logootish-js')\n\nexport { debug }\n","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n"],"sourceRoot":""}